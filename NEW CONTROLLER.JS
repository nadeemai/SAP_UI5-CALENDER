UPDATED CODE 14

sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/ui/core/date/UI5Date",
    "sap/ui/core/Fragment",
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/m/Token",
    "sap/ui/model/odata/v2/ODataModel",
    "sap/m/Dialog",
    "sap/m/Input",
    "sap/m/Button",
    "sap/m/Text",
    "sap/m/SuggestionItem",
    "sap/m/BusyIndicator",
    "sap/ui/layout/HorizontalLayout",
    "sap/ui/layout/VerticalLayout",
    "sap/m/Label",
    "sap/m/DatePicker",
    "sap/m/TimePicker",
    "sap/m/CheckBox",
    "sap/m/MultiInput",
    "sap/m/Select",
    "sap/m/TextArea",
    "sap/ui/unified/Calendar"
], function (Controller, JSONModel, MessageToast, UI5Date, Fragment, Filter, FilterOperator, Token, ODataModel, Dialog, Input, Button, Text, SuggestionItem, BusyIndicator, HorizontalLayout, VerticalLayout, Label, DatePicker, TimePicker, CheckBox, MultiInput, Select, TextArea, UnifiedCalendar) {
    "use strict";
    return Controller.extend("com.capexrevex.capexrevex.controller.View1", {
        onInit: function () {
            // Initialize OData model
            var oSchedulingModel = new ODataModel({
                serviceUrl: "/calanderservicev2/",
                synchronizationMode: "None",
                useBatch: false
            });

            // Add error handling
            oSchedulingModel.attachRequestFailed(function (oEvent) {
                var oParams = oEvent.getParameters();
                console.error("OData request failed:", oParams);
            });

            // Add metadata loaded handler
            oSchedulingModel.attachMetadataLoaded(function () {
                console.log("Scheduling service metadata loaded successfully");
            });

            // Add metadata error handling
            oSchedulingModel.attachMetadataFailed(function (oEvent) {
                var oParams = oEvent.getParameters();
                MessageToast.show("Error connecting to scheduling service");
            });

            // Add request failed handler
            oSchedulingModel.attachRequestFailed(function (oEvent) {
                var oParams = oEvent.getParameters();
                console.error("OData request failed:", oParams);
                MessageToast.show("Service request failed: " + (oParams.message || "Unknown error"));
            });

            this.getView().setModel(oSchedulingModel, "scheduling");

            // Initialize attendees model with value property
            var oAttendeesModel = new JSONModel({
                value: [
                    { name: "Portal Admin", email: "donotreply@risedx.com", status: "Free" },
                    { name: "Pushpak Jha", email: "pushpak.jha@risedx.com", status: "Busy" }
                ] // This will hold the attendees array
            });
            this.getView().setModel(oAttendeesModel, "attendees");

            // Set initial view to Work week
            this.byId("viewSelectButton").setText("Work week");

            // Set initial time scale and days to show
            this._updateTimeScale(30);
            this._updateWorkWeekView(5);

            // Get today's date
            var today = UI5Date.getInstance();

            // Set the calendar to start from today
            var startDate = UI5Date.getInstance(
                today.getFullYear(),
                today.getMonth(),
                today.getDate(),
                8, 0 // Start at 8 AM
            );

            // Initialize the view model with data
            var oViewModel = new JSONModel({
                startDate: startDate,
                people: [{}],
                selectedEvent: {
                    title: "",
                    start: null, // Changed to null for empty fields
                    end: null,   // Changed to null for empty fields
                    info: "",
                    type: "Type01",
                    isNew: true // Flag to identify new appointments
                },
                attendeeStatus: {
                    eventwAttendeesStatus: "",
                    requiredAttendeesStatus: "",
                    optionalAttendeesStatus: "",
                    internalAttendeesStatus: ""
                },
                busy: {
                    checkingAvailability: false
                },
                filters: {
                    appointments: true,
                    meetings: true,
                    reservations: false,
                    categories: [],
                    showAs: [],
                    recurrence: [],
                    inPerson: [],
                    organizer: {
                        sent: true,
                        draft: true
                    },
                    attendee: {
                        accepted: true,
                        declined: true,
                        followed: true,
                        tentative: true,
                        canceled: true,
                        notResponded: true
                    }
                },
                currentView: "Work week",
                timeScale: "30 minutes",
                daysToShow: 5,
                workWeekMenuOpen: false,
                timeScaleMinutes: 30,
                groupMode: "Group",
                currentTime: UI5Date.getInstance(),
                allDay: false,
                currentDate: UI5Date.getInstance(),
                currentTimeString: this._formatTime(UI5Date.getInstance()),
                isEditingDateTime: false // Flag to prevent date/time updates during editing
            });

            // Create additional model with extended data using UI5Date
            var oModel = new JSONModel();
            oModel.setData({
                startDate: startDate,
                people: [
                    { appointments: [] },
                    { appointments: [] },
                    { appointments: [] },
                    { appointments: [] }
                ]
            });

            // Set both models to the view
            this.getView().setModel(oViewModel, "view");
            this.getView().setModel(oModel);

            // Initialize filter arrays
            this._aFilters = [];

            // Update date display in filter popover
            this._updateDateDisplay();

            // Load attendees data
            this._loadAttendees();

            // Set up interval to update current time display every minute
            this._currentTimeInterval = setInterval(this._updateCurrentTime.bind(this), 60000);

            // Initial update of current time
            this._updateCurrentTime();
        },

        // Format time for display
        _formatTime: function(oDate) {
            if (!oDate) return "";
            return oDate.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
        },

        // Update current time in the model - only if not editing
        _updateCurrentTime: function () {
            var oViewModel = this.getView().getModel("view");
            
            // Only update if user is not currently editing date/time fields
            if (!oViewModel.getProperty("/isEditingDateTime")) {
                var oNow = UI5Date.getInstance();
                oViewModel.setProperty("/currentTime", oNow);
                oViewModel.setProperty("/currentTimeString", this._formatTime(oNow));
                oViewModel.setProperty("/currentDate", oNow);
            }
        },

        // Set editing flag to prevent date/time updates
        setEditingDateTime: function(bEditing) {
            this.getView().getModel("view").setProperty("/isEditingDateTime", bEditing);
        },

        // Handle All Day checkbox changes
        onAllDayChange: function (oEvent) {
            var bAllDay = oEvent.getParameter("selected");
            var oViewModel = this.getView().getModel("view");
            var oSelectedEvent = oViewModel.getProperty("/selectedEvent");
            
            // Initialize start/end if they are null
            if (!oSelectedEvent.start) {
                oSelectedEvent.start = UI5Date.getInstance();
                oSelectedEvent.start.setHours(0, 0, 0, 0);
            }
            if (!oSelectedEvent.end) {
                oSelectedEvent.end = UI5Date.getInstance();
                oSelectedEvent.end.setHours(23, 59, 59, 999);
            }
            
            oViewModel.setProperty("/selectedEvent/allDay", bAllDay);

            if (bAllDay) {
                var oStart = new Date(oSelectedEvent.start);
                oStart.setHours(0, 0, 0, 0);
                oViewModel.setProperty("/selectedEvent/start", oStart);

                var oEnd = new Date(oSelectedEvent.end);
                oEnd.setHours(23, 59, 59, 999);
                oViewModel.setProperty("/selectedEvent/end", oEnd);
            } else {
                var oStart = new Date(oSelectedEvent.start);
                if (oStart.getHours() === 0) {
                    oStart.setHours(10, 0, 0, 0);
                }
                oViewModel.setProperty("/selectedEvent/start", oStart);

                var oEnd = new Date(oSelectedEvent.end);
                if (oEnd.getHours() === 23) {
                    oEnd.setHours(10, 30, 0, 0);
                }
                oViewModel.setProperty("/selectedEvent/end", oEnd);
            }
            
            // Update the visibility of time pickers in the fragment
            var oStartTime = Fragment.byId(this.getView().getId(), "startTime");
            var oEndTime = Fragment.byId(this.getView().getId(), "endTime");
            
            if (oStartTime) {
                oStartTime.setVisible(!bAllDay);
                oStartTime.setEnabled(!bAllDay);
            }
            if (oEndTime) {
                oEndTime.setVisible(!bAllDay);
                oEndTime.setEnabled(!bAllDay);
            }
        },

        // Handle view selection
        onViewSelected: function (oEvent) {
            var sSelectedView = oEvent.getParameter("listItem").getTitle();
            var oButton = this.byId("viewSelectButton");
            var oCalendar = this.byId("calendar");
            var oViewModel = this.getView().getModel("view");
            
            // Close the popover first
            this.byId("viewPopover").close();
            
            // Handle view selection
            if (sSelectedView === "Work week") {
                // Get current settings
                var iDaysToShow = oViewModel.getProperty("/daysToShow");
                var sTimeScale = oViewModel.getProperty("/timeScale");
                var iMinutes = parseInt(sTimeScale.match(/\d+/)[0]);
                
                // Update button text to show both days and time scale
                oButton.setText("Work week (" + iDaysToShow + " days, " + iMinutes + " min)");
                
                // Update the model
                oViewModel.setProperty("/currentView", sSelectedView);
                
                // Update calendar view
                oCalendar.setViewKey("Workweek");
                
                // Update the work week view and time scale
                this._updateWorkWeekView(iDaysToShow);
                this._updateTimeScale(iMinutes);
                
                MessageToast.show("View changed to: " + sSelectedView);
            } else if (sSelectedView === "Day") {
                oButton.setText(sSelectedView);
                oViewModel.setProperty("/currentView", sSelectedView);
                
                // Update calendar view
                oCalendar.setViewKey("Day");
                
                // Force refresh to ensure proper rendering
                oCalendar.rerender();
                
                MessageToast.show("View changed to: " + sSelectedView);
            } else if (sSelectedView === "Week") {
                oButton.setText(sSelectedView);
                oViewModel.setProperty("/currentView", sSelectedView);
                
                // Update calendar view
                oCalendar.setViewKey("Week");
                
                // Force refresh to ensure proper rendering
                oCalendar.rerender();
                
                MessageToast.show("View changed to: " + sSelectedView);
            } else if (sSelectedView === "Month") {
                oButton.setText(sSelectedView);
                oViewModel.setProperty("/currentView", sSelectedView);
                
                // Update calendar view
                oCalendar.setViewKey("Month");
                
                // Force refresh to ensure proper rendering
                oCalendar.rerender();
                
                MessageToast.show("View changed to: " + sSelectedView);
            } else if (sSelectedView === "Split view") {
                MessageToast.show("Split view feature coming soon");
            }
        },

        // Update work week view
        _updateWorkWeekView: function (iDays) {
            var oCalendar = this.byId("calendar");
            var oView = oCalendar.getViews().find(function (view) {
                return view.getKey() === "Workweek";
            });

            if (oView) {
                // Update the number of days to show
                oView.setIntervalsS(iDays);
                oView.setIntervalsM(iDays);
                oView.setIntervalsL(iDays);

                // Refresh the calendar
                oCalendar.rerender();
            }
        },

        // Update time scale
        _updateTimeScale: function (iMinutes) {
            var oCalendar = this.byId("calendar");
            var oViewModel = this.getView().getModel("view");
            var sCurrentView = oViewModel;

            // Only update time scale for Day and Work week views
            if (sCurrentView === "Day" || sCurrentView === "Work week") {
                var oView = oCalendar.getViews().find(function (view) {
                    return view.getKey() === (sCurrentView === "Work week" ? "Workweek" : sCurrentView);
                });

                if (oView) {
                    // Calculate the number of intervals based on the selected minutes
                    var iTotalMinutes = 24 * 60; // 24 hours in minutes
                    var iIntervals = iTotalMinutes / iMinutes;

                    // Update the view settings
                    oView.setIntervalsS(iIntervals);
                    oView.setIntervalsM(iIntervals);
                    oView.setIntervalsL(iIntervals);
                    oView.setIntervalType("Minute"); // Use string value directly

                    // Refresh the calendar
                    oCalendar.rerender();
                }
            }
        },

        // Handle days to show change
        onDaysToShowChange: function (oEvent) {
            var oViewModel = this.getView().getModel("view");
            var oSource = oEvent.getSource();
            var iDays = parseInt(oSource.getSelectedKey());
            
            // Update the model
            oViewModel.setProperty("/daysToShow", iDays);
            
            // Get current time scale
            var sTimeScale = oViewModel.getProperty("/timeScale");
            var iMinutes = parseInt(sTimeScale.match(/\d+/)[0]);
            
            // Update the button text to show both days and time scale
            var oButton = this.byId("viewSelectButton");
            oButton.setText("Work week (" + iDays + " days, " + iMinutes + " min)");
            
            // Update the work week view
            this._updateWorkWeekView(iDays);
            
            // Make sure we're in Work week view
            var oCalendar = this.byId("calendar");
            oCalendar.setViewKey("Workweek");
            oViewModel.setProperty("/currentView", "Work week");
            
            MessageToast.show("Work week now shows " + iDays + " days");
        },

        // Load attendees from scheduling service
        _loadAttendees: function () {
            var oSchedulingModel = this.getView().getModel("scheduling");
            var oAttendeesModel = this.getView().getModel("attendees");
            var that = this;

            // Read attendees from OData service
            oSchedulingModel.read("/getAttendees", {
                success: function (oData) {
                    if (oData && oData.value) {
                        // Transform the data to match our expected structure
                        var aAttendees = oData.value.map(function (oAttendee) {
                            return {
                                name: oAttendee.Name || oAttendee.name || "",
                                email: oAttendee.Email || oAttendee.email || "",
                                status: oAttendee.Status || oAttendee.status || "Free"
                            };
                        });

                        // Store in attendees model using /value property
                        oAttendeesModel.setProperty("/value", aAttendees);
                        MessageToast.show("Attendees loaded successfully: " + aAttendees.length + " found");
                    } else {
                        MessageToast.show("No attendees found");
                        oAttendeesModel.setProperty("/value", []);
                    }
                },
                error: function (oError) {
                    console.error("Error loading attendees:", oError);
                    MessageToast.show("Error loading attendees from service");
                    // Fallback to empty array if service fails
                    oAttendeesModel.setProperty("/value", []);
                }
            });
        },

        // Create a new attendee via OData service
        _createAttendee: function (oNewAttendee) {
            var oSchedulingModel = this.getView().getModel("scheduling");
            var oAttendeesModel = this.getView().getModel("attendees");
            var that = this;

            // Create the attendee via OData service
            oSchedulingModel.create("/getAttendees", oNewAttendee, {
                success: function (oData, oResponse) {
                    // Refresh the attendees list from backend
                    that._loadAttendees();
                    // Also update local model immediately so UI updates
                    var aAttendees = oAttendeesModel.getProperty("/value") || [];
                    aAttendees.push({
                        name: oNewAttendee.Name || oNewAttendee.name || "",
                        email: oNewAttendee.Email || oNewAttendee.email || "",
                        status: oNewAttendee.Status || oNewAttendee.status || "Free"
                    });
                    oAttendeesModel.setProperty("/value", aAttendees);
                    MessageToast.show("Attendee created successfully");
                },
                error: function (oError) {
                    console.error("Error creating attendee:", oError);
                    MessageToast.show("Error creating attendee");
                }
            });
        },

        // Handle attendee suggestions in MultiInput
        onAttendeeSuggest: function (oEvent) {
            var sTerm = oEvent.getParameter("suggestValue");
            var oMultiInput = oEvent.getSource();
            var oAttendeesModel = this.getView().getModel("attendees");

            if (!oAttendeesModel) {
                return;
            }

            // Get attendees from the model's value property
            var aAttendees = oAttendeesModel.getProperty("/value") || [];
            var aFilteredAttendees = [];

            if (sTerm) {
                // Filter attendees based on search term
                aFilteredAttendees = aAttendees.filter(function (oAttendee) {
                    return oAttendee.name.toLowerCase().includes(sTerm.toLowerCase()) ||
                        oAttendee.email.toLowerCase().includes(sTerm.toLowerCase());
                });
            } else {
                aFilteredAttendees = aAttendees;
            }

            // Update suggestion items
            oMultiInput.destroySuggestionItems();

            aFilteredAttendees.forEach(function (oAttendee) {
                var oSuggestionItem = new SuggestionItem({
                    key: oAttendee.email,
                    text: oAttendee.name + " (" + oAttendee.email + ")",
                    description: oAttendee.status
                });

                // Set different icons based on status
                switch (oAttendee.status.toLowerCase()) {
                    case "free":
                        oSuggestionItem.setIcon("sap-icon://accept");
                        break;
                    case "busy":
                        oSuggestionItem.setIcon("sap-icon://busy");
                        break;
                    case "tentative":
                        oSuggestionItem.setIcon("sap-icon://question-mark");
                        break;
                    default:
                        oSuggestionItem.setIcon("sap-icon://employee");
                }

                oMultiInput.addSuggestionItem(oSuggestionItem);
            });
        },

        // Handle token addition in MultiInput with OData call
        onAttendeeTokenChange: function (oEvent) {
            var oMultiInput = oEvent.getSource();
            var sInputValue = oMultiInput.getValue().trim();
            var sId = oMultiInput.getId();

            if (!sInputValue) {
                // Call checkAvailability with default email when input is empty
                var oModel = this.getView().getModel("scheduling");
                var sPath = "/checkAvailability(attendeeEmail='" + encodeURIComponent("donotreply@risedx.com") + "')";
                oModel.read(sPath, {
                    success: function (oData) {
                        var sStatus = oData.status || "Unknown";
                        // Update the status in the view model for ObjectStatus display
                        var oViewModel = this.getView().getModel("view");
                        oViewModel.setProperty("/attendeeStatus/_IDGenObjectStatus", sStatus);
                    }.bind(this),
                    error: function (oError) {
                        console.error("Error checking availability:", oError);
                        sap.m.MessageToast.show("Failed to check availability");
                        var oViewModel = this.getView().getModel("view");
                        oViewModel.setProperty("/attendeeStatus/_IDGenObjectStatus", "Error");
                    }
                });
                return;
            }

            // Determine which status property to update based on MultiInput ID
            var sStatusProperty = this._getStatusPropertyFromId(sId);

            // Check if input is an email
            if (this._isEmailValid(sInputValue)) {
                var oAttendeesModel = this.getView().getModel("attendees");
                var aAttendees = oAttendeesModel.getProperty("/value") || [];
                var bExists = aAttendees.some(function (oAttendee) {
                    return oAttendee.email === sInputValue;
                });

                if (!bExists) {
                    // Create a new attendee
                    var oNewAttendee = {
                        name: sInputValue.split('@')[0],
                        email: sInputValue,
                        status: "Free"
                    };

                    // Create the attendee via OData
                    this._createAttendee(oNewAttendee);
                }

                // Check availability for this attendee using OData service
                this._checkAttendeeAvailability(sInputValue, function (sStatus) {
                    // Create token for the email with status
                    var oToken = new Token({
                        key: sInputValue,
                        text: sInputValue.split('@')[0] + " (" + sInputValue + ")",
                        tooltip: "Status: " + sStatus
                    });

                    // Set token color based on status
                    switch (sStatus.toLowerCase()) {
                        case "free":
                            oToken.setType("Success");
                            break;
                        case "busy":
                            oToken.setType("Error");
                            break;
                        case "tentative":
                            oToken.setType("Warning");
                            break;
                        default:
                            oToken.setType("Information");
                    }

                    oMultiInput.addToken(oToken);
                    oMultiInput.setValue("");

                    // Update the status in the view model
                    var oViewModel = this.getView().getModel("view");
                    oViewModel.setProperty(sStatusProperty, sStatus);

                }.bind(this));

            } else {
                // Trigger suggestion for non-email input
                this.onAttendeeSuggest(oEvent);
            }
        },

        // Handle attendee input change to show busy indicator
        onAttendeeInputChange: function (oEvent) {
            var oMultiInput = oEvent.getSource();
            var sInputValue = oMultiInput.getValue().trim();

            if (sInputValue) {
                // Show busy indicator
                this._showAttendeeBusyIndicator(true);

                // Simulate a delay for checking availability
                setTimeout(function () {
                    // Hide busy indicator
                    this._showAttendeeBusyIndicator(false);

                    // Trigger token change if valid email
                    if (this._isEmailValid(sInputValue)) {
                        this.onAttendeeTokenChange(oEvent);
                    }
                }.bind(this), 1000);
            }
        },

        // Show or hide the busy indicator for attendee availability check
        _showAttendeeBusyIndicator: function (bShow) {
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/busy/checkingAvailability", bShow);

            // Find the busy indicator in the fragment and show/hide it
            var oBusyIndicator = Fragment.byId(this.getView().getId(), "attendeeBusyIndicator");
            if (oBusyIndicator) {
                if (bShow) {
                    oBusyIndicator.setVisible(true);
                } else {
                    oBusyIndicator.setVisible(false);
                }
            }
        },

        // Helper method to get status property from MultiInput ID
        _getStatusPropertyFromId: function (sId) {
            if (sId.indexOf("requiredAttendees") !== -1) {
                return "/attendeeStatus/requiredAttendeesStatus";
            } else if (sId.indexOf("optionalAttendees") !== -1) {
                return "/attendeeStatus/optionalAttendeesStatus";
            } else if (sId.indexOf("internalAttendees") !== -1) {
                return "/attendeeStatus/internalAttendeesStatus";
            } else {
                return "/attendeeStatus/eventwAttendeesStatus";
            }
        },

        // Check attendee availability using OData service
        _checkAttendeeAvailability: function (sEmail, fnCallback) {
            var oSchedulingModel = this.getView().getModel("scheduling");
            var oViewModel = this.getView().getModel("view");

            // Get current meeting time from the view model
            var oStartDateTime = oViewModel.getProperty("/selectedEvent/start");
            var oEndDateTime = oViewModel.getProperty("/selectedEvent/end");

            // Format dates for OData call
            var sStartDateTime = oStartDateTime ? oStartDateTime.toISOString() : new Date().toISOString();
            var sEndDateTime = oEndDateTime ? oEndDateTime.toISOString() : new Date(Date.now() + 30 * 60000).toISOString();

            // Build the OData call URL
            var sPath = "/checkAvailability(attendeeEmail='" + encodeURIComponent(sEmail) +
                "',startDateTime='" + encodeURIComponent(sStartDateTime) +
                "',endDateTime='" + encodeURIComponent(sEndDateTime) + "')";

            // Call the checkAvailability endpoint
            oSchedulingModel.read(sPath, {
                success: function (oData) {
                    var sStatus = oData.status || "Unknown";
                    fnCallback(sStatus);
                },
                error: function (oError) {
                    console.error("Error checking availability:", oError);
                    // Fallback: check if attendee exists and get their status
                    var oAttendeesModel = this.getView().getModel("attendees");
                    var aAttendees = oAttendeesModel.getProperty("/value") || [];
                    var oAttendee = aAttendees.find(function (attendee) {
                        return attendee.email === sEmail;
                    });
                    var sStatus = oAttendee ? oAttendee.status : "Unknown";
                    fnCallback(sStatus);
                }.bind(this)
            });
        },

        // Validate email format
        _isEmailValid: function (sEmail) {
            var re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            return re.test(sEmail);
        },

        // Handle date/time changes that affect availability
        onDateTimeChange: function (oEvent) {
            var oViewModel = this.getView().getModel("view");
            var oSelectedEvent = oViewModel.getProperty("/selectedEvent");

            // Get all MultiInput controls and re-check availability
            var aMultiInputIds = ["eventwAttendees", "requiredAttendees", "optionalAttendees", "internalAttendees"];
            var that = this;

            aMultiInputIds.forEach(function (sInputId) {
                var oMultiInput = Fragment.byId(that.getView().getId(), sInputId);
                if (!oMultiInput) return;

                var aTokens = oMultiInput.getTokens();
                if (aTokens.length === 0) return;

                // Re-check availability for all attendees when date/time changes
                aTokens.forEach(function (oToken) {
                    var sEmail = oToken.getKey();
                    var sStatusProperty = that._getStatusPropertyFromId(sInputId);

                    that._checkAttendeeAvailability(sEmail, function (sStatus) {
                        // Update token appearance based on new status
                        switch (sStatus.toLowerCase()) {
                            case "free":
                                oToken.setType("Success");
                                break;
                            case "busy":
                                oToken.setType("Error");
                                break;
                            case "tentative":
                                oToken.setType("Warning");
                                break;
                            default:
                                oToken.setType("Information");
                        }

                        oToken.setTooltip("Status: " + sStatus);

                        // Update the status in the view model
                        oViewModel.setProperty(sStatusProperty, sStatus);
                    });
                });
            });
        },

        // Handle status pressed to show details
        handleStatusPressed: function (oEvent) {
            var oObjectStatus = oEvent.getSource();
            var sStatus = oObjectStatus.getText();
            var sTitle = "Attendee Status Details";

            // Create a dialog to show status details
            var oDialog = new Dialog({
                title: sTitle,
                type: "Message",
                state: "Information",
                content: new Text({
                    text: "Current status: " + sStatus + "\n\n" +
                        "This status indicates the attendee's availability during the scheduled meeting time."
                }),
                beginButton: new Button({
                    text: "OK",
                    press: function () {
                        oDialog.close();
                    }
                }),
                afterClose: function () {
                    oDialog.destroy();
                }
            });

            // Open the dialog
            oDialog.open();
        },

        // Formatter for attendee status
        formatAttendeeStatus: function (sStatus) {
            switch (sStatus) {
                case "Free":
                    return "Success";
                case "Busy":
                    return "Error";
                case "Tentative":
                    return "Warning";
                default:
                    return "None";
            }
        },

        // Open the New Appointment dialog
        onNewAppointmentPress: function () {
            this._openNewAppointmentDialog();
        },

        _openNewAppointmentDialog: function () {
            if (!this._oNewAppointmentDialog) {
                // Load NewAppointmentDialog (must match file path & name exactly)
                this._oNewAppointmentDialog = new sap.ui.xmlfragment(
                    this.getView().getId(), // always pass view id for scoping
                    "com.capexrevex.capexrevex.view.Fragments.NewAppointmentDialog", // no .fragment.xml here
                    this
                );
                this.getView().addDependent(this._oNewAppointmentDialog);

                // Attach focus/blur events to prevent date/time updates during editing
                this._attachDateTimeEditingEvents("startDate", "startTime", "endDate", "endTime");
            }

            // Set default values for new appointment - empty date/time fields
            this._setDefaultAppointmentValues();

            // Set the models for the fragment
            this._oNewAppointmentDialog.setModel(this.getView().getModel("view"), "view");
            this._oNewAppointmentDialog.setModel(this.getView().getModel("attendees"), "attendees");

            this._oNewAppointmentDialog.open();
        },

        _setDefaultAppointmentValues: function () {
            // Set empty date and time values for new appointment
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", {
                title: "",
                start: null, // Empty date/time
                end: null,   // Empty date/time
                location: "",
                description: "",
                allDay: false,
                isNew: true
            });

            // Reset status
            oViewModel.setProperty("/attendeeStatus/eventwAttendeesStatus", "");
        },

        // Save the new appointment with OData service integration
        onSaveNewAppointment: function () {
            try {
                var oViewModel = this.getView().getModel("view");
                var oSelectedEvent = oViewModel.getProperty("/selectedEvent");

                // Get values from the dialog
                var sTitle = Fragment.byId(this.getView().getId(), "appointmentTitle").getValue();
                var oAttendeesInput = Fragment.byId(this.getView().getId(), "eventwAttendees");
                var aTokens = oAttendeesInput.getTokens();
                var sAttendees = aTokens.map(function (oToken) {
                    return oToken.getKey();
                }).join("; ");

                // Validate required fields
                if (!sTitle) {
                    MessageToast.show("Please enter a title for the appointment");
                    return;
                }

                // Validate that end time is after start time
                if (oSelectedEvent.end <= oSelectedEvent.start) {
                    MessageToast.show("End time must be after start time");
                    return;
                }

                // Prepare data for OData service
                var oMeetingData = {
                    MeetingTitle: sTitle,
                    StartDateTime: oSelectedEvent.start ? oSelectedEvent.start.toISOString() : new Date().toISOString(),
                    EndDateTime: oSelectedEvent.end ? oSelectedEvent.end.toISOString() : new Date(Date.now() + 30 * 60000).toISOString(),
                    Location: oSelectedEvent.location || "",
                    Description: oSelectedEvent.description || "",
                    IsAllDay: oSelectedEvent.allDay || false,
                    IsRecurring: false,
                    IsVirtual: false,
                    Attendees: sAttendees,
                    OrganizerEmail: "pushpak.jha@risedx.com",
                    Category: "Appointment"
                };

                // Call OData service to create meeting
                this.createMeetingScheduling(oMeetingData);

            } catch (error) {
                console.error("Error saving appointment:", error);
                MessageToast.show("Error creating appointment. Please try again.");
            }
        },

        // Create meeting scheduling via OData service
        createMeetingScheduling: function (oMeetingData) {
            var oSchedulingModel = this.getView().getModel("scheduling");
            var that = this;

            // Prepare the payload according to your service metadata
            var oPayload = {
                MeetingTitle: oMeetingData.MeetingTitle,
                StartDateTime: oMeetingData.StartDateTime,
                EndDateTime: oMeetingData.EndDateTime,
                Location: oMeetingData.Location || "",
                Description: oMeetingData.Description || "",
                IsAllDay: oMeetingData.IsAllDay || false,
                IsRecurring: oMeetingData.IsRecurring || false,
                IsVirtual: oMeetingData.IsVirtual || false,
                Attendees: oMeetingData.Attendees || "",
                OrganizerEmail: oMeetingData.OrganizerEmail || "pushpak.jha@risedx.com",
                Category: oMeetingData.Category || "Meeting"
            };

            oSchedulingModel.create("/MeetingScheduling", oPayload, {
                success: function (oData, oResponse) {
                    MessageToast.show("Meeting scheduled successfully!");

                    // Add the meeting to the local calendar for immediate UI update
                    that._addMeetingToCalendar(oMeetingData);

                    // Close the dialog
                    if (that._oNewAppointmentDialog) {
                        that._oNewAppointmentDialog.close();
                    }

                    // Refresh attendees if needed
                    that._loadAttendees();
                },
                error: function (oError) {
                    console.error("Error scheduling meeting:", oError);

                    // Fallback: Add to local calendar even if service call fails
                    that._addMeetingToCalendar(oMeetingData);

                    // Close the dialog
                    if (that._oNewAppointmentDialog) {
                        that._oNewAppointmentDialog.close();
                    }

                    MessageToast.show("Meeting saved locally (service unavailable)");
                }
            });
        },

        // Helper method to add meeting to calendar
        _addMeetingToCalendar: function (oMeetingData) {
            var oModel = this.getView().getModel();
            var aPeople = oModel.getProperty("/people");

            if (aPeople && aPeople.length > 0) {
                var newAppointment = {
                    start: new Date(oMeetingData.StartDateTime),
                    end: new Date(oMeetingData.EndDateTime),
                    title: oMeetingData.MeetingTitle,
                    info: oMeetingData.Location || "Online Meeting",
                    type: "Type01",
                    pic: "sap-icon://group",
                    category: oMeetingData.Category || "Meeting",
                    showAs: "Busy",
                    recurrence: oMeetingData.IsRecurring ? "Recurring" : "Non-recurring",
                    inPerson: oMeetingData.IsVirtual ? "Virtual" : "In-person",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted",
                    attendees: oMeetingData.Attendees || [],
                    description: oMeetingData.Description || "",
                    allDay: oMeetingData.IsAllDay || false
                };

                // Add to the first person's appointments
                aPeople[0].appointments.push(newAppointment);
                oModel.setProperty("/people", aPeople);

                // Refresh calendar to show the new appointment
                this.byId("calendar").getBinding("rows").refresh(true);

                // Also refresh the entire model to ensure UI updates
                oModel.refresh(true);
            }
        },

        // Discard the new appointment
        onDiscardNewAppointment: function () {
            // Close the dialog without saving
            if (this._oNewAppointmentDialog) {
                this._oNewAppointmentDialog.close();
            }
            MessageToast.show("Appointment creation cancelled");
        },

        // Update date display in filter popover
        _updateDateDisplay: function () {
            var oDateDisplay = this.byId("dateDisplay");
            if (oDateDisplay) {
                var today = UI5Date.getInstance();
                var options = { weekday: 'long', day: 'numeric' };
                var dateText = today.toLocaleDateString('en-US', options);
                oDateDisplay.setText(dateText);
            }
        },

        // Clean up on exit
        onExit: function () {
            // Clean up all fragments when the controller is destroyed
            if (this._oNewAppointmentDialog) {
                this._oNewAppointmentDialog.destroy();
                this._oNewAppointmentDialog = null;
            }
            if (this._oChannelMeetingDialog) {
                this._oChannelMeetingDialog.destroy();
                this._oChannelMeetingDialog = null;
            }
            if (this._oVirtualAppointmentDialog) {
                this._oVirtualAppointmentDialog.destroy();
                this._oVirtualAppointmentDialog = null;
            }
            if (this._oRemarksDialog) {
                this._oRemarksDialog.destroy();
                this._oRemarksDialog = null;
            }
            if (this._oEventDetailsPopover) {
                this._oEventDetailsPopover.destroy();
                this._oEventDetailsPopover = null;
            }
            if (this._oMeetNowDialog) {
                this._oMeetNowDialog.destroy();
                this._oMeetNowDialog = null;
            }

            // Clear the interval for updating current time
            if (this._currentTimeInterval) {
                clearInterval(this._currentTimeInterval);
            }
        },

        // Role-based functionality
        roles: {
            donna: "Donna Moore",
            manager: "manager",
            admin: "admin"
        },

        handleRoleChange: function () {
            this.getView().getModel().refresh(true);
        },

        getUserRole: function () {
            return this.roles[this.byId("userRole").getSelectedKey()];
        },

        canModifyAppointments: function (sRole) {
            var sUserRole = this.getUserRole();
            if (sUserRole === this.roles.manager || sUserRole === this.roles.admin || sUserRole === sRole) {
                return true;
            }
            return false;
        },

        // Filter functionality
        onFilterChange: function (oEvent) {
            var sFilterType = oEvent.getSource().getId().replace("Checkbox", "");
            var bSelected = oEvent.getParameter("selected");
            // Update filter model
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            oFilters[sFilterType.toLowerCase()] = bSelected;
            oViewModel.setProperty("/filters", oFilters);
            // Apply filters
            this.applyFilters();
        },

        // Update the applyFilters method to work correctly
        applyFilters: function () {
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            // Clear existing filters
            this._aFilters = [];

            // Apply category type filters
            var aCategoryFilters = [];
            if (oFilters.appointments) {
                aCategoryFilters.push(new Filter("category", FilterOperator.EQ, "Appointment"));
            }
            if (oFilters.meetings) {
                aCategoryFilters.push(new Filter("category", FilterOperator.EQ, "Meeting"));
            }
            if (oFilters.reservations) {
                aCategoryFilters.push(new Filter("category", FilterOperator.EQ, "Reservation"));
            }
            if (aCategoryFilters.length > 0) {
                this._aFilters.push(new Filter({
                    filters: aCategoryFilters,
                    and: false
                }));
            }

            // Apply additional filters if any are selected
            if (oFilters.categories && oFilters.categories.length > 0) {
                this._aFilters.push(new Filter("category", FilterOperator.Contains, oFilters.categories.join("|")));
            }
            if (oFilters.showAs && oFilters.showAs.length > 0) {
                this._aFilters.push(new Filter("showAs", FilterOperator.Contains, oFilters.showAs.join("|")));
            }
            if (oFilters.recurrence && oFilters.recurrence.length > 0) {
                this._aFilters.push(new Filter("recurrence", FilterOperator.Contains, oFilters.recurrence.join("|")));
            }
            if (oFilters.inPerson && oFilters.inPerson.length > 0) {
                this._aFilters.push(new Filter("inPerson", FilterOperator.Contains, oFilters.inPerson.join("|")));
            }

            // Apply organizer filters
            var aOrganizerFilters = [];
            if (oFilters.organizer.sent) {
                aOrganizerFilters.push(new Filter("organizerStatus", FilterOperator.EQ, "sent"));
            }
            if (oFilters.organizer.draft) {
                aOrganizerFilters.push(new Filter("organizerStatus", FilterOperator.EQ, "draft"));
            }
            if (aOrganizerFilters.length > 0) {
                this._aFilters.push(new Filter({
                    filters: aOrganizerFilters,
                    and: false
                }));
            }

            // Apply attendee filters
            var aAttendeeFilters = [];
            if (oFilters.attendee.accepted) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "accepted"));
            }
            if (oFilters.attendee.declined) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "declined"));
            }
            if (oFilters.attendee.followed) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "followed"));
            }
            if (oFilters.attendee.tentative) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "tentative"));
            }
            if (oFilters.attendee.canceled) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "canceled"));
            }
            if (oFilters.attendee.notResponded) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "notResponded"));
            }
            if (aAttendeeFilters.length > 0) {
                this._aFilters.push(new Filter({
                    filters: aAttendeeFilters,
                    and: false
                }));
            }

            // Apply filters to the calendar
            var oCalendar = this.byId("calendar");
            var oBinding = oCalendar.getBinding("rows");
            if (this._aFilters.length > 0) {
                oBinding.filter(this._aFilters);
            } else {
                oBinding.filter([]);
            }

            // Update filter button text
            var oFilterButton = this.byId("_IDGenButton7");
            var iFilterCount = this._aFilters.length;
            oFilterButton.setText(iFilterCount > 0 ? "Filter (" + iFilterCount + ")" : "Filter");
        },

        // Filter popover handlers
        onAppointmentsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("appointmentsFilterPopover").openBy(oButton);
        },

        onMeetingsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("meetingsFilterPopover").openBy(oButton);
        },

        onReservationsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("reservationsFilterPopover").openBy(oButton);
        },

        onCategoriesFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("categoriesFilterPopover").openBy(oButton);
        },

        onShowAsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("showAsFilterPopover").openBy(oButton);
        },

        onRecurrenceFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("recurrenceFilterPopover").openBy(oButton);
        },

        onInPersonFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("inPersonFilterPopover").openBy(oButton);
        },

        // Organizer and Attendee filter handlers
        onOrganizerFilterPress: function (oEvent) {
            var oOptionsBox = this.byId("organizerOptions");
            oOptionsBox.setVisible(!oOptionsBox.getVisible());
        },

        onAttendeeFilterPress: function (oEvent) {
            var oOptionsBox = this.byId("attendeeOptions");
            oOptionsBox.setVisible(!oOptionsBox.getVisible());
        },

        onOrganizerFilterChange: function (oEvent) {
            var sId = oEvent.getSource().getId();
            var bSelected = oEvent.getParameter("selected");
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            // Update the corresponding filter property
            if (sId === "sentCheckbox") {
                oFilters.organizer.sent = bSelected;
            } else if (sId === "draftCheckbox") {
                oFilters.organizer.draft = bSelected;
            }
            oViewModel.setProperty("/filters", oFilters);
            this.applyFilters();
        },

        onAttendeeFilterChange: function (oEvent) {
            var sId = oEvent.getSource().getId();
            var bSelected = oEvent.getParameter("selected");
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            // Update the corresponding filter property
            if (sId === "acceptedCheckbox") {
                oFilters.attendee.accepted = bSelected;
            } else if (sId === "declinedCheckbox") {
                oFilters.attendee.declined = bSelected;
            } else if (sId === "followedCheckbox") {
                oFilters.attendee.followed = bSelected;
            } else if (sId === "tentativeCheckbox") {
                oFilters.attendee.tentative = bSelected;
            } else if (sId === "canceledCheckbox") {
                oFilters.attendee.canceled = bSelected;
            } else if (sId === "notRespondedCheckbox") {
                oFilters.attendee.notResponded = bSelected;
            }
            oViewModel.setProperty("/filters", oFilters);
            this.applyFilters();
        },

        onUnselectAllRight: function () {
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            // Reset organizer filters
            oFilters.organizer.sent = false;
            oFilters.organizer.draft = false;
            // Reset attendee filters
            oFilters.attendee.accepted = false;
            oFilters.attendee.declined = false;
            oFilters.attendee.followed = false;
            oFilters.attendee.tentative = false;
            oFilters.attendee.canceled = false;
            oFilters.attendee.notResponded = false;
            oViewModel.setProperty("/filters", oFilters);
            // Update the checkboxes
            this.byId("sentCheckbox").setSelected(false);
            this.byId("draftCheckbox").setSelected(false);
            this.byId("acceptedCheckbox").setSelected(false);
            this.byId("declinedCheckbox").setSelected(false);
            this.byId("followedCheckbox").setSelected(false);
            this.byId("tentativeCheckbox").setSelected(false);
            this.byId("canceledCheckbox").setSelected(false);
            this.byId("notRespondedCheckbox").setSelected(false);
            this.applyFilters();
        },

        // Unselect all handlers - Updated to properly clear all filters
        onAppointmentsUnselectAll: function (oEvent) {
            this._unselectAllFilters("appointments");
        },

        onMeetingsUnselectAll: function (oEvent) {
            this._unselectAllFilters("meetings");
        },

        onReservationsUnselectAll: function (oEvent) {
            this._unselectAllFilters("reservations");
        },

        onCategoriesUnselectAll: function (oEvent) {
            this._unselectAllFilters("categories");
        },

        onShowAsUnselectAll: function (oEvent) {
            this._unselectAllFilters("showAs");
        },

        onRecurrenceUnselectAll: function (oEvent) {
            this._unselectAllFilters("recurrence");
        },

        onInPersonUnselectAll: function (oEvent) {
            this._unselectAllFilters("inPerson");
        },

        // Generic method to unselect all filters in a category
        _unselectAllFilters: function (sFilterType) {
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");

            // Reset the filter array for this type
            if (Array.isArray(oFilters[sFilterType])) {
                oFilters[sFilterType] = [];
            } else {
                oFilters[sFilterType] = false;
            }

            oViewModel.setProperty("/filters", oFilters);

            // Get the popover and unselect all checkboxes
            var sPopoverId = sFilterType + "FilterPopover";
            var oPopover = this.byId(sPopoverId);

            if (oPopover) {
                // Find all checkboxes in the popover
                var aCheckboxes = oPopover.findAggregatedObjects(true, function (oControl) {
                    return oControl.isA("sap.m.CheckBox");
                });

                // Unselect all checkboxes
                aCheckboxes.forEach(function (oCheckbox) {
                    oCheckbox.setSelected(false);
                });
            }

            // Apply the updated filters
            this.applyFilters();

            // Show confirmation message
            MessageToast.show("All " + sFilterType + " filters cleared");
        },

        // Filter selection handlers
        onAppointmentsFilterSelect: function (oEvent) {
            this._updateFilterArray("appointments", oEvent);
        },

        onMeetingsFilterSelect: function (oEvent) {
            this._updateFilterArray("meetings", oEvent);
        },

        onReservationsFilterSelect: function (oEvent) {
            this._updateFilterArray("reservations", oEvent);
        },

        onCategoriesFilterSelect: function (oEvent) {
            this._updateFilterArray("categories", oEvent);
        },

        onShowAsFilterSelect: function (oEvent) {
            this._updateFilterArray("showAs", oEvent);
        },

        onRecurrenceFilterSelect: function (oEvent) {
            this._updateFilterArray("recurrence", oEvent);
        },

        onInPersonFilterSelect: function (oEvent) {
            this._updateFilterArray("inPerson", oEvent);
        },

        _updateFilterArray: function (sFilterType, oEvent) {
            var sValue = oEvent.getSource().getText();
            var bSelected = oEvent.getParameter("selected");
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            if (!oFilters[sFilterType]) {
                oFilters[sFilterType] = [];
            }
            if (bSelected) {
                if (oFilters[sFilterType].indexOf(sValue) === -1) {
                    oFilters[sFilterType].push(sValue);
                }
            } else {
                var iIndex = oFilters[sFilterType].indexOf(sValue);
                if (iIndex !== -1) {
                    oFilters[sFilterType].splice(iIndex, 1);
                }
            }
            oViewModel.setProperty("/filters", oFilters);
            this.applyFilters();
        },

        onClearFilters: function () {
            // Reset all filter checkboxes
            var aCheckBoxIds = [
                "appointmentsCheckbox", "meetingsCheckbox", "reservationsCheckbox"
            ];
            aCheckBoxIds.forEach(function (sId) {
                var oCheckBox = this.byId(sId);
                if (oCheckBox) {
                    oCheckBox.setSelected(false); // Clear all selections
                }
            }.bind(this));

            // Reset organizer and attendee filters
            this.byId("sentCheckbox").setSelected(false);
            this.byId("draftCheckbox").setSelected(false);
            this.byId("acceptedCheckbox").setSelected(false);
            this.byId("declinedCheckbox").setSelected(false);
            this.byId("followedCheckbox").setSelected(false);
            this.byId("tentativeCheckbox").setSelected(false);
            this.byId("canceledCheckbox").setSelected(false);
            this.byId("notRespondedCheckbox").setSelected(false);

            // Reset filter arrays in model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/filters", {
                appointments: false, // Clear appointments
                meetings: false,     // Clear meetings
                reservations: false,  // Clear reservations
                categories: [],
                showAs: [],
                recurrence: [],
                inPerson: [],
                organizer: {
                    sent: false,
                    draft: false
                },
                attendee: {
                    accepted: false,
                    declined: false,
                    followed: false,
                    tentative: false,
                    canceled: false,
                    notResponded: false
                }
            });

            // Apply empty filters
            this._aFilters = [];
            var oCalendar = this.byId("calendar");
            oCalendar.getBinding("rows").filter([]);

            // Update filter button text
            this.byId("_IDGenButton7").setText("Filter");
            MessageToast.show("All filters cleared");
        },

        // Drag and Drop functionality
        handleAppointmentDragEnter: function (oEvent) {
            if (this.isAppointmentOverlap(oEvent, oEvent.getParameter("calendarRow"))) {
                oEvent.preventDefault();
            }
        },

        handleAppointmentDrop: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                oCalendarRow = oEvent.getParameter("calendarRow"),
                bCopy = oEvent.getParameter("copy"),
                sTitle = oAppointment.getTitle(),
                oModel = this.getView().getModel(),
                oAppBindingContext = oAppointment.getBindingContext(),
                oRowBindingContext = oCalendarRow.getBindingContext(),
                handleAppointmentDropBetweenRows = function () {
                    var aPath = oAppBindingContext.getPath().split("/");
                    var iIndex = aPath.pop();
                    var sRowAppointmentsPath = aPath.join("/");
                    oRowBindingContext.getObject().appointments.push(
                        oModel.getProperty(oAppBindingContext.getPath())
                    );
                    oModel.getProperty(sRowAppointmentsPath).splice(iIndex, 1);
                };
            if (bCopy) { // "copy" appointment
                var oProps = Object.assign({}, oModel.getProperty(oAppointment.getBindingContext().getPath()));
                oProps.start = oStartDate;
                oProps.end = oEndDate;
                oRowBindingContext.getObject().appointments.push(oProps);
            } else { // "move" appointment
                oModel.setProperty("start", oStartDate, oAppBindingContext);
                oModel.setProperty("end", oEndDate, oAppBindingContext);
                if (oAppointment.getParent() !== oCalendarRow) {
                    handleAppointmentDropBetweenRows();
                }
            }
            oModel.refresh(true);
        },

        handleAppointmentResize: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate");
            if (!this.isAppointmentOverlap(oEvent, oAppointment.getParent())) {
                oAppointment
                    .setStartDate(oStartDate)
                    .setEndDate(oEndDate);
            } else {
                MessageToast.show("As a manager you can not resize events if they overlap with another events");
            }
        },

        // Modified handleAppointmentCreate to open event details fragment
        handleAppointmentCreate: function (oEvent) {
            var oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                oPlanningCalendarRow = oEvent.getParameter("calendarRow"),
                oModel = this.getView().getModel(),
                sPath = oPlanningCalendarRow.getBindingContext().getPath();
            // Create a new appointment object
            var newAppointment = {
                title: "New Appointment",
                start: oStartDate,
                end: oEndDate,
                info: "",
                type: "Type01",
                category: "Appointment",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "In-person",
                organizerStatus: "sent",
                attendeeStatus: "accepted",
                isNew: true // Flag to indicate it's a new appointment
            };
            // Set the selected event in the view model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", newAppointment);
            // Open the event details fragment
            this._openEventDetailsPopover(oEvent.getParameter("domRef"));
            MessageToast.show("New Appointment is created at \n" + oStartDate + "\n and end at \n" + oEndDate + ".");
        },

        isAppointmentOverlap: function (oEvent, oCalendarRow) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                bAppointmentOverlapped;
            if (this.getUserRole() === this.roles.manager) {
                bAppointmentOverlapped = oCalendarRow.getAppointments().some(function (oCurrentAppointment) {
                    if (oCurrentAppointment === oAppointment) {
                        return;
                    }
                    var oAppStartTime = oCurrentAppointment.getStartDate().getTime(),
                        oAppEndTime = oCurrentAppointment.getEndDate().getTime();
                    if (oAppStartTime <= oStartDate.getTime() && oStartDate.getTime() < oAppEndTime) {
                        return true;
                    }
                    if (oAppStartTime < oEndDate.getTime() && oEndDate.getTime() <= oAppEndTime) {
                        return true;
                    }
                    if (oStartDate.getTime() <= oAppStartTime && oAppStartTime < oEndDate.getTime()) {
                        return true;
                    }
                });
            }
            return bAppointmentOverlapped;
        },

        // Toolbar and UI functionality
        onTodayPress: function () {
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/startDate", UI5Date.getInstance());
            MessageToast.show("Navigated to today");
        },

        onViewSelectPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oViewPopover = this.byId("viewPopover");
            // Close other popovers
            this.byId("filterPopover").close();
            this.byId("newEventPopover").close();
            this.byId("eventDetailsPopover").close();
            // Toggle view popover
            if (!oViewPopover.isOpen()) {
                oViewPopover.openBy(oButton);
            } else {
                oViewPopover.close();
            }
        },

        onFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oFilterPopover = this.byId("filterPopover");
            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("newEventPopover").close();
            this.byId("eventDetailsPopover").close();
            // Toggle filter popover
            if (!oFilterPopover.isOpen()) {
                oFilterPopover.openBy(oButton);
            } else {
                oFilterPopover.close();
            }
        },

        onNewEventPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oNewEventPopover = this.byId("newEventPopover");
            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("filterPopover").close();
            this.byId("eventDetailsPopover").close();
            // Toggle new event popover
            if (!oNewEventPopover.isOpen()) {
                oNewEventPopover.openBy(oButton);
            } else {
                oNewEventPopover.close();
            }
        },

        onNotificationPress: function () {
            MessageToast.show("No new notifications");
        },

        // Work week menu functionality
        onWorkWeekMenuPress: function (oEvent) {
            var oViewModel = this.getView().getModel("view");
            var bMenuOpen = oViewModel.getProperty("/workWeekMenuOpen");
            // Toggle the menu visibility
            oViewModel.setProperty("/workWeekMenuOpen", !bMenuOpen);
            // Update the arrow icon direction
            var oButton = this.byId("_IDGenWorkWeekButton");
            oButton.setIcon(!bMenuOpen ? "sap-icon://slim-arrow-down" : "sap-icon://slim-arrow-right");
        },

        // Time scale dropdown change handler
        onTimeScaleChange: function (oEvent) {
            var oViewModel = this.getView().getModel("view");
            var oSource = oEvent.getSource();
            var sSelectedKey = oSource.getSelectedKey();
            // Extract the number of minutes from the selected key
            var iMinutes = parseInt(sSelectedKey);
            // Update the model
            oViewModel.setProperty("/timeScale", iMinutes + " minutes");
            oViewModel.setProperty("/timeScaleMinutes", iMinutes);
            // Get current days to show
            var iDays = oViewModel.getProperty("/daysToShow");
            // Update the button text to show both days and time scale
            var oButton = this.byId("viewSelectButton");
            oButton.setText("Work week (" + iDays + " days, " + iMinutes + " min)");
            // Update the calendar's time scale
            this._updateTimeScale(iMinutes);
            // Make sure we're in Work week view
            var oCalendar = this.byId("calendar");
            oCalendar.setViewKey("Workweek");
            oViewModel.setProperty("/currentView", "Work week");
            MessageToast.show("Time scale changed to: " + iMinutes + " minutes");
        },

        onSavedViewsPress: function () {
            MessageToast.show("Saved views feature coming soon");
        },

        onNewEventTypeSelected: function (oEvent) {
            var sEventType = oEvent.getSource().getTitle();
            this.byId("newEventPopover").close();

            if (sEventType === "Channel meeting") {
                this._openChannelMeetingDialog();
            } else if (sEventType === "Event") {
                this._openRemarksDialog();
            } else if (sEventType === "Virtual appointment") {
                this._openVirtualAppointmentDialog();
            } else {
                MessageToast.show("Creating new: " + sEventType);
            }
        },

        // Open the Channel Meeting Dialog
        _openChannelMeetingDialog: function () {
            // Reset status properties
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/attendeeStatus/requiredAttendeesStatus", "");
            oViewModel.setProperty("/attendeeStatus/optionalAttendeesStatus", "");

            if (!this._oChannelMeetingDialog) {
                // Load ChannelMeetingDialog (must match file path & name exactly)
                this._oChannelMeetingDialog = new sap.ui.xmlfragment(
                    this.getView().getId(),  // always pass view id for scoping
                    "com.capexrevex.capexrevex.Fragments.ChannelMeetingDialog", // no .fragment.xml here
                    this
                );
                this.getView().addDependent(this._oChannelMeetingDialog);

                // Attach focus/blur events to prevent date/time updates during editing
                this._attachDateTimeEditingEvents("startDate", "startTime", "endDate", "endTime");
            }

            // Set empty date and time values for new channel meeting
            oViewModel.setProperty("/selectedChannelMeeting", {
                title: "",
                startDate: null, // Empty date
                startTime: null, // Empty time
                endDate: null,   // Empty date
                endTime: null,   // Empty time
                agenda: "",
                type: "Type02",
                icon: "",
                requiredAttendees: [],
                optionalAttendees: [],
                attendeeStatus: "",
                isNew: true
            });

            // Set the combined date/time values for the actual event
            oViewModel.setProperty("/selectedEvent", {
                start: null,
                end: null
            });

            // Set the models for the fragment
            this._oChannelMeetingDialog.setModel(this.getView().getModel());
            this._oChannelMeetingDialog.setModel(this.getView().getModel("attendees"), "attendees");

            this._oChannelMeetingDialog.open();
        },

        // Open the Virtual Appointment Dialog
        _openVirtualAppointmentDialog: function () {
            if (!this._oVirtualAppointmentDialog) {
                // Load VirtualAppointmentDialog (must match file path & name exactly)
                this._oVirtualAppointmentDialog = new sap.ui.xmlfragment(
                    this.getView().getId(),  // always pass view id for scoping
                    "com.capexrevex.capexrevex.Fragments.VirtualAppointmentDialog", // no .fragment.xml here
                    this
                );
                this.getView().addDependent(this._oVirtualAppointmentDialog);

                // Attach focus/blur events to prevent date/time updates during editing
                this._attachDateTimeEditingEvents("virtualStartDate", "virtualStartTime", "virtualEndDate", "virtualEndTime");
            }

            // Set empty date and time values for new virtual appointment
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedVirtualAppointment", {
                title: "",
                startDate: null, // Empty date
                startTime: null, // Empty time
                endDate: null,   // Empty date
                endTime: null,   // Empty time
                meetingLink: "",
                type: "Type03",
                icon: "sap-icon://video",
                attendees: [],
                attendeeStatus: "",
                isNew: true
            });

            // Set the combined date/time values for the actual event
            oViewModel.setProperty("/selectedEvent", {
                start: null,
                end: null
            });

            // Set the models for the fragment
            this._oVirtualAppointmentDialog.setModel(this.getView().getModel());
            this._oVirtualAppointmentDialog.setModel(this.getView().getModel("attendees"), "attendees");

            this._oVirtualAppointmentDialog.open();
        },

        _setDefaultChannelMeetingValues: function () {
            // Set empty date and time values for new channel meeting
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedChannelMeeting/start", null);
            oViewModel.setProperty("/selectedChannelMeeting/end", null);
        },

        _setDefaultVirtualAppointmentValues: function () {
            // Set empty date and time values for new virtual appointment
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedVirtualAppointment/start", null);
            oViewModel.setProperty("/selectedVirtualAppointment/end", null);
            
            // Set default status values
            oViewModel.setProperty("/selectedEvent/internalAttendeeStatus", "");
        },

        // Add event handlers for date and time changes
        onChannelStartDateChange: function(oEvent) {
            this._handleStartDateChange(oEvent, "selectedChannelMeeting", "selectedEvent");
        },

        onChannelStartTimeChange: function(oEvent) {
            this._handleStartTimeChange(oEvent, "selectedChannelMeeting", "selectedEvent");
        },

        onChannelEndDateChange: function(oEvent) {
            this._handleEndDateChange(oEvent, "selectedChannelMeeting", "selectedEvent");
        },

        onChannelEndTimeChange: function(oEvent) {
            this._handleEndTimeChange(oEvent, "selectedChannelMeeting", "selectedEvent");
        },

        onVirtualStartDateChange: function(oEvent) {
            this._handleStartDateChange(oEvent, "selectedVirtualAppointment", "selectedEvent");
        },

        onVirtualStartTimeChange: function(oEvent) {
            this._handleStartTimeChange(oEvent, "selectedVirtualAppointment", "selectedEvent");
        },

        onVirtualEndDateChange: function(oEvent) {
            this._handleEndDateChange(oEvent, "selectedVirtualAppointment", "selectedEvent");
        },

        onVirtualEndTimeChange: function(oEvent) {
            this._handleEndTimeChange(oEvent, "selectedVirtualAppointment", "selectedEvent");
        },

        // Helper methods to handle date/time changes
        _handleStartDateChange: function(oEvent, sDialogModel, sEventModel) {
            var oViewModel = this.getView().getModel("view");
            var oNewDate = oEvent.getParameter("dateValue");
            if (!oNewDate) return;
            
            // Get the current start time
            var oCurrentStart = oViewModel.getProperty("/" + sDialogModel + "/startTime");
            if (!oCurrentStart) {
                oCurrentStart = new Date();
            }
            
            // Combine the new date with the existing time
            var oCombinedDateTime = new Date(oNewDate);
            oCombinedDateTime.setHours(
                oCurrentStart.getHours(),
                oCurrentStart.getMinutes(),
                oCurrentStart.getSeconds(),
                oCurrentStart.getMilliseconds()
            );
            
            // Update both the dialog model and the event model
            oViewModel.setProperty("/" + sDialogModel + "/startDate", oNewDate);
            oViewModel.setProperty("/" + sEventModel + "/start", oCombinedDateTime);
        },

        _handleStartTimeChange: function(oEvent, sDialogModel, sEventModel) {
            var oViewModel = this.getView().getModel("view");
            var oNewTime = oEvent.getParameter("dateValue");
            if (!oNewTime) return;
            
            // Get the current start date
            var oCurrentDate = oViewModel.getProperty("/" + sDialogModel + "/startDate");
            if (!oCurrentDate) {
                oCurrentDate = new Date();
            }
            
            // Combine the existing date with the new time
            var oCombinedDateTime = new Date(oCurrentDate);
            oCombinedDateTime.setHours(
                oNewTime.getHours(),
                oNewTime.getMinutes(),
                oNewTime.getSeconds(),
                oNewTime.getMilliseconds()
            );
            
            // Update both the dialog model and the event model
            oViewModel.setProperty("/" + sDialogModel + "/startTime", oNewTime);
            oViewModel.setProperty("/" + sEventModel + "/start", oCombinedDateTime);
        },

        _handleEndDateChange: function(oEvent, sDialogModel, sEventModel) {
            var oViewModel = this.getView().getModel("view");
            var oNewDate = oEvent.getParameter("dateValue");
            if (!oNewDate) return;
            
            // Get the current end time
            var oCurrentEnd = oViewModel.getProperty("/" + sDialogModel + "/endTime");
            if (!oCurrentEnd) {
                oCurrentEnd = new Date();
            }
            
            // Combine the new date with the existing time
            var oCombinedDateTime = new Date(oNewDate);
            oCombinedDateTime.setHours(
                oCurrentEnd.getHours(),
                oCurrentEnd.getMinutes(),
                oCurrentEnd.getSeconds(),
                oCurrentEnd.getMilliseconds()
            );
            
            // Update both the dialog model and the event model
            oViewModel.setProperty("/" + sDialogModel + "/endDate", oNewDate);
            oViewModel.setProperty("/" + sEventModel + "/end", oCombinedDateTime);
        },

        _handleEndTimeChange: function(oEvent, sDialogModel, sEventModel) {
            var oViewModel = this.getView().getModel("view");
            var oNewTime = oEvent.getParameter("dateValue");
            if (!oNewTime) return;
            
            // Get the current end date
            var oCurrentDate = oViewModel.getProperty("/" + sDialogModel + "/endDate");
            if (!oCurrentDate) {
                oCurrentDate = new Date();
            }
            
            // Combine the existing date with the new time
            var oCombinedDateTime = new Date(oCurrentDate);
            oCombinedDateTime.setHours(
                oNewTime.getHours(),
                oNewTime.getMinutes(),
                oNewTime.getSeconds(),
                oNewTime.getMilliseconds()
            );
            
            // Update both the dialog model and the event model
            oViewModel.setProperty("/" + sDialogModel + "/endTime", oNewTime);
            oViewModel.setProperty("/" + sEventModel + "/end", oCombinedDateTime);
        },

        // Save Channel Meeting
        onSaveChannelMeeting: function () {
            try {
                // Get values from the dialog
                var sTitle = Fragment.byId(this.getView().getId(), "meetingTitle").getValue();

                // Get required attendees
                var oRequiredAttendees = Fragment.byId(this.getView().getId(), "requiredAttendees");
                var aRequiredTokens = oRequiredAttendees.getTokens();
                var sRequiredAttendees = aRequiredTokens.map(function (oToken) {
                    return oToken.getKey();
                }).join("; ");

                // Get optional attendees
                var oOptionalAttendees = Fragment.byId(this.getView().getId(), "optionalAttendees");
                var aOptionalTokens = oOptionalAttendees.getTokens();
                var sOptionalAttendees = aOptionalTokens.map(function (oToken) {
                    return oToken.getKey();
                }).join("; ");

                var bAllDay = Fragment.byId(this.getView().getId(), "allDayCheckbox").getSelected();
                var sChannel = Fragment.byId(this.getView().getId(), "channelInput").getValue();
                var sLocation = Fragment.byId(this.getView().getId(), "locationInput").getValue();
                var bOnlineMeeting = Fragment.byId(this.getView().getId(), "onlineMeetingCheckbox").getSelected();
                var sDetails = Fragment.byId(this.getView().getId(), "meetingDetails").getValue();
                var sAgenda = Fragment.byId(this.getView().getId(), "meetingAgenda").getValue();

                // Validate required fields
                if (!sTitle) {
                    MessageToast.show("Please enter a title for the meeting");
                    return;
                }

                // Get the combined date/time values from the model
                var oViewModel = this.getView().getModel("view");
                var oStart = oViewModel.getProperty("/selectedEvent/start");
                var oEnd = oViewModel.getProperty("/selectedEvent/end");

                // Validate that end time is after start time
                if (oEnd <= oStart) {
                    MessageToast.show("End time must be after start time");
                    return;
                }

                // Create the new appointment object
                var newAppointment = {
                    start: oStart,
                    end: oEnd,
                    title: sTitle,
                    info: "Channel: " + sChannel + (sLocation ? " | Location: " + sLocation : ""),
                    type: "Type01",
                    pic: "sap-icon://group",
                    requiredAttendees: sRequiredAttendees,
                    optionalAttendees: sOptionalAttendees,
                    details: sDetails,
                    agenda: sAgenda,
                    allDay: bAllDay,
                    onlineMeeting: bOnlineMeeting,
                    category: "Meeting",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: bOnlineMeeting ? "Virtual" : "In-person",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted",
                    description: sDetails + " " + sAgenda
                };

                // Get the model and add the new appointment to the first person's calendar
                var oModel = this.getView().getModel();
                var aPeople = oModel.getProperty("/people");

                if (aPeople && aPeople.length > 0) {
                    // Add to the first person's appointments
                    aPeople[0].appointments.push(newAppointment);

                    // Update the model
                    oModel.setProperty("/people", aPeople);
                    oModel.refresh(true);

                    // Show success message
                    MessageToast.show("Channel meeting '" + sTitle + "' has been created");

                    // Close the dialog
                    this._oChannelMeetingDialog.close();

                    // Refresh the calendar to show the new appointment
                    this.byId("calendar").getBinding("rows").refresh(true);
                } else {
                    MessageToast.show("Error: Could not find calendar to add meeting");
                }
            } catch (error) {
                console.error("Error saving channel meeting:", error);
                MessageToast.show("Error creating meeting. Please try again.");
            }
        },

        // Save Virtual Appointment
        onSaveVirtualAppointment: function () {
            try {
                var oViewModel = this.getView().getModel("view");
                var sTitle = Fragment.byId(this.getView().getId(), "virtualTitle").getValue();
                var sGuestName = Fragment.byId(this.getView().getId(), "guestName").getValue();
                var sGuestEmail = Fragment.byId(this.getView().getId(), "guestEmail").getValue();

                var oInternalAttendees = Fragment.byId(this.getView().getId(), "internalAttendees");
                var aInternalTokens = oInternalAttendees.getTokens();
                var sInternalAttendees = aInternalTokens.map(function (oToken) {
                    return oToken.getKey();
                }).join("; ");

                var bAllDay = Fragment.byId(this.getView().getId(), "virtualAllDay").getSelected();
                var sLocation = Fragment.byId(this.getView().getId(), "virtualLocation").getValue();
                var sPresenterOptions = Fragment.byId(this.getView().getId(), "presenterOptions").getSelectedKey();
                var bRecordAutomatically = Fragment.byId(this.getView().getId(), "recordAutomatically").getSelected();
                var sMeetingChat = Fragment.byId(this.getView().getId(), "meetingChat").getSelectedKey();
                var sMessage = Fragment.byId(this.getView().getId(), "virtualMessage").getValue();

                if (!sTitle) {
                    MessageToast.show("Please enter a title for the appointment");
                    return;
                }

                if (!sGuestName || !sGuestEmail) {
                    MessageToast.show("Please enter guest name and email");
                    return;
                }

                // Get the combined date/time values from the model
                var oStart = oViewModel.getProperty("/selectedEvent/start");
                var oEnd = oViewModel.getProperty("/selectedEvent/end");

                // Validate that end time is after start time
                if (oEnd <= oStart) {
                    MessageToast.show("End time must be after start time");
                    return;
                }

                var newAppointment = {
                    start: oStart,
                    end: oEnd,
                    title: sTitle,
                    info: "Virtual Appointment with " + sGuestName + " (" + sGuestEmail + ")",
                    type: "Type01",
                    pic: "sap-icon://video",
                    internalAttendees: sInternalAttendees,
                    location: sLocation,
                    presenterOptions: sPresenterOptions,
                    recordAutomatically: bRecordAutomatically,
                    meetingChat: sMeetingChat,
                    message: sMessage,
                    allDay: bAllDay,
                    isVirtual: true,
                    category: "Appointment",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: "Virtual",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted",
                    description: sMessage
                };

                var oModel = this.getView().getModel();
                var aPeople = oModel.getProperty("/people");

                if (aPeople && aPeople.length > 0) {
                    aPeople[0].appointments.push(newAppointment);
                    oModel.setProperty("/people", aPeople);
                    oModel.refresh(true);

                    MessageToast.show("Virtual appointment '" + sTitle + "' has been created");

                    // Refresh calendar to show the new appointment
                    this.byId("calendar").getBinding("rows").refresh(true);
                } else {
                    MessageToast.show("Error: Could not find calendar to add appointment");
                }

                if (this._oVirtualAppointmentDialog) {
                    this._oVirtualAppointmentDialog.close();
                }
            } catch (error) {
                console.error("Error saving virtual appointment:", error);
                MessageToast.show("Error creating appointment. Please try again.");
            }
        },

        // Cancel Channel Meeting
        onCancelChannelMeeting: function () {
            // Close the dialog without saving
            if (this._oChannelMeetingDialog) {
                this._oChannelMeetingDialog.close();
            }
            MessageToast.show("Channel meeting creation cancelled");
        },

        // Cancel Virtual Appointment
        onCancelVirtualAppointment: function () {
            // Close the dialog without saving
            if (this._oVirtualAppointmentDialog) {
                this._oVirtualAppointmentDialog.close();
            }
            MessageToast.show("Virtual appointment creation cancelled");
        },

        // Add additional guest
        onAddGuest: function () {
            MessageToast.show("Additional guest feature coming soon");
        },

        onStartDateChange: function (oEvent) {
            var oDate = oEvent.getSource().getDateValue();
            if (!oDate) return;

            var oViewModel = this.getView().getModel("view");
            var oStart = new Date(oViewModel.getProperty("/selectedEvent/start"));
            if (!oStart) {
                oStart = new Date();
            }
            oStart.setFullYear(oDate.getFullYear(), oDate.getMonth(), oDate.getDate());
            oViewModel.setProperty("/selectedEvent/start", oStart);
        },

        onStartTimeChange: function (oEvent) {
            var oTime = oEvent.getSource().getDateValue();
            if (!oTime) return;

            var oViewModel = this.getView().getModel("view");
            var oStart = new Date(oViewModel.getProperty("/selectedEvent/start"));
            if (!oStart) {
                oStart = new Date();
            }
            oStart.setHours(oTime.getHours(), oTime.getMinutes(), 0, 0);
            oViewModel.setProperty("/selectedEvent/start", oStart);
        },

        onEndDateChange: function (oEvent) {
            var oDate = oEvent.getSource().getDateValue();
            if (!oDate) return;

            var oViewModel = this.getView().getModel("view");
            var oEnd = new Date(oViewModel.getProperty("/selectedEvent/end"));
            if (!oEnd) {
                oEnd = new Date();
            }
            oEnd.setFullYear(oDate.getFullYear(), oDate.getMonth(), oDate.getDate());
            oViewModel.setProperty("/selectedEvent/end", oEnd);
        },

        onEndTimeChange: function (oEvent) {
            var oTime = oEvent.getSource().getDateValue();
            if (!oTime) return;

            var oViewModel = this.getView().getModel("view");
            var oEnd = new Date(oViewModel.getProperty("/selectedEvent/end"));
            if (!oEnd) {
                oEnd = new Date();
            }
            oEnd.setHours(oTime.getHours(), oTime.getMinutes(), 0, 0);
            oViewModel.setProperty("/selectedEvent/end", oEnd);
        },

        onMoreOptionsPress: function () {
            MessageToast.show("More options coming soon");
        },

        // Modified onAppointmentSelect method
        onAppointmentSelect: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment");
            var oBindingContext = oAppointment.getBindingContext();

            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("filterPopover").close();
            this.byId("newEventPopover").close();

            // Get appointment data
            var oAppointmentData = oBindingContext.getObject();

            // Extract attendees from appointment
            var aAttendees = this._extractAttendeesFromAppointment(oAppointmentData);
            var sTitle = oAppointmentData.title;
            if (sTitle === "new appointment") {
                sTitle = "";
            }

            // Update selected event in model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", {
                title: sTitle,
                start: oAppointmentData.start,
                end: oAppointmentData.end,
                location: oAppointmentData.info || "",
                description: oAppointmentData.description || "",
                allDay: oAppointmentData.allDay || false,
                attendees: aAttendees,
                meetingLink: oAppointmentData.meetingLink || ""
            });
            oViewModel.setProperty("/selectedEventPath", oBindingContext.getPath());

            // Open event details popover using the new fragment
            this._openEventDetailsPopover(oEvent.getParameter("domRef"));
        },

        // Modified onIntervalSelect method
        onIntervalSelect: function (oEvent) {
            var oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                oRow = oEvent.getParameter("row"),
                oModel = this.getView().getModel(),
                oAppointment = {
                    start: oStartDate,
                    end: oEndDate,
                    title: "new appointment",
                    info: "",
                    type: "Type01",
                    location: "",
                    description: "",
                    allDay: false,
                    attendees: "",
                    category: "Appointment",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: "In-person",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted"
                };
            var oRowContext = oRow.getBindingContext();
            var sPath = oRowContext.getPath() + "/appointments";
            var aAppointments = oModel.getProperty(sPath) || [];
            aAppointments.push(oAppointment);
            oModel.setProperty(sPath, aAppointments);
            MessageToast.show("New appointment created. Click on it to edit.");
        },

        // Add this method to open the event details popover
        _openEventDetailsPopover: function (oSource) {
            var that = this;

            // Load the fragment if not already loaded
            if (!this._oEventDetailsPopover) {
                Fragment.load({
                    id: this.getView().getId(),
                    name: "com.capexrevex.capexrevex.view.Fragments.EventDetailsDialog",
                    controller: this
                }).then(function (oPopover) {
                    that._oEventDetailsPopover = oPopover;
                    that.getView().addDependent(that._oEventDetailsPopover);

                    // Attach focus/blur events to prevent date/time updates during editing
                    that._attachDateTimeEditingEvents("eventStartDate", "eventStartTime", "eventEndDate", "eventEndTime");

                    // Set the model for the fragment
                    that._oEventDetailsPopover.setModel(that.getView().getModel("view"), "view");
                    that._oEventDetailsPopover.setModel(that.getView().getModel("attendees"), "attendees");

                    that._oEventDetailsPopover.openBy(oSource);

                    // Set attendees tokens after the fragment is rendered
                    setTimeout(function () {
                        that._setAttendeesTokens();
                    }, 100);
                }).catch(function (error) {
                    console.error("Error loading event details fragment:", error);
                    MessageToast.show("Error loading event details");
                });
            } else {
                // Set the model for the fragment
                this._oEventDetailsPopover.setModel(this.getView().getModel("view"), "view");
                this._oEventDetailsPopover.setModel(this.getView().getModel("attendees"), "attendees");

                // Open the popover
                this._oEventDetailsPopover.openBy(oSource);

                // Set attendees tokens
                this._setAttendeesTokens();
            }
        },

        _setAttendeesTokens: function () {
            var oViewModel = this.getView().getModel("view");
            var sAttendees = oViewModel.getProperty("/selectedEvent/attendees") || "";

            // Get the MultiInput control from the fragment
            var oMultiInput = Fragment.byId(this.getView().getId(), "eventAttendees");
            if (!oMultiInput) {
                console.error("MultiInput control not found in fragment");
                return;
            }

            // Clear existing tokens
            oMultiInput.destroyTokens();

            // Parse attendees and create tokens
            var aAttendees = this._parseAttendees(sAttendees);
            aAttendees.forEach(function (oAttendee) {
                var oToken = new Token({
                    key: oAttendee.email,
                    text: oAttendee.name + " (" + oAttendee.email + ")"
                });
                oMultiInput.addToken(oToken);
            });
        },

        // Extract attendees from appointment data
        _extractAttendeesFromAppointment: function (oAppointment) {
            var aAttendees = [];

            // Handle different appointment types
            if (oAppointment.requiredAttendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.requiredAttendees));
            }
            if (oAppointment.optionalAttendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.optionalAttendees));
            }
            if (oAppointment.internalAttendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.internalAttendees));
            }
            if (oAppointment.guestEmail) {
                aAttendees.push({
                    name: oAppointment.guestName || oAppointment.guestEmail,
                    email: oAppointment.guestEmail,
                    status: "Free"
                });
            }
            if (oAppointment.attendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.attendees));
            }

            return aAttendees;
        },

        // Parse attendees string into objects
        _parseAttendees: function (sAttendees) {
            if (!sAttendees) return [];

            if (typeof sAttendees === 'string') {
                return sAttendees.split(';').map(function (sAttendee) {
                    sAttendee = sAttendee.trim();
                    if (sAttendee) {
                        return {
                            name: sAttendee,
                            email: sAttendee,
                            status: "Free"
                        };
                    }
                    return null;
                }).filter(Boolean);
            } else if (Array.isArray(sAttendees)) {
                return sAttendees;
            }

            return [];
        },

        // Modified onSaveEvent method to handle attendees
        onSaveEvent: function () {
            var oViewModel = this.getView().getModel("view");
            var sPath = oViewModel.getProperty("/selectedEventPath");

            // Get values from the fragment controls
            var oTitleControl = Fragment.byId(this.getView().getId(), "eventTitle");
            var oStartDateControl = Fragment.byId(this.getView().getId(), "eventStartDate");
            var oStartTimeControl = Fragment.byId(this.getView().getId(), "eventStartTime");
            var oEndDateControl = Fragment.byId(this.getView().getId(), "eventEndDate");
            var oEndTimeControl = Fragment.byId(this.getView().getId(), "eventEndTime");
            var oLocationControl = Fragment.byId(this.getView().getId(), "eventLocation");
            var oDescriptionControl = Fragment.byId(this.getView().getId(), "eventDescription");
            var oAllDayControl = Fragment.byId(this.getView().getId(), "allDayCheckbox");
            var oAttendeesControl = Fragment.byId(this.getView().getId(), "eventAttendees");

            // Validate controls exist
            if (!oTitleControl || !oStartDateControl || !oStartTimeControl ||
                !oEndDateControl || !oEndTimeControl || !oLocationControl ||
                !oDescriptionControl || !oAllDayControl || !oAttendeesControl) {
                MessageToast.show("Error: Could not find all form controls");
                return;
            }

            // Get values
            var sTitle = oTitleControl.getValue();
            var oStartDate = oStartDateControl.getDateValue();
            var oStartTime = oStartTimeControl.getDateValue();
            var oEndDate = oEndDateControl.getDateValue();
            var oEndTime = oEndTimeControl.getDateValue();
            var sLocation = oLocationControl.getValue();
            var sDescription = oDescriptionControl.getValue();
            var bAllDay = oAllDayControl.getSelected();

            // Get attendees
            var aTokens = oAttendeesControl.getTokens();
            var sAttendees = aTokens.map(function (oToken) {
                return oToken.getKey();
            }).join("; ");

            // Validate required fields
            if (!sTitle) {
                MessageToast.show("Please enter a title for the event");
                return;
            }

            if (!oStartDate || !oEndDate) {
                MessageToast.show("Please enter valid start and end dates");
                return;
            }

            // Combine date and time
            var oStart = new Date(oStartDate);
            if (!bAllDay && oStartTime) {
                oStart.setHours(oStartTime.getHours(), oStartTime.getMinutes(), 0, 0);
            } else if (bAllDay) {
                oStart.setHours(0, 0, 0, 0);
            }

            var oEnd = new Date(oEndDate);
            if (!bAllDay && oEndTime) {
                oEnd.setHours(oEndTime.getHours(), oEndTime.getMinutes(), 0, 0);
            } else if (bAllDay) {
                oEnd.setHours(23, 59, 59, 999);
            }

            // Validate that end time is after start time
            if (oEnd <= oStart) {
                MessageToast.show("End time must be after start time");
                return;
            }

            // Check if this is a new appointment or editing existing one
            if (sPath) {
                // Update existing appointment
                var oModel = this.getView().getModel();
                oModel.setProperty(sPath + "/title", sTitle);
                oModel.setProperty(sPath + "/start", oStart);
                oModel.setProperty(sPath + "/end", oEnd);
                oModel.setProperty(sPath + "/allDay", bAllDay);
                oModel.setProperty(sPath + "/info", sLocation);
                oModel.setProperty(sPath + "/location", sLocation);
                oModel.setProperty(sPath + "/description", sDescription);
                oModel.setProperty(sPath + "/attendees", sAttendees);
                MessageToast.show("Event updated successfully");
            } else {
                // Create new appointment
                var newAppointment = {
                    start: oStart,
                    end: oEnd,
                    title: sTitle,
                    info: sLocation,
                    type: "Type01",
                    category: "Appointment",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: "In-person",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted",
                    attendees: sAttendees,
                    allDay: bAllDay,
                    description: sDescription
                };

                // Add to the first person's appointments
                var oModel = this.getView().getModel();
                var aPeople = oModel.getProperty("/people");
                if (aPeople && aPeople.length > 0) {
                    aPeople[0].appointments.push(newAppointment);
                    oModel.setProperty("/people", aPeople);
                    MessageToast.show("New event '" + sTitle + "' has been created");
                } else {
                    MessageToast.show("Error: Could not find calendar to add event");
                    return;
                }
            }

            // Close the popover
            if (this._oEventDetailsPopover) {
                this._oEventDetailsPopover.close();
            }

            // Refresh the calendar
            this.byId("calendar").getBinding("rows").refresh(true);
        },

        // Modified onDiscardEvent method
        onDiscardEvent: function () {
            // Close the popover without saving
            if (this._oEventDetailsPopover) {
                this._oEventDetailsPopover.close();
            }
            MessageToast.show("Changes discarded");
        },

        // Fragment handling functions
        _openRemarksDialog: function () {
            // Reset status properties
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/attendeeStatus/eventwAttendeesStatus", "");

            if (!this._oRemarksDialog) {
                // Load RemarksDialog (must match file path & name exactly)
                this._oRemarksDialog = new sap.ui.xmlfragment(this.getView().getId(),  // always pass view id for scoping
                    "com.capexrevex.capexrevex.Fragments.RemarksDialog", // no .fragment.xml here
                    this);
                this.getView().addDependent(this._oRemarksDialog);

                // Attach focus/blur events to prevent date/time updates during editing
                this._attachDateTimeEditingEvents("eventwStartDate", "eventwStartTime", "eventwEndDate", "eventwEndTime");
            }

            // Set empty date and time values for new event
            oViewModel.setProperty("/selectedEvent", {
                title: "",
                start: null, // Empty date/time
                end: null,   // Empty date/time
                info: "",
                type: "Type01",
                icon: "",
                attendees: [],
                attendeeStatus: "", // Initialize attendee status
                isNew: true
            });

            // Set the models for the fragment
            this._oRemarksDialog.setModel(this.getView().getModel());
            this._oRemarksDialog.setModel(this.getView().getModel("attendees"), "attendees");

            this._oRemarksDialog.open();
        },

        // Update your save function to ensure it works
        onSaveEventFromDialog: function () {
            try {
                var oViewModel = this.getView().getModel("view");
                var sTitle = Fragment.byId(this.getView().getId(), "eventwTitle").getValue();

                // Get attendees from MultiInput
                var oAttendeesInput = Fragment.byId(this.getView().getId(), "eventwAttendees");
                var aTokens = oAttendeesInput.getTokens();
                var sAttendees = aTokens.map(function (oToken) {
                    return oToken.getKey();
                }).join("; ");

                // Validate required fields
                if (!sTitle) {
                    MessageToast.show("Please enter a title for the event");
                    return;
                }

                // Get other form values and create the event
                var newAppointment = {
                    start: oViewModel.getProperty("/selectedEvent/start"),
                    end: oViewModel.getProperty("/selectedEvent/end"),
                    title: sTitle,
                    pic: "sap-icon://video",
                    info: "Event with attendees",
                    type: "Type01",
                    attendees: sAttendees,
                    category: "Appointment",
                    showAs: "Busy"
                };

                // Add to calendar
                var oModel = this.getView().getModel();
                var aPeople = oModel.getProperty("/people");

                if (aPeople && aPeople.length > 0) {
                    aPeople[0].appointments.push(newAppointment);
                    oModel.setProperty("/people", aPeople);

                    // Close dialog
                    if (this._oRemarksDialog) {
                        this._oRemarksDialog.close();
                    }

                    MessageToast.show("Event '" + sTitle + "' has been created");
                    this.byId("calendar").getBinding("rows").refresh(true);
                }
            } catch (error) {
                console.error("Error saving event:", error);
                MessageToast.show("Error creating event");
            }
        },

        onCancelEventFromDialog: function () {
            // Close the dialog without saving
            if (this._oRemarksDialog) {
                this._oRemarksDialog.close();
            }
        },

        onToggleGroupMode: function () {
            var oViewModel = this.getView().getModel("view");
            var sMode = oViewModel.getProperty("/groupMode");
            oViewModel.setProperty("/groupMode", sMode === "Group" ? "None" : "Group");
            this.byId("calendar").rerender();
        },

        // Meet Now functionality
        onMeetNowPress: function () {
            this._openMeetNowDialog();
        },

        _openMeetNowDialog: function () {
            // Create dialog if it doesn't exist
            if (!this._oMeetNowDialog) {
                // Create meeting name input
                var oMeetingNameInput = new Input({
                    placeholder: "Enter meeting name",
                    value: "Meeting with Nadeem Abbas",
                    liveChange: function (oEvent) {
                        this._sMeetingName = oEvent.getParameter("value");
                    }.bind(this)
                });

                // Create start meeting button
                var oStartButton = new Button({
                    text: "Start meeting",
                    type: "Emphasized",
                    press: function () {
                        this._startMeetingDirect();
                    }.bind(this)
                });

                // Create get link button
                var oGetLinkButton = new Button({
                    text: "Get a link to share",
                    icon: "sap-icon://chain-link",
                    press: function () {
                        this._getMeetingLink();
                    }.bind(this)
                });

                // Create dialog with BOTH buttons
                this._oMeetNowDialog = new Dialog({
                    title: "Start a meeting now",
                    content: [
                        new Text({ text: "Meeting name" }),
                        oMeetingNameInput,
                        new Text({
                            // text: "This will open Microsoft Teams directly with the meeting link.",
                            class: "sapUiSmallMarginTop"
                        })
                    ],
                    beginButton: oStartButton,
                    endButton: oGetLinkButton, // Add the second button here
                    afterClose: function () {
                        // Reset meeting name when dialog closes
                        oMeetingNameInput.setValue("Meeting with Nadeem Abbas");
                    }
                });

                // Add dialog to view as dependent
                this.getView().addDependent(this._oMeetNowDialog);
            }

            // Open dialog
            this._oMeetNowDialog.open();
        },

        // Simplified version that just opens the Teams link
        _startMeetingDirect: function () {
            var meetingName = this._sMeetingName || "Meeting with Nadeem Abbas";

            // The Teams meeting link
            var joinUrl = "https://teams.microsoft.com/meet/4326770710049?p=BLkTTilSIc40mXD6CS";

            // Create a simple calendar event
            this._createMeetingEvent(meetingName, joinUrl);

            // Close the dialog
            if (this._oMeetNowDialog) {
                this._oMeetNowDialog.close();
            }

            // Open the Teams link directly
            window.open(joinUrl, "_blank");

            MessageToast.show("Opening Microsoft Teams meeting...");
        },

        _getMeetingLink: function () {
            // The correct meeting link as specified
            var meetingLink = "https://teams.microsoft.com/l/meetup-join/19%3ameeting_OGI5NmRmNDEtODc0Ni00MGNhLThlNjQtYzAyYTY2NzA5Yzhk%40thread.v2/0?context=%7b%22Tid%22%3a%229b95bc3c-fada-4090-b06b-0f54c08cc340%22%2c%22Oid%22%3a%22bef22b80-5884-4ba0-9774-00c706633cb5%22%7d";

            // Copy to clipboard
            navigator.clipboard.writeText(meetingLink).then(function () {
                MessageToast.show("Meeting link copied to clipboard");
            }).catch(function (err) {
                console.error('Could not copy text: ', err);
                MessageToast.show("Failed to copy link");
            });

            // Close the dialog
            if (this._oMeetNowDialog) {
                this._oMeetNowDialog.close();
            }
        },

        _createMeetingEvent: function (meetingName, meetingLink) {
            var oNow = UI5Date.getInstance();
            var oStart = UI5Date.getInstance(oNow);
            var oEnd = UI5Date.getInstance(oStart);
            oEnd.setHours(oEnd.getHours() + 1); // 1 hour meeting

            var newAppointment = {
                start: oStart,
                end: oEnd,
                title: meetingName,
                info: "Online Meeting",
                type: "Type01",
                pic: "sap-icon://video",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "Virtual",
                organizerStatus: "sent",
                attendeeStatus: "accepted",
                isOnline: true,
                meetingLink: meetingLink || ""
            };

            // Get the model and add the new appointment to the first person's calendar
            var oModel = this.getView().getModel();
            var aPeople = oModel.getProperty("/people");

            if (aPeople && aPeople.length > 0) {
                aPeople[0].appointments.push(newAppointment);
                oModel.setProperty("/people", aPeople);

                // Refresh the calendar to show the new appointment
                this.byId("calendar").getBinding("rows").refresh(true);
            }
        },

        // Join meeting functionality with late join detection
        onJoinMeeting: function () {
            var oViewModel = this.getView().getModel("view");
            var oSelectedEvent = oViewModel.getProperty("/selectedEvent");
            var oNow = UI5Date.getInstance();
            var oEventStart = new Date(oSelectedEvent.start);

            // Calculate time difference in minutes
            var iDiffMinutes = (oNow - oEventStart) / (1000 * 60);

            // Check if user is joining 30+ minutes late
            if (iDiffMinutes > 30) {
                // Create a new event starting now and ending 30 minutes later
                var oNewStart = UI5Date.getInstance(oNow);
                var oNewEnd = UI5Date.getInstance(oNow);
                oNewEnd.setMinutes(oNewEnd.getMinutes() + 30);

                var newAppointment = {
                    start: oNewStart,
                    end: oNewEnd,
                    title: "Follow-up: " + oSelectedEvent.title,
                    info: oSelectedEvent.info || "",
                    type: "Type01",
                    category: "Meeting",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: oSelectedEvent.inPerson || "Virtual",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted",
                    meetingLink: oSelectedEvent.meetingLink || ""
                };

                // Add to the first person's appointments
                var oModel = this.getView().getModel();
                var aPeople = oModel.getProperty("/people");

                if (aPeople && aPeople.length > 0) {
                    aPeople[0].appointments.push(newAppointment);
                    oModel.setProperty("/people", aPeople);
                    MessageToast.show("Created a new follow-up meeting for 30 minutes");
                }

                // Show popup message
                MessageToast.show("The meeting has ended, please join the new meeting.");
            }

            // Use the fixed Teams meeting link provided in the requirement
            var sMeetingLink = "https://teams.microsoft.com/l/meetup-join/19%3ameeting_MGQ0NGJjODQtMGEyMC00MjJiLTg3NzMtYTEyYTdlMjk4YTI4%40thread.v2/0?context=%7b%22Tid%22%3a%229b95bc3c-fada";

            // Open the meeting link
            sap.m.URLHelper.redirect(sMeetingLink, true);
        },

        // Helper method to attach focus/blur events to date/time controls
        _attachDateTimeEditingEvents: function() {
            var that = this;
            var aControlIds = Array.prototype.slice.call(arguments);
            
            aControlIds.forEach(function(sControlId) {
                var oControl = Fragment.byId(that.getView().getId(), sControlId);
                if (oControl) {
                    oControl.attachEvent("focus", that.setEditingDateTime.bind(that, true));
                    oControl.attachEvent("blur", that.setEditingDateTime.bind(that, false));
                }
            });
        }
    });
});


UPDATED CODE 13

sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/ui/core/date/UI5Date",
    "sap/ui/core/Fragment",
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/m/Token",
    "sap/ui/model/odata/v2/ODataModel",
    "sap/m/Dialog",
    "sap/m/Input",
    "sap/m/Button",
    "sap/m/Text",
    "sap/m/SuggestionItem",
    "sap/m/BusyIndicator",
    "sap/ui/layout/HorizontalLayout",
    "sap/ui/layout/VerticalLayout",
    "sap/m/Label",
    "sap/m/DatePicker",
    "sap/m/TimePicker",
    "sap/m/CheckBox",
    "sap/m/MultiInput",
    "sap/m/Select",
    "sap/m/TextArea",
    "sap/ui/unified/Calendar"
], function (Controller, JSONModel, MessageToast, UI5Date, Fragment, Filter, FilterOperator, Token, ODataModel, Dialog, Input, Button, Text, SuggestionItem, BusyIndicator, HorizontalLayout, VerticalLayout, Label, DatePicker, TimePicker, CheckBox, MultiInput, Select, TextArea, UnifiedCalendar) {
    "use strict";
    return Controller.extend("com.capexrevex.capexrevex.controller.View1", {
        onInit: function () {
            // Initialize OData model
            var oSchedulingModel = new ODataModel({
                serviceUrl: "/calanderservicev2/",
                synchronizationMode: "None",
                useBatch: false
            });

            // Add error handling
            oSchedulingModel.attachRequestFailed(function (oEvent) {
                var oParams = oEvent.getParameters();
                console.error("OData request failed:", oParams);
            });

            // Add metadata loaded handler
            oSchedulingModel.attachMetadataLoaded(function () {
                console.log("Scheduling service metadata loaded successfully");
            });

            // Add metadata error handling
            oSchedulingModel.attachMetadataFailed(function (oEvent) {
                var oParams = oEvent.getParameters();
                MessageToast.show("Error connecting to scheduling service");
            });

            // Add request failed handler
            oSchedulingModel.attachRequestFailed(function (oEvent) {
                var oParams = oEvent.getParameters();
                console.error("OData request failed:", oParams);
                MessageToast.show("Service request failed: " + (oParams.message || "Unknown error"));
            });

            this.getView().setModel(oSchedulingModel, "scheduling");

            // Initialize attendees model with value property
            var oAttendeesModel = new JSONModel({
                value: [
                    { name: "Portal Admin", email: "donotreply@risedx.com", status: "Free" },
                    { name: "Pushpak Jha", email: "pushpak.jha@risedx.com", status: "Busy" }
                ] // This will hold the attendees array
            });
            this.getView().setModel(oAttendeesModel, "attendees");

            // Set initial view to Work week
            this.byId("viewSelectButton").setText("Work week");

            // Set initial time scale and days to show
            this._updateTimeScale(30);
            this._updateWorkWeekView(5);

            // Get today's date
            var today = UI5Date.getInstance();

            // Set the calendar to start from today
            var startDate = UI5Date.getInstance(
                today.getFullYear(),
                today.getMonth(),
                today.getDate(),
                8, 0 // Start at 8 AM
            );

            // Initialize the view model with data
            var oViewModel = new JSONModel({
                startDate: startDate,
                people: [{}],
                selectedEvent: {
                    title: "",
                    start: UI5Date.getInstance(),
                    end: UI5Date.getInstance(),
                    info: "",
                    type: "Type01",
                    isNew: true // Flag to identify new appointments
                },
                attendeeStatus: {
                    eventwAttendeesStatus: "",
                    requiredAttendeesStatus: "",
                    optionalAttendeesStatus: "",
                    internalAttendeesStatus: ""
                },
                busy: {
                    checkingAvailability: false
                },
                filters: {
                    appointments: true,
                    meetings: true,
                    reservations: false,
                    categories: [],
                    showAs: [],
                    recurrence: [],
                    inPerson: [],
                    organizer: {
                        sent: true,
                        draft: true
                    },
                    attendee: {
                        accepted: true,
                        declined: true,
                        followed: true,
                        tentative: true,
                        canceled: true,
                        notResponded: true
                    }
                },
                currentView: "Work week",
                timeScale: "30 minutes",
                daysToShow: 5,
                workWeekMenuOpen: false,
                timeScaleMinutes: 30,
                groupMode: "Group",
                currentTime: UI5Date.getInstance()
            });

            // Create additional model with extended data using UI5Date
            var oModel = new JSONModel();
            oModel.setData({
                startDate: startDate,
                people: [
                    { appointments: [] },
                    { appointments: [] },
                    { appointments: [] },
                    { appointments: [] }
                ]
            });

            // Set both models to the view
            this.getView().setModel(oViewModel, "view");
            this.getView().setModel(oModel);

            // Initialize filter arrays
            this._aFilters = [];

            // Update date display in filter popover
            this._updateDateDisplay();

            // Load attendees data
            this._loadAttendees();

            // Set up interval to update current time display every minute
            this._currentTimeInterval = setInterval(this._updateCurrentTime.bind(this), 60000);

            // Initial update of current time
            this._updateCurrentTime();
        },

        // Update current time in the model
        _updateCurrentTime: function () {
            var oNow = UI5Date.getInstance();
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/currentTime", oNow);
        },

        // Load attendees from scheduling service
        _loadAttendees: function () {
            var oSchedulingModel = this.getView().getModel("scheduling");
            var oAttendeesModel = this.getView().getModel("attendees");
            var that = this;

            // Read attendees from OData service
            oSchedulingModel.read("/getAttendees", {
                success: function (oData) {
                    if (oData && oData.value) {
                        // Transform the data to match our expected structure
                        var aAttendees = oData.value.map(function (oAttendee) {
                            return {
                                name: oAttendee.Name || oAttendee.name || "",
                                email: oAttendee.Email || oAttendee.email || "",
                                status: oAttendee.Status || oAttendee.status || "Free"
                            };
                        });

                        // Store in attendees model using /value property
                        oAttendeesModel.setProperty("/value", aAttendees);
                        MessageToast.show("Attendees loaded successfully: " + aAttendees.length + " found");
                    } else {
                        MessageToast.show("No attendees found");
                        oAttendeesModel.setProperty("/value", []);
                    }
                },
                error: function (oError) {
                    console.error("Error loading attendees:", oError);
                    MessageToast.show("Error loading attendees from service");
                    // Fallback to empty array if service fails
                    oAttendeesModel.setProperty("/value", []);
                }
            });
        },

        // Create a new attendee via OData service
        _createAttendee: function (oNewAttendee) {
            var oSchedulingModel = this.getView().getModel("scheduling");
            var oAttendeesModel = this.getView().getModel("attendees");
            var that = this;

            // Create the attendee via OData service
            oSchedulingModel.create("/getAttendees", oNewAttendee, {
                success: function (oData, oResponse) {
                    // Refresh the attendees list from backend
                    that._loadAttendees();
                    // Also update local model immediately so UI updates
                    var aAttendees = oAttendeesModel.getProperty("/value") || [];
                    aAttendees.push({
                        name: oNewAttendee.Name || oNewAttendee.name || "",
                        email: oNewAttendee.Email || oNewAttendee.email || "",
                        status: oNewAttendee.Status || oNewAttendee.status || "Free"
                    });
                    oAttendeesModel.setProperty("/value", aAttendees);
                    MessageToast.show("Attendee created successfully");
                },
                error: function (oError) {
                    console.error("Error creating attendee:", oError);
                    MessageToast.show("Error creating attendee");
                }
            });
        },

        // Handle attendee suggestions in MultiInput
        onAttendeeSuggest: function (oEvent) {
            var sTerm = oEvent.getParameter("suggestValue");
            var oMultiInput = oEvent.getSource();
            var oAttendeesModel = this.getView().getModel("attendees");

            if (!oAttendeesModel) {
                return;
            }

            // Get attendees from the model's value property
            var aAttendees = oAttendeesModel.getProperty("/value") || [];
            var aFilteredAttendees = [];

            if (sTerm) {
                // Filter attendees based on search term
                aFilteredAttendees = aAttendees.filter(function (oAttendee) {
                    return oAttendee.name.toLowerCase().includes(sTerm.toLowerCase()) ||
                        oAttendee.email.toLowerCase().includes(sTerm.toLowerCase());
                });
            } else {
                aFilteredAttendees = aAttendees;
            }

            // Update suggestion items
            oMultiInput.destroySuggestionItems();

            aFilteredAttendees.forEach(function (oAttendee) {
                var oSuggestionItem = new SuggestionItem({
                    key: oAttendee.email,
                    text: oAttendee.name + " (" + oAttendee.email + ")",
                    description: oAttendee.status
                });

                // Set different icons based on status
                switch (oAttendee.status.toLowerCase()) {
                    case "free":
                        oSuggestionItem.setIcon("sap-icon://accept");
                        break;
                    case "busy":
                        oSuggestionItem.setIcon("sap-icon://busy");
                        break;
                    case "tentative":
                        oSuggestionItem.setIcon("sap-icon://question-mark");
                        break;
                    default:
                        oSuggestionItem.setIcon("sap-icon://employee");
                }

                oMultiInput.addSuggestionItem(oSuggestionItem);
            });
        },

        // Handle token addition in MultiInput with OData call
        onAttendeeTokenChange: function (oEvent) {
            var oMultiInput = oEvent.getSource();
            var sInputValue = oMultiInput.getValue().trim();
            var sId = oMultiInput.getId();

            if (!sInputValue) {
                // Call checkAvailability with default email when input is empty
                var oModel = this.getView().getModel("scheduling");
                var sPath = "/checkAvailability(attendeeEmail='" + encodeURIComponent("donotreply@risedx.com") + "')";
                oModel.read(sPath, {
                    success: function (oData) {
                        var sStatus = oData.status || "Unknown";
                        // Update the status in the view model for ObjectStatus display
                        var oViewModel = this.getView().getModel("view");
                        oViewModel.setProperty("/attendeeStatus/_IDGenObjectStatus", sStatus);
                    }.bind(this),
                    error: function (oError) {
                        console.error("Error checking availability:", oError);
                        sap.m.MessageToast.show("Failed to check availability");
                        var oViewModel = this.getView().getModel("view");
                        oViewModel.setProperty("/attendeeStatus/_IDGenObjectStatus", "Error");
                    }
                });
                return;
            }

            // Determine which status property to update based on MultiInput ID
            var sStatusProperty = this._getStatusPropertyFromId(sId);

            // Check if input is an email
            if (this._isEmailValid(sInputValue)) {
                var oAttendeesModel = this.getView().getModel("attendees");
                var aAttendees = oAttendeesModel.getProperty("/value") || [];
                var bExists = aAttendees.some(function (oAttendee) {
                    return oAttendee.email === sInputValue;
                });

                if (!bExists) {
                    // Create a new attendee
                    var oNewAttendee = {
                        name: sInputValue.split('@')[0],
                        email: sInputValue,
                        status: "Free"
                    };

                    // Create the attendee via OData
                    this._createAttendee(oNewAttendee);
                }

                // Check availability for this attendee using OData service
                this._checkAttendeeAvailability(sInputValue, function (sStatus) {
                    // Create token for the email with status
                    var oToken = new Token({
                        key: sInputValue,
                        text: sInputValue.split('@')[0] + " (" + sInputValue + ")",
                        tooltip: "Status: " + sStatus
                    });

                    // Set token color based on status
                    switch (sStatus.toLowerCase()) {
                        case "free":
                            oToken.setType("Success");
                            break;
                        case "busy":
                            oToken.setType("Error");
                            break;
                        case "tentative":
                            oToken.setType("Warning");
                            break;
                        default:
                            oToken.setType("Information");
                    }

                    oMultiInput.addToken(oToken);
                    oMultiInput.setValue("");

                    // Update the status in the view model
                    var oViewModel = this.getView().getModel("view");
                    oViewModel.setProperty(sStatusProperty, sStatus);

                }.bind(this));

            } else {
                // Trigger suggestion for non-email input
                this.onAttendeeSuggest(oEvent);
            }
        },

        // Handle attendee input change to show busy indicator
        onAttendeeInputChange: function (oEvent) {
            var oMultiInput = oEvent.getSource();
            var sInputValue = oMultiInput.getValue().trim();

            if (sInputValue) {
                // Show busy indicator
                this._showAttendeeBusyIndicator(true);

                // Simulate a delay for checking availability
                setTimeout(function () {
                    // Hide busy indicator
                    this._showAttendeeBusyIndicator(false);

                    // Trigger token change if valid email
                    if (this._isEmailValid(sInputValue)) {
                        this.onAttendeeTokenChange(oEvent);
                    }
                }.bind(this), 1000);
            }
        },

        // Show or hide the busy indicator for attendee availability check
        _showAttendeeBusyIndicator: function (bShow) {
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/busy/checkingAvailability", bShow);

            // Find the busy indicator in the fragment and show/hide it
            var oBusyIndicator = Fragment.byId(this.getView().getId(), "attendeeBusyIndicator");
            if (oBusyIndicator) {
                if (bShow) {
                    oBusyIndicator.setVisible(true);
                } else {
                    oBusyIndicator.setVisible(false);
                }
            }
        },

        // Helper method to get status property from MultiInput ID
        _getStatusPropertyFromId: function (sId) {
            if (sId.indexOf("requiredAttendees") !== -1) {
                return "/attendeeStatus/requiredAttendeesStatus";
            } else if (sId.indexOf("optionalAttendees") !== -1) {
                return "/attendeeStatus/optionalAttendeesStatus";
            } else if (sId.indexOf("internalAttendees") !== -1) {
                return "/attendeeStatus/internalAttendeesStatus";
            } else {
                return "/attendeeStatus/eventwAttendeesStatus";
            }
        },

        // Check attendee availability using OData service
        _checkAttendeeAvailability: function (sEmail, fnCallback) {
            var oSchedulingModel = this.getView().getModel("scheduling");
            var oViewModel = this.getView().getModel("view");

            // Get current meeting time from the view model
            var oStartDateTime = oViewModel.getProperty("/selectedEvent/start");
            var oEndDateTime = oViewModel.getProperty("/selectedEvent/end");

            // Format dates for OData call
            var sStartDateTime = oStartDateTime ? oStartDateTime.toISOString() : new Date().toISOString();
            var sEndDateTime = oEndDateTime ? oEndDateTime.toISOString() : new Date(Date.now() + 30 * 60000).toISOString();

            // Build the OData call URL
            var sPath = "/checkAvailability(attendeeEmail='" + encodeURIComponent(sEmail) +
                "',startDateTime='" + encodeURIComponent(sStartDateTime) +
                "',endDateTime='" + encodeURIComponent(sEndDateTime) + "')";

            // Call the checkAvailability endpoint
            oSchedulingModel.read(sPath, {
                success: function (oData) {
                    var sStatus = oData.status || "Unknown";
                    fnCallback(sStatus);
                },
                error: function (oError) {
                    console.error("Error checking availability:", oError);
                    // Fallback: check if attendee exists and get their status
                    var oAttendeesModel = this.getView().getModel("attendees");
                    var aAttendees = oAttendeesModel.getProperty("/value") || [];
                    var oAttendee = aAttendees.find(function (attendee) {
                        return attendee.email === sEmail;
                    });
                    var sStatus = oAttendee ? oAttendee.status : "Unknown";
                    fnCallback(sStatus);
                }.bind(this)
            });
        },

        // Validate email format
        _isEmailValid: function (sEmail) {
            var re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            return re.test(sEmail);
        },

        // Handle date/time changes that affect availability
        onDateTimeChange: function (oEvent) {
            var oViewModel = this.getView().getModel("view");
            var oSelectedEvent = oViewModel.getProperty("/selectedEvent");

            // Get all MultiInput controls and re-check availability
            var aMultiInputIds = ["eventwAttendees", "requiredAttendees", "optionalAttendees", "internalAttendees"];
            var that = this;

            aMultiInputIds.forEach(function (sInputId) {
                var oMultiInput = Fragment.byId(that.getView().getId(), sInputId);
                if (!oMultiInput) return;

                var aTokens = oMultiInput.getTokens();
                if (aTokens.length === 0) return;

                // Re-check availability for all attendees when date/time changes
                aTokens.forEach(function (oToken) {
                    var sEmail = oToken.getKey();
                    var sStatusProperty = that._getStatusPropertyFromId(sInputId);

                    that._checkAttendeeAvailability(sEmail, function (sStatus) {
                        // Update token appearance based on new status
                        switch (sStatus.toLowerCase()) {
                            case "free":
                                oToken.setType("Success");
                                break;
                            case "busy":
                                oToken.setType("Error");
                                break;
                            case "tentative":
                                oToken.setType("Warning");
                                break;
                            default:
                                oToken.setType("Information");
                        }

                        oToken.setTooltip("Status: " + sStatus);

                        // Update the status in the view model
                        oViewModel.setProperty(sStatusProperty, sStatus);
                    });
                });
            });
        },

        // Handle status pressed to show details
        handleStatusPressed: function (oEvent) {
            var oObjectStatus = oEvent.getSource();
            var sStatus = oObjectStatus.getText();
            var sTitle = "Attendee Status Details";

            // Create a dialog to show status details
            var oDialog = new Dialog({
                title: sTitle,
                type: "Message",
                state: "Information",
                content: new Text({
                    text: "Current status: " + sStatus + "\n\n" +
                        "This status indicates the attendee's availability during the scheduled meeting time."
                }),
                beginButton: new Button({
                    text: "OK",
                    press: function () {
                        oDialog.close();
                    }
                }),
                afterClose: function () {
                    oDialog.destroy();
                }
            });

            // Open the dialog
            oDialog.open();
        },

        // Formatter for attendee status
        formatAttendeeStatus: function (sStatus) {
            switch (sStatus) {
                case "Free":
                    return "Success";
                case "Busy":
                    return "Error";
                case "Tentative":
                    return "Warning";
                default:
                    return "None";
            }
        },

        // // Open the New Appointment dialog
        onNewAppointmentPress: function () {
            this._openNewAppointmentDialog();
        },

        _openNewAppointmentDialog: function () {
            if (!this._oNewAppointmentDialog) {
                // Load NewAppointmentDialog (must match file path & name exactly)
                this._oNewAppointmentDialog = new sap.ui.xmlfragment(
                    this.getView().getId(), // always pass view id for scoping
                    "com.capexrevex.capexrevex.view.Fragments.NewAppointmentDialog", // no .fragment.xml here
                    this
                );
                this.getView().addDependent(this._oNewAppointmentDialog);

                // Set default values for new appointment
                this._setDefaultAppointmentValues();

                // Set the models for the fragment
                this._oNewAppointmentDialog.setModel(this.getView().getModel("view"), "view");
                this._oNewAppointmentDialog.setModel(this.getView().getModel("attendees"), "attendees");

                this._oNewAppointmentDialog.open();
            } else {
                // Set default values for the appointment
                this._setDefaultAppointmentValues();

                // Set the models for the fragment
                this._oNewAppointmentDialog.setModel(this.getView().getModel("view"), "view");
                this._oNewAppointmentDialog.setModel(this.getView().getModel("attendees"), "attendees");

                this._oNewAppointmentDialog.open();
            }
        },

        _setDefaultAppointmentValues: function () {
            // Set default date and time to current time
            var oNow = UI5Date.getInstance();
            var oStart = UI5Date.getInstance(oNow);

            // Round to nearest 15 minutes
            var minutes = oStart.getMinutes();
            if (minutes < 7.5) {
                oStart.setMinutes(0);
            } else if (minutes < 22.5) {
                oStart.setMinutes(15);
            } else if (minutes < 37.5) {
                oStart.setMinutes(30);
            } else if (minutes < 52.5) {
                oStart.setMinutes(45);
            } else {
                oStart.setHours(oStart.getHours() + 1);
                oStart.setMinutes(0);
            }

            var oEnd = UI5Date.getInstance(oStart);
            oEnd.setMinutes(oEnd.getMinutes() + 30);

            // Set values in the view model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", {
                title: "",
                start: oStart,
                end: oEnd,
                location: "",
                description: "",
                allDay: false,
                isNew: true
            });

            // Reset status
            oViewModel.setProperty("/attendeeStatus/eventwAttendeesStatus", "");
        },

        // Save the new appointment with OData service integration
        onSaveNewAppointment: function () {
            try {
                var oViewModel = this.getView().getModel("view");
                var oSelectedEvent = oViewModel.getProperty("/selectedEvent");

                // Get values from the dialog
                var sTitle = Fragment.byId(this.getView().getId(), "appointmentTitle").getValue();
                var oAttendeesInput = Fragment.byId(this.getView().getId(), "eventwAttendees");
                var aTokens = oAttendeesInput.getTokens();
                var sAttendees = aTokens.map(function (oToken) {
                    return oToken.getKey();
                }).join("; ");

                // Validate required fields
                if (!sTitle) {
                    MessageToast.show("Please enter a title for the appointment");
                    return;
                }

                // Validate that end time is after start time
                if (oSelectedEvent.end <= oSelectedEvent.start) {
                    MessageToast.show("End time must be after start time");
                    return;
                }

                // Prepare data for OData service
                var oMeetingData = {
                    MeetingTitle: sTitle,
                    StartDateTime: oSelectedEvent.start.toISOString(),
                    EndDateTime: oSelectedEvent.end.toISOString(),
                    Location: oSelectedEvent.location || "",
                    Description: oSelectedEvent.description || "",
                    IsAllDay: oSelectedEvent.allDay || false,
                    IsRecurring: false,
                    IsVirtual: false,
                    Attendees: sAttendees,
                    OrganizerEmail: "pushpak.jha@risedx.com",
                    Category: "Appointment"
                };

                // Call OData service to create meeting
                this.createMeetingScheduling(oMeetingData);

            } catch (error) {
                console.error("Error saving appointment:", error);
                MessageToast.show("Error creating appointment. Please try again.");
            }
        },

        // Create meeting scheduling via OData service
        createMeetingScheduling: function (oMeetingData) {
            var oSchedulingModel = this.getView().getModel("scheduling");
            var that = this;

            // Prepare the payload according to your service metadata
            var oPayload = {
                MeetingTitle: oMeetingData.MeetingTitle,
                StartDateTime: oMeetingData.StartDateTime,
                EndDateTime: oMeetingData.EndDateTime,
                Location: oMeetingData.Location || "",
                Description: oMeetingData.Description || "",
                IsAllDay: oMeetingData.IsAllDay || false,
                IsRecurring: oMeetingData.IsRecurring || false,
                IsVirtual: oMeetingData.IsVirtual || false,
                Attendees: oMeetingData.Attendees || "",
                OrganizerEmail: oMeetingData.OrganizerEmail || "pushpak.jha@risedx.com",
                Category: oMeetingData.Category || "Meeting"
            };

            oSchedulingModel.create("/MeetingScheduling", oPayload, {
                success: function (oData, oResponse) {
                    MessageToast.show("Meeting scheduled successfully!");

                    // Add the meeting to the local calendar for immediate UI update
                    that._addMeetingToCalendar(oMeetingData);

                    // Close the dialog
                    if (that._oNewAppointmentDialog) {
                        that._oNewAppointmentDialog.close();
                    }

                    // Refresh attendees if needed
                    that._loadAttendees();
                },
                error: function (oError) {
                    console.error("Error scheduling meeting:", oError);

                    // Fallback: Add to local calendar even if service call fails
                    that._addMeetingToCalendar(oMeetingData);

                    // Close the dialog
                    if (that._oNewAppointmentDialog) {
                        that._oNewAppointmentDialog.close();
                    }

                    MessageToast.show("Meeting saved locally (service unavailable)");
                }
            });
        },

        // Helper method to add meeting to calendar
        _addMeetingToCalendar: function (oMeetingData) {
            var oModel = this.getView().getModel();
            var aPeople = oModel.getProperty("/people");

            if (aPeople && aPeople.length > 0) {
                var newAppointment = {
                    start: new Date(oMeetingData.StartDateTime),
                    end: new Date(oMeetingData.EndDateTime),
                    title: oMeetingData.MeetingTitle,
                    info: oMeetingData.Location || "Online Meeting",
                    type: "Type01",
                    pic: "sap-icon://group",
                    category: oMeetingData.Category || "Meeting",
                    showAs: "Busy",
                    recurrence: oMeetingData.IsRecurring ? "Recurring" : "Non-recurring",
                    inPerson: oMeetingData.IsVirtual ? "Virtual" : "In-person",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted",
                    attendees: oMeetingData.Attendees || [],
                    description: oMeetingData.Description || ""
                };

                // Add to the first person's appointments
                aPeople[0].appointments.push(newAppointment);
                oModel.setProperty("/people", aPeople);

                // Refresh calendar to show the new appointment
                this.byId("calendar").getBinding("rows").refresh(true);

                // Also refresh the entire model to ensure UI updates
                oModel.refresh(true);
            }
        },


        // Discard the new appointment
        onDiscardNewAppointment: function () {
            // Close the dialog without saving
            if (this._oNewAppointmentDialog) {
                this._oNewAppointmentDialog.close();
            }
            MessageToast.show("Appointment creation cancelled");
        },

        // Update date display in filter popover
        _updateDateDisplay: function () {
            var oDateDisplay = this.byId("dateDisplay");
            if (oDateDisplay) {
                var today = UI5Date.getInstance();
                var options = { weekday: 'long', day: 'numeric' };
                var dateText = today.toLocaleDateString('en-US', options);
                oDateDisplay.setText(dateText);
            }
        },

        // Clean up on exit
        onExit: function () {
            // Clean up all fragments when the controller is destroyed
            if (this._oNewAppointmentDialog) {
                this._oNewAppointmentDialog.destroy();
                this._oNewAppointmentDialog = null;
            }
            if (this._oChannelMeetingDialog) {
                this._oChannelMeetingDialog.destroy();
                this._oChannelMeetingDialog = null;
            }
            if (this._oVirtualAppointmentDialog) {
                this._oVirtualAppointmentDialog.destroy();
                this._oVirtualAppointmentDialog = null;
            }
            if (this._oRemarksDialog) {
                this._oRemarksDialog.destroy();
                this._oRemarksDialog = null;
            }
            if (this._oEventDetailsPopover) {
                this._oEventDetailsPopover.destroy();
                this._oEventDetailsPopover = null;
            }
            if (this._oMeetNowDialog) {
                this._oMeetNowDialog.destroy();
                this._oMeetNowDialog = null;
            }

            // Clear the interval for updating current time
            if (this._currentTimeInterval) {
                clearInterval(this._currentTimeInterval);
            }
        },

        // Role-based functionality
        roles: {
            donna: "Donna Moore",
            manager: "manager",
            admin: "admin"
        },

        handleRoleChange: function () {
            this.getView().getModel().refresh(true);
        },

        getUserRole: function () {
            return this.roles[this.byId("userRole").getSelectedKey()];
        },

        canModifyAppointments: function (sRole) {
            var sUserRole = this.getUserRole();
            if (sUserRole === this.roles.manager || sUserRole === this.roles.admin || sUserRole === sRole) {
                return true;
            }
            return false;
        },

        // Filter functionality
        onFilterChange: function (oEvent) {
            var sFilterType = oEvent.getSource().getId().replace("Checkbox", "");
            var bSelected = oEvent.getParameter("selected");
            // Update filter model
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            oFilters[sFilterType.toLowerCase()] = bSelected;
            oViewModel.setProperty("/filters", oFilters);
            // Apply filters
            this.applyFilters();
        },

        // Update the applyFilters method to work correctly
        applyFilters: function () {
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            // Clear existing filters
            this._aFilters = [];

            // Apply category type filters
            var aCategoryFilters = [];
            if (oFilters.appointments) {
                aCategoryFilters.push(new Filter("category", FilterOperator.EQ, "Appointment"));
            }
            if (oFilters.meetings) {
                aCategoryFilters.push(new Filter("category", FilterOperator.EQ, "Meeting"));
            }
            if (oFilters.reservations) {
                aCategoryFilters.push(new Filter("category", FilterOperator.EQ, "Reservation"));
            }
            if (aCategoryFilters.length > 0) {
                this._aFilters.push(new Filter({
                    filters: aCategoryFilters,
                    and: false
                }));
            }

            // Apply additional filters if any are selected
            if (oFilters.categories && oFilters.categories.length > 0) {
                this._aFilters.push(new Filter("category", FilterOperator.Contains, oFilters.categories.join("|")));
            }
            if (oFilters.showAs && oFilters.showAs.length > 0) {
                this._aFilters.push(new Filter("showAs", FilterOperator.Contains, oFilters.showAs.join("|")));
            }
            if (oFilters.recurrence && oFilters.recurrence.length > 0) {
                this._aFilters.push(new Filter("recurrence", FilterOperator.Contains, oFilters.recurrence.join("|")));
            }
            if (oFilters.inPerson && oFilters.inPerson.length > 0) {
                this._aFilters.push(new Filter("inPerson", FilterOperator.Contains, oFilters.inPerson.join("|")));
            }

            // Apply organizer filters
            var aOrganizerFilters = [];
            if (oFilters.organizer.sent) {
                aOrganizerFilters.push(new Filter("organizerStatus", FilterOperator.EQ, "sent"));
            }
            if (oFilters.organizer.draft) {
                aOrganizerFilters.push(new Filter("organizerStatus", FilterOperator.EQ, "draft"));
            }
            if (aOrganizerFilters.length > 0) {
                this._aFilters.push(new Filter({
                    filters: aOrganizerFilters,
                    and: false
                }));
            }

            // Apply attendee filters
            var aAttendeeFilters = [];
            if (oFilters.attendee.accepted) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "accepted"));
            }
            if (oFilters.attendee.declined) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "declined"));
            }
            if (oFilters.attendee.followed) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "followed"));
            }
            if (oFilters.attendee.tentative) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "tentative"));
            }
            if (oFilters.attendee.canceled) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "canceled"));
            }
            if (oFilters.attendee.notResponded) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "notResponded"));
            }
            if (aAttendeeFilters.length > 0) {
                this._aFilters.push(new Filter({
                    filters: aAttendeeFilters,
                    and: false
                }));
            }

            // Apply filters to the calendar
            var oCalendar = this.byId("calendar");
            var oBinding = oCalendar.getBinding("rows");
            if (this._aFilters.length > 0) {
                oBinding.filter(this._aFilters);
            } else {
                oBinding.filter([]);
            }

            // Update filter button text
            var oFilterButton = this.byId("_IDGenButton7");
            var iFilterCount = this._aFilters.length;
            oFilterButton.setText(iFilterCount > 0 ? "Filter (" + iFilterCount + ")" : "Filter");
        },

        // Filter popover handlers
        onAppointmentsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("appointmentsFilterPopover").openBy(oButton);
        },

        onMeetingsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("meetingsFilterPopover").openBy(oButton);
        },

        onReservationsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("reservationsFilterPopover").openBy(oButton);
        },

        onCategoriesFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("categoriesFilterPopover").openBy(oButton);
        },

        onShowAsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("showAsFilterPopover").openBy(oButton);
        },

        onRecurrenceFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("recurrenceFilterPopover").openBy(oButton);
        },

        onInPersonFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("inPersonFilterPopover").openBy(oButton);
        },

        // Organizer and Attendee filter handlers
        onOrganizerFilterPress: function (oEvent) {
            var oOptionsBox = this.byId("organizerOptions");
            oOptionsBox.setVisible(!oOptionsBox.getVisible());
        },

        onAttendeeFilterPress: function (oEvent) {
            var oOptionsBox = this.byId("attendeeOptions");
            oOptionsBox.setVisible(!oOptionsBox.getVisible());
        },

        onOrganizerFilterChange: function (oEvent) {
            var sId = oEvent.getSource().getId();
            var bSelected = oEvent.getParameter("selected");
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            // Update the corresponding filter property
            if (sId === "sentCheckbox") {
                oFilters.organizer.sent = bSelected;
            } else if (sId === "draftCheckbox") {
                oFilters.organizer.draft = bSelected;
            }
            oViewModel.setProperty("/filters", oFilters);
            this.applyFilters();
        },

        onAttendeeFilterChange: function (oEvent) {
            var sId = oEvent.getSource().getId();
            var bSelected = oEvent.getParameter("selected");
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            // Update the corresponding filter property
            if (sId === "acceptedCheckbox") {
                oFilters.attendee.accepted = bSelected;
            } else if (sId === "declinedCheckbox") {
                oFilters.attendee.declined = bSelected;
            } else if (sId === "followedCheckbox") {
                oFilters.attendee.followed = bSelected;
            } else if (sId === "tentativeCheckbox") {
                oFilters.attendee.tentative = bSelected;
            } else if (sId === "canceledCheckbox") {
                oFilters.attendee.canceled = bSelected;
            } else if (sId === "notRespondedCheckbox") {
                oFilters.attendee.notResponded = bSelected;
            }
            oViewModel.setProperty("/filters", oFilters);
            this.applyFilters();
        },

        onUnselectAllRight: function () {
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            // Reset organizer filters
            oFilters.organizer.sent = false;
            oFilters.organizer.draft = false;
            // Reset attendee filters
            oFilters.attendee.accepted = false;
            oFilters.attendee.declined = false;
            oFilters.attendee.followed = false;
            oFilters.attendee.tentative = false;
            oFilters.attendee.canceled = false;
            oFilters.attendee.notResponded = false;
            oViewModel.setProperty("/filters", oFilters);
            // Update the checkboxes
            this.byId("sentCheckbox").setSelected(false);
            this.byId("draftCheckbox").setSelected(false);
            this.byId("acceptedCheckbox").setSelected(false);
            this.byId("declinedCheckbox").setSelected(false);
            this.byId("followedCheckbox").setSelected(false);
            this.byId("tentativeCheckbox").setSelected(false);
            this.byId("canceledCheckbox").setSelected(false);
            this.byId("notRespondedCheckbox").setSelected(false);
            this.applyFilters();
        },

        // Unselect all handlers - Updated to properly clear all filters
        onAppointmentsUnselectAll: function (oEvent) {
            this._unselectAllFilters("appointments");
        },

        onMeetingsUnselectAll: function (oEvent) {
            this._unselectAllFilters("meetings");
        },

        onReservationsUnselectAll: function (oEvent) {
            this._unselectAllFilters("reservations");
        },

        onCategoriesUnselectAll: function (oEvent) {
            this._unselectAllFilters("categories");
        },

        onShowAsUnselectAll: function (oEvent) {
            this._unselectAllFilters("showAs");
        },

        onRecurrenceUnselectAll: function (oEvent) {
            this._unselectAllFilters("recurrence");
        },

        onInPersonUnselectAll: function (oEvent) {
            this._unselectAllFilters("inPerson");
        },

        // Generic method to unselect all filters in a category
        // _unselectAllFilters: function (sFilterType) {
        //     var oViewModel = this.getView().getModel("view");
        //     var oFilters = oViewModel.getProperty("/filters");

        //     // Reset the filter array for this type
        //     if (Array.isArray(oFilters[sFilterType])) {
        //         oFilters[sFilterType] = [];
        //     } else {
        //         oFilters[sFilterType] = false;
        //     }

        //     oViewModel.setProperty("/filters", oFilters);

        //     // Get the popover and unselect all checkboxes
        //     var sPopoverId = sFilterType + "FilterPopover";
        //     var oPopover = this.byId(sPopoverId);

        //     if (oPopover) {
        //         // Find all checkboxes in the popover
        //         var aCheckboxes = oPopover.findAggregatedObjects(true, function(oControl) {
        //             return oControl.isA("sap.m.CheckBox");
        //         });

        //         // Unselect all checkboxes
        //         aCheckboxes.forEach(function(oCheckbox) {
        //             oCheckbox.setSelected(false);
        //         });
        //     }

        //     // Apply the updated filters
        //     this.applyFilters();

        //     // Show confirmation message
        //     MessageToast.show("All " + sFilterType + " filters cleared");
        // },

        // Generic method to unselect all filters in a category
        _unselectAllFilters: function (sFilterType) {
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");

            // Reset the filter array for this type
            if (Array.isArray(oFilters[sFilterType])) {
                oFilters[sFilterType] = [];
            } else {
                oFilters[sFilterType] = false;
            }

            oViewModel.setProperty("/filters", oFilters);

            // Get the popover and unselect all checkboxes
            var sPopoverId = sFilterType + "FilterPopover";
            var oPopover = this.byId(sPopoverId);

            if (oPopover) {
                // Find all checkboxes in the popover
                var aCheckboxes = oPopover.findAggregatedObjects(true, function (oControl) {
                    return oControl.isA("sap.m.CheckBox");
                });

                // Unselect all checkboxes
                aCheckboxes.forEach(function (oCheckbox) {
                    oCheckbox.setSelected(false);
                });
            }

            // Apply the updated filters
            this.applyFilters();

            // Show confirmation message
            MessageToast.show("All " + sFilterType + " filters cleared");
        },

        // Filter selection handlers
        onAppointmentsFilterSelect: function (oEvent) {
            this._updateFilterArray("appointments", oEvent);
        },

        onMeetingsFilterSelect: function (oEvent) {
            this._updateFilterArray("meetings", oEvent);
        },

        onReservationsFilterSelect: function (oEvent) {
            this._updateFilterArray("reservations", oEvent);
        },

        onCategoriesFilterSelect: function (oEvent) {
            this._updateFilterArray("categories", oEvent);
        },

        onShowAsFilterSelect: function (oEvent) {
            this._updateFilterArray("showAs", oEvent);
        },

        onRecurrenceFilterSelect: function (oEvent) {
            this._updateFilterArray("recurrence", oEvent);
        },

        onInPersonFilterSelect: function (oEvent) {
            this._updateFilterArray("inPerson", oEvent);
        },

        _updateFilterArray: function (sFilterType, oEvent) {
            var sValue = oEvent.getSource().getText();
            var bSelected = oEvent.getParameter("selected");
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            if (!oFilters[sFilterType]) {
                oFilters[sFilterType] = [];
            }
            if (bSelected) {
                if (oFilters[sFilterType].indexOf(sValue) === -1) {
                    oFilters[sFilterType].push(sValue);
                }
            } else {
                var iIndex = oFilters[sFilterType].indexOf(sValue);
                if (iIndex !== -1) {
                    oFilters[sFilterType].splice(iIndex, 1);
                }
            }
            oViewModel.setProperty("/filters", oFilters);
            this.applyFilters();
        },

        // onClearFilters: function () {
        //     // Reset all filter checkboxes
        //     var aCheckBoxIds = [
        //         "appointmentsCheckbox", "meetingsCheckbox", "reservationsCheckbox"
        //     ];
        //     aCheckBoxIds.forEach(function (sId) {
        //         var oCheckBox = this.byId(sId);
        //         if (oCheckBox) {
        //             oCheckBox.setSelected(sId === "appointmentsCheckbox" || sId === "meetingsCheckbox");
        //         }
        //     }.bind(this));

        //     // Reset organizer and attendee filters
        //     this.byId("sentCheckbox").setSelected(true);
        //     this.byId("draftCheckbox").setSelected(true);
        //     this.byId("acceptedCheckbox").setSelected(true);
        //     this.byId("declinedCheckbox").setSelected(true);
        //     this.byId("followedCheckbox").setSelected(true);
        //     this.byId("tentativeCheckbox").setSelected(true);
        //     this.byId("canceledCheckbox").setSelected(true);
        //     this.byId("notRespondedCheckbox").setSelected(true);

        //     // Reset filter arrays in model
        //     var oViewModel = this.getView().getModel("view");
        //     oViewModel.setProperty("/filters", {
        //         appointments: true,
        //         meetings: true,
        //         reservations: false,
        //         categories: [],
        //         showAs: [],
        //         recurrence: [],
        //         inPerson: [],
        //         organizer: {
        //             sent: true,
        //             draft: true
        //         },
        //         attendee: {
        //             accepted: true,
        //             declined: true,
        //             followed: true,
        //             tentative: true,
        //             canceled: true,
        //             notResponded: true
        //         }
        //     });

        //     // Apply empty filters
        //     this._aFilters = [];
        //     var oCalendar = this.byId("calendar");
        //     oCalendar.getBinding("rows").filter([]);

        //     // Update filter button text
        //     this.byId("_IDGenButton7").setText("Filter");
        //     MessageToast.show("All filters cleared");
        // },

        onClearFilters: function () {
            // Reset all filter checkboxes
            var aCheckBoxIds = [
                "appointmentsCheckbox", "meetingsCheckbox", "reservationsCheckbox"
            ];
            aCheckBoxIds.forEach(function (sId) {
                var oCheckBox = this.byId(sId);
                if (oCheckBox) {
                    oCheckBox.setSelected(false); // Clear all selections
                }
            }.bind(this));

            // Reset organizer and attendee filters
            this.byId("sentCheckbox").setSelected(false);
            this.byId("draftCheckbox").setSelected(false);
            this.byId("acceptedCheckbox").setSelected(false);
            this.byId("declinedCheckbox").setSelected(false);
            this.byId("followedCheckbox").setSelected(false);
            this.byId("tentativeCheckbox").setSelected(false);
            this.byId("canceledCheckbox").setSelected(false);
            this.byId("notRespondedCheckbox").setSelected(false);

            // Reset filter arrays in model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/filters", {
                appointments: false, // Clear appointments
                meetings: false,     // Clear meetings
                reservations: false,  // Clear reservations
                categories: [],
                showAs: [],
                recurrence: [],
                inPerson: [],
                organizer: {
                    sent: false,
                    draft: false
                },
                attendee: {
                    accepted: false,
                    declined: false,
                    followed: false,
                    tentative: false,
                    canceled: false,
                    notResponded: false
                }
            });

            // Apply empty filters
            this._aFilters = [];
            var oCalendar = this.byId("calendar");
            oCalendar.getBinding("rows").filter([]);

            // Update filter button text
            this.byId("_IDGenButton7").setText("Filter");
            MessageToast.show("All filters cleared");
        },

        // Drag and Drop functionality
        handleAppointmentDragEnter: function (oEvent) {
            if (this.isAppointmentOverlap(oEvent, oEvent.getParameter("calendarRow"))) {
                oEvent.preventDefault();
            }
        },

        handleAppointmentDrop: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                oCalendarRow = oEvent.getParameter("calendarRow"),
                bCopy = oEvent.getParameter("copy"),
                sTitle = oAppointment.getTitle(),
                oModel = this.getView().getModel(),
                oAppBindingContext = oAppointment.getBindingContext(),
                oRowBindingContext = oCalendarRow.getBindingContext(),
                handleAppointmentDropBetweenRows = function () {
                    var aPath = oAppBindingContext.getPath().split("/");
                    var iIndex = aPath.pop();
                    var sRowAppointmentsPath = aPath.join("/");
                    oRowBindingContext.getObject().appointments.push(
                        oModel.getProperty(oAppBindingContext.getPath())
                    );
                    oModel.getProperty(sRowAppointmentsPath).splice(iIndex, 1);
                };
            if (bCopy) { // "copy" appointment
                var oProps = Object.assign({}, oModel.getProperty(oAppointment.getBindingContext().getPath()));
                oProps.start = oStartDate;
                oProps.end = oEndDate;
                oRowBindingContext.getObject().appointments.push(oProps);
            } else { // "move" appointment
                oModel.setProperty("start", oStartDate, oAppBindingContext);
                oModel.setProperty("end", oEndDate, oAppBindingContext);
                if (oAppointment.getParent() !== oCalendarRow) {
                    handleAppointmentDropBetweenRows();
                }
            }
            oModel.refresh(true);
        },

        handleAppointmentResize: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate");
            if (!this.isAppointmentOverlap(oEvent, oAppointment.getParent())) {
                oAppointment
                    .setStartDate(oStartDate)
                    .setEndDate(oEndDate);
            } else {
                MessageToast.show("As a manager you can not resize events if they overlap with another events");
            }
        },

        // Modified handleAppointmentCreate to open event details fragment
        handleAppointmentCreate: function (oEvent) {
            var oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                oPlanningCalendarRow = oEvent.getParameter("calendarRow"),
                oModel = this.getView().getModel(),
                sPath = oPlanningCalendarRow.getBindingContext().getPath();
            // Create a new appointment object
            var newAppointment = {
                title: "New Appointment",
                start: oStartDate,
                end: oEndDate,
                info: "",
                type: "Type01",
                category: "Appointment",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "In-person",
                organizerStatus: "sent",
                attendeeStatus: "accepted",
                isNew: true // Flag to indicate it's a new appointment
            };
            // Set the selected event in the view model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", newAppointment);
            // Open the event details fragment
            this._openEventDetailsPopover(oEvent.getParameter("domRef"));
            MessageToast.show("New Appointment is created at \n" + oStartDate + "\n and end at \n" + oEndDate + ".");
        },

        isAppointmentOverlap: function (oEvent, oCalendarRow) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                bAppointmentOverlapped;
            if (this.getUserRole() === this.roles.manager) {
                bAppointmentOverlapped = oCalendarRow.getAppointments().some(function (oCurrentAppointment) {
                    if (oCurrentAppointment === oAppointment) {
                        return;
                    }
                    var oAppStartTime = oCurrentAppointment.getStartDate().getTime(),
                        oAppEndTime = oCurrentAppointment.getEndDate().getTime();
                    if (oAppStartTime <= oStartDate.getTime() && oStartDate.getTime() < oAppEndTime) {
                        return true;
                    }
                    if (oAppStartTime < oEndDate.getTime() && oEndDate.getTime() <= oAppEndTime) {
                        return true;
                    }
                    if (oStartDate.getTime() <= oAppStartTime && oAppStartTime < oEndDate.getTime()) {
                        return true;
                    }
                });
            }
            return bAppointmentOverlapped;
        },

        // Toolbar and UI functionality
        onTodayPress: function () {
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/startDate", UI5Date.getInstance());
            MessageToast.show("Navigated to today");
        },

        onViewSelectPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oViewPopover = this.byId("viewPopover");
            // Close other popovers
            this.byId("filterPopover").close();
            this.byId("newEventPopover").close();
            this.byId("eventDetailsPopover").close();
            // Toggle view popover
            if (!oViewPopover.isOpen()) {
                oViewPopover.openBy(oButton);
            } else {
                oViewPopover.close();
            }
        },

        onFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oFilterPopover = this.byId("filterPopover");
            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("newEventPopover").close();
            this.byId("eventDetailsPopover").close();
            // Toggle filter popover
            if (!oFilterPopover.isOpen()) {
                oFilterPopover.openBy(oButton);
            } else {
                oFilterPopover.close();
            }
        },

        onNewEventPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oNewEventPopover = this.byId("newEventPopover");
            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("filterPopover").close();
            this.byId("eventDetailsPopover").close();
            // Toggle new event popover
            if (!oNewEventPopover.isOpen()) {
                oNewEventPopover.openBy(oButton);
            } else {
                oNewEventPopover.close();
            }
        },

        onNotificationPress: function () {
            MessageToast.show("No new notifications");
        },

        // Work week menu functionality
        onWorkWeekMenuPress: function (oEvent) {
            var oViewModel = this.getView().getModel("view");
            var bMenuOpen = oViewModel.getProperty("/workWeekMenuOpen");
            // Toggle the menu visibility
            oViewModel.setProperty("/workWeekMenuOpen", !bMenuOpen);
            // Update the arrow icon direction
            var oButton = this.byId("_IDGenWorkWeekButton");
            oButton.setIcon(!bMenuOpen ? "sap-icon://slim-arrow-down" : "sap-icon://slim-arrow-right");
        },

        // Time scale dropdown change handler
        onTimeScaleChange: function (oEvent) {
            var oViewModel = this.getView().getModel("view");
            var oSource = oEvent.getSource();
            var sSelectedKey = oSource.getSelectedKey();
            // Extract the number of minutes from the selected key
            var iMinutes = parseInt(sSelectedKey);
            // Update the model
            oViewModel.setProperty("/timeScale", iMinutes + " minutes");
            oViewModel.setProperty("/timeScaleMinutes", iMinutes);
            // Get current days to show
            var iDays = oViewModel.getProperty("/daysToShow");
            // Update the button text to show both days and time scale
            var oButton = this.byId("viewSelectButton");
            oButton.setText("Work week (" + iDays + " days, " + iMinutes + " min)");
            // Update the calendar's time scale
            this._updateTimeScale(iMinutes);
            // Make sure we're in Work week view
            var oCalendar = this.byId("calendar");
            oCalendar.setViewKey("Workweek");
            oViewModel.setProperty("/currentView", "Work week");
            MessageToast.show("Time scale changed to: " + iMinutes + " minutes");
        },

        // Days to show dropdown change handler
        onDaysToShowChange: function (oEvent) {
            var oViewModel = this.getView().getModel("view");
            var oSource = oEvent.getSource();
            var iDays = parseInt(oSource.getSelectedKey());
            // Update the model
            oViewModel.setProperty("/daysToShow", iDays);
            // Get current time scale
            var sTimeScale = oViewModel.getProperty("/timeScale");
            var iMinutes = parseInt(sTimeScale.match(/\d+/)[0]);
            // Update the button text to show both days and time scale
            var oButton = this.byId("viewSelectButton");
            oButton.setText("Work week (" + iDays + " days, " + iMinutes + " min)");
            // Update the work week view
            this._updateWorkWeekView(iDays);
            // Make sure we're in Work week view
            var oCalendar = this.byId("calendar");
            oCalendar.setViewKey("Workweek");
            oViewModel.setProperty("/currentView", "Work week");
            MessageToast.show("Work week now shows " + iDays + " days");
        },

        // Days dropdown change handler (main view selection)
        onDaysChange: function (oEvent) {
            var oSource = oEvent.getSource();
            var iDays = parseInt(oSource.getSelectedKey());
            // Update the model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/daysToShow", iDays);
            // Set the current view to Work week
            oViewModel.setProperty("/currentView", "Work week");
            // Update the button text
            var oButton = this.byId("viewSelectButton");
            var sTimeScale = oViewModel.getProperty("/timeScale");
            var iMinutes = parseInt(sTimeScale.match(/\d+/)[0]);
            oButton.setText("Work week (" + iDays + " days, " + iMinutes + " min)");
            // Update the calendar
            var oCalendar = this.byId("calendar");
            oCalendar.setViewKey("Workweek");
            // Update the work week view
            this._updateWorkWeekView(iDays);
            // Close the popover
            this.byId("viewPopover").close();
            MessageToast.show("Work week now shows " + iDays + " days");
        },

        onViewSelected: function (oEvent) {
            var sSelectedView = oEvent.getParameter("listItem").getTitle();
            var oButton = this.byId("viewSelectButton");
            var oCalendar = this.byId("calendar");
            var oViewModel = this.getView().getModel("view");
            // Close the popover first
            this.byId("viewPopover").close();
            // Handle regular view selection
            if (sSelectedView === "Work week") {
                oButton.setText(sSelectedView);
                oViewModel.setProperty("/currentView", sSelectedView);
                // Update calendar view
                oCalendar.setViewKey("Workweek");
                // Get current settings
                var iDaysToShow = oViewModel.getProperty("/daysToShow");
                var sTimeScale = oViewModel.getProperty("/timeScale");
                var iMinutes = parseInt(sTimeScale.match(/\d+/)[0]);
                // Update button text to show both days and time scale
                oButton.setText("Work week (" + iDaysToShow + " days, " + iMinutes + " min)");
                // Update the work week view and time scale
                this._updateWorkWeekView(iDaysToShow);
                this._updateTimeScale(iMinutes);
                MessageToast.show("View changed to: " + sSelectedView);
            } else if (sSelectedView === "Week") {
                oButton.setText(sSelectedView);
                oViewModel.setProperty("/currentView", sSelectedView);
                // Update calendar view
                oCalendar.setViewKey("Week");
                // Force refresh to ensure proper rendering
                oCalendar.rerender();
                MessageToast.show("View changed to: " + sSelectedView);
            } else if (sSelectedView === "Month") {
                oButton.setText(sSelectedView);
                oViewModel.setProperty("/currentView", sSelectedView);
                // Update calendar view
                oCalendar.setViewKey("Month");
                // Force refresh to ensure proper rendering
                oCalendar.rerender();
                MessageToast.show("View changed to: " + sSelectedView);
            } else if (sSelectedView === "Split view") {
                MessageToast.show("Split view feature coming soon");
            }
        },

        _switchCalendarView: function (sViewKey) {
            var oCalendar = this.byId("calendar");
            var oViewModel = this.getView().getModel("view");
            // Set the view key
            oCalendar.setViewKey(sViewKey);
            // Update the current view in the model
            oViewModel.setProperty("/currentView", sViewKey);
            // Force a rerender to ensure proper display
            oCalendar.rerender();
        },

        _updateTimeScale: function (iMinutes) {
            var oCalendar = this.byId("calendar");
            var oViewModel = this.getView().getModel("view");
            var sCurrentView = oViewModel;

            // Only update time scale for Day and Work week views
            if (sCurrentView === "Day" || sCurrentView === "Work week") {
                var oView = oCalendar.getViews().find(function (view) {
                    return view.getKey() === (sCurrentView === "Work week" ? "Workweek" : sCurrentView);
                });

                if (oView) {
                    // Calculate the number of intervals based on the selected minutes
                    var iTotalMinutes = 24 * 60; // 24 hours in minutes
                    var iIntervals = iTotalMinutes / iMinutes;

                    // Update the view settings
                    oView.setIntervalsS(iIntervals);
                    oView.setIntervalsM(iIntervals);
                    oView.setIntervalsL(iIntervals);
                    oView.setIntervalType("Minute"); // Use string value directly

                    // Refresh the calendar
                    oCalendar.rerender();
                }
            }
        },

        _updateWorkWeekView: function (iDays) {
            var oCalendar = this.byId("calendar");
            var oView = oCalendar.getViews().find(function (view) {
                return view.getKey() === "Workweek";
            });

            if (oView) {
                // Update the number of days to show
                oView.setIntervalsS(iDays);
                oView.setIntervalsM(iDays);
                oView.setIntervalsL(iDays);

                // Refresh the calendar
                oCalendar.rerender();
            }
        },

        onSavedViewsPress: function () {
            MessageToast.show("Saved views feature coming soon");
        },

        onNewEventTypeSelected: function (oEvent) {
            var sEventType = oEvent.getSource().getTitle();
            this.byId("newEventPopover").close();

            if (sEventType === "Channel meeting") {
                this._openChannelMeetingDialog();
            } else if (sEventType === "Event") {
                this._openRemarksDialog();
            } else if (sEventType === "Virtual appointment") {
                this._openVirtualAppointmentDialog();
            } else {
                MessageToast.show("Creating new: " + sEventType);
            }
        },

        // Open the Channel Meeting Dialog
        _openChannelMeetingDialog: function () {
            // Reset status properties
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/attendeeStatus/requiredAttendeesStatus", "");
            oViewModel.setProperty("/attendeeStatus/optionalAttendeesStatus", "");

            if (!this._oChannelMeetingDialog) {
                // Load ChannelMeetingDialog (must match file path & name exactly)
                this._oChannelMeetingDialog = new sap.ui.xmlfragment(
                    this.getView().getId(),  // always pass view id for scoping
                    "com.capexrevex.capexrevex.Fragments.ChannelMeetingDialog", // no .fragment.xml here
                    this
                );
                this.getView().addDependent(this._oChannelMeetingDialog);

                // Set the models for the fragment
                this._oChannelMeetingDialog.setModel(this.getView().getModel());
                this._oChannelMeetingDialog.setModel(this.getView().getModel("attendees"), "attendees");

                this._oChannelMeetingDialog.open();
            }

            // Set default values for new channel meeting
            var oMeetingDate = UI5Date.getInstance();
            oMeetingDate.setHours(10, 0, 0, 0);

            var oEnd = UI5Date.getInstance(oMeetingDate);
            oEnd.setHours(11, 0, 0, 0);

            oViewModel.setProperty("/selectedChannelMeeting", {
                title: "",
                start: oMeetingDate,
                end: oEnd,
                agenda: "",
                type: "Type02",
                icon: "",
                requiredAttendees: [],
                optionalAttendees: [],
                attendeeStatus: "",
                isNew: true
            });

            this._oChannelMeetingDialog.open();
        },


        // Open the Virtual Appointment Dialog
        _openVirtualAppointmentDialog: function () {
            if (!this._oVirtualAppointmentDialog) {
                // Load VirtualAppointmentDialog (must match file path & name exactly)
                this._oVirtualAppointmentDialog = new sap.ui.xmlfragment(
                    this.getView().getId(),  // always pass view id for scoping
                    "com.capexrevex.capexrevex.Fragments.VirtualAppointmentDialog", // no .fragment.xml here
                    this
                );
                this.getView().addDependent(this._oVirtualAppointmentDialog);

                // Set the models for the fragment
                this._oVirtualAppointmentDialog.setModel(this.getView().getModel());
                this._oVirtualAppointmentDialog.setModel(this.getView().getModel("attendees"), "attendees");

                this._oVirtualAppointmentDialog.open();
            }

            // Set default values for new virtual appointment
            var oStartDate = UI5Date.getInstance();
            oStartDate.setHours(14, 0, 0, 0);

            var oEndDate = UI5Date.getInstance(oStartDate);
            oEndDate.setHours(15, 0, 0, 0);

            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedVirtualAppointment", {
                title: "",
                start: oStartDate,
                end: oEndDate,
                meetingLink: "",
                type: "Type03",
                icon: "sap-icon://video",
                attendees: [],
                attendeeStatus: "",
                isNew: true
            });

            this._oVirtualAppointmentDialog.open();
        },


        _setDefaultChannelMeetingValues: function () {
            // Set default date and time to current time
            var oNow = UI5Date.getInstance();
            var oStart = UI5Date.getInstance(oNow);

            // Round to nearest 30 minutes
            var minutes = oStart.getMinutes();
            if (minutes < 15) {
                oStart.setMinutes(0);
            } else if (minutes < 45) {
                oStart.setMinutes(30);
            } else {
                oStart.setHours(oStart.getHours() + 1);
                oStart.setMinutes(0);
            }

            var oEnd = UI5Date.getInstance(oStart);
            oEnd.setMinutes(oEnd.getMinutes() + 30);

            // Set values in the dialog if it exists
            if (this._oChannelMeetingDialog) {
                var oStartDate = Fragment.byId(this.getView().getId(), "startDate");
                var oStartTime = Fragment.byId(this.getView().getId(), "startTime");
                var oEndDate = Fragment.byId(this.getView().getId(), "endDate");
                var oEndTime = Fragment.byId(this.getView().getId(), "endTime");

                if (oStartDate) oStartDate.setDateValue(oStart);
                if (oStartTime) oStartTime.setDateValue(oStart);
                if (oEndDate) oEndDate.setDateValue(oEnd);
                if (oEndTime) oEndTime.setDateValue(oEnd);
            }
        },

        _setDefaultVirtualAppointmentValues: function () {
            // Set default date and time to current time
            var oNow = UI5Date.getInstance();
            var oStart = UI5Date.getInstance(oNow);

            // Round to nearest 30 minutes
            var minutes = oStart.getMinutes();
            if (minutes < 15) {
                oStart.setMinutes(0);
            } else if (minutes < 45) {
                oStart.setMinutes(30);
            } else {
                oStart.setHours(oStart.getHours() + 1);
                oStart.setMinutes(0);
            }

            var oEnd = UI5Date.getInstance(oStart);
            oEnd.setMinutes(oEnd.getMinutes() + 30);

            // Set default status values
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent/internalAttendeeStatus", "");

            // Set values in the dialog if it exists
            if (this._oVirtualAppointmentDialog) {
                var oStartDate = Fragment.byId(this.getView().getId(), "virtualStartDate");
                var oStartTime = Fragment.byId(this.getView().getId(), "virtualStartTime");
                var oEndDate = Fragment.byId(this.getView().getId(), "virtualEndDate");
                var oEndTime = Fragment.byId(this.getView().getId(), "virtualEndTime");

                if (oStartDate) oStartDate.setDateValue(oStart);
                if (oStartTime) {
                    oStartTime.setDateValue(oStart);
                    // Set minutes step based on current time scale
                    var oViewModel = this.getView().getModel("view");
                    var iMinutes = oViewModel.getProperty("/timeScaleMinutes");
                    oStartTime.setMinutesStep(iMinutes);
                }
                if (oEndDate) oEndDate.setDateValue(oEnd);
                if (oEndTime) {
                    oEndTime.setDateValue(oEnd);
                    // Set minutes step based on current time scale
                    var oViewModel = this.getView().getModel("view");
                    var iMinutes = oViewModel.getProperty("/timeScaleMinutes");
                    oEndTime.setMinutesStep(iMinutes);
                }

                // Set default recurrence to "none"
                var oRecurrenceSelect = Fragment.byId(this.getView().getId(), "virtualRecurrence");
                if (oRecurrenceSelect) {
                    oRecurrenceSelect.setSelectedKey("none");
                }
            }
        },

        // Save Channel Meeting
        onSaveChannelMeeting: function () {
            try {
                // Get values from the dialog
                var sTitle = Fragment.byId(this.getView().getId(), "meetingTitle").getValue();

                // Get required attendees
                var oRequiredAttendees = Fragment.byId(this.getView().getId(), "requiredAttendees");
                var aRequiredTokens = oRequiredAttendees.getTokens();
                var sRequiredAttendees = aRequiredTokens.map(function (oToken) {
                    return oToken.getKey();
                }).join("; ");

                // Get optional attendees
                var oOptionalAttendees = Fragment.byId(this.getView().getId(), "optionalAttendees");
                var aOptionalTokens = oOptionalAttendees.getTokens();
                var sOptionalAttendees = aOptionalTokens.map(function (oToken) {
                    return oToken.getKey();
                }).join("; ");

                // Get date and time values properly
                var oStartDateControl = Fragment.byId(this.getView().getId(), "startDate");
                var oStartTimeControl = Fragment.byId(this.getView().getId(), "startTime");
                var oEndDateControl = Fragment.byId(this.getView().getId(), "endDate");
                var oEndTimeControl = Fragment.byId(this.getView().getId(), "endTime");

                var oStartDate = oStartDateControl ? oStartDateControl.getDateValue() : null;
                var oStartTime = oStartTimeControl ? oStartTimeControl.getDateValue() : null;
                var oEndDate = oEndDateControl ? oEndDateControl.getDateValue() : null;
                var oEndTime = oEndTimeControl ? oEndTimeControl.getDateValue() : null;

                var bAllDay = Fragment.byId(this.getView().getId(), "allDayCheckbox").getSelected();
                var sChannel = Fragment.byId(this.getView().getId(), "channelInput").getValue();
                var sLocation = Fragment.byId(this.getView().getId(), "locationInput").getValue();
                var bOnlineMeeting = Fragment.byId(this.getView().getId(), "onlineMeetingCheckbox").getSelected();
                var sDetails = Fragment.byId(this.getView().getId(), "meetingDetails").getValue();
                var sAgenda = Fragment.byId(this.getView().getId(), "meetingAgenda").getValue();

                // Validate required fields
                if (!sTitle) {
                    MessageToast.show("Please enter a title for the meeting");
                    return;
                }

                // Validate date controls exist
                if (!oStartDate || !oEndDate) {
                    MessageToast.show("Please select valid dates");
                    return;
                }

                // Combine date and time
                var oStart = new Date(oStartDate);
                if (!bAllDay && oStartTime) {
                    oStart.setHours(oStartTime.getHours(), oStartTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oStart.setHours(0, 0, 0, 0);
                }

                var oEnd = new Date(oEndDate);
                if (!bAllDay && oEndTime) {
                    oEnd.setHours(oEndTime.getHours(), oEndTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oEnd.setHours(23, 59, 59, 999);
                }

                // Validate that end time is after start time
                if (oEnd <= oStart) {
                    MessageToast.show("End time must be after start time");
                    return;
                }

                // Create the new appointment object
                var newAppointment = {
                    start: oStart,
                    end: oEnd,
                    title: sTitle,
                    info: "Channel: " + sChannel + (sLocation ? " | Location: " + sLocation : ""),
                    type: "Type01",
                    pic: "sap-icon://group",
                    requiredAttendees: sRequiredAttendees,
                    optionalAttendees: sOptionalAttendees,
                    details: sDetails,
                    agenda: sAgenda,
                    allDay: bAllDay,
                    onlineMeeting: bOnlineMeeting,
                    category: "Meeting",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: bOnlineMeeting ? "Virtual" : "In-person",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted",
                    description: sDetails + " " + sAgenda
                };

                // Get the model and add the new appointment to the first person's calendar
                var oModel = this.getView().getModel();
                var aPeople = oModel.getProperty("/people");

                if (aPeople && aPeople.length > 0) {
                    // Add to the first person's appointments
                    aPeople[0].appointments.push(newAppointment);

                    // Update the model
                    oModel.setProperty("/people", aPeople);
                    oModel.refresh(true);

                    // Show success message
                    MessageToast.show("Channel meeting '" + sTitle + "' has been created");

                    // Close the dialog
                    this._oChannelMeetingDialog.close();

                    // Refresh the calendar to show the new appointment
                    this.byId("calendar").getBinding("rows").refresh(true);
                } else {
                    MessageToast.show("Error: Could not find calendar to add meeting");
                }
            } catch (error) {
                console.error("Error saving channel meeting:", error);
                MessageToast.show("Error creating meeting. Please try again.");
            }
        },


        // Save Virtual Appointment
        onSaveVirtualAppointment: function () {
            try {
                var oViewModel = this.getView().getModel("view");
                var sTitle = Fragment.byId(this.getView().getId(), "virtualTitle").getValue();
                var sGuestName = Fragment.byId(this.getView().getId(), "guestName").getValue();
                var sGuestEmail = Fragment.byId(this.getView().getId(), "guestEmail").getValue();

                var oInternalAttendees = Fragment.byId(this.getView().getId(), "internalAttendees");
                var aInternalTokens = oInternalAttendees.getTokens();
                var sInternalAttendees = aInternalTokens.map(function (oToken) {
                    return oToken.getKey();
                }).join("; ");

                var oStartDateControl = Fragment.byId(this.getView().getId(), "virtualStartDate");
                var oStartTimeControl = Fragment.byId(this.getView().getId(), "virtualStartTime");
                var oEndDateControl = Fragment.byId(this.getView().getId(), "virtualEndDate");
                var oEndTimeControl = Fragment.byId(this.getView().getId(), "virtualEndTime");

                var oStartDate = oStartDateControl.getDateValue();
                var oStartTime = oStartTimeControl.getDateValue();
                var oEndDate = oEndDateControl.getDateValue();
                var oEndTime = oEndTimeControl.getDateValue();

                var bAllDay = Fragment.byId(this.getView().getId(), "virtualAllDay").getSelected();
                var sLocation = Fragment.byId(this.getView().getId(), "virtualLocation").getValue();
                var sPresenterOptions = Fragment.byId(this.getView().getId(), "presenterOptions").getSelectedKey();
                var bRecordAutomatically = Fragment.byId(this.getView().getId(), "recordAutomatically").getSelected();
                var sMeetingChat = Fragment.byId(this.getView().getId(), "meetingChat").getSelectedKey();
                var sMessage = Fragment.byId(this.getView().getId(), "virtualMessage").getValue();

                if (!sTitle) {
                    MessageToast.show("Please enter a title for the appointment");
                    return;
                }

                if (!sGuestName || !sGuestEmail) {
                    MessageToast.show("Please enter guest name and email");
                    return;
                }

                if (!oStartDate || !oEndDate) {
                    MessageToast.show("Please select valid dates");
                    return;
                }

                var oStart = new Date(oStartDate);
                if (!bAllDay && oStartTime) {
                    oStart.setHours(oStartTime.getHours(), oStartTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oStart.setHours(0, 0, 0, 0);
                }

                var oEnd = new Date(oEndDate);
                if (!bAllDay && oEndTime) {
                    oEnd.setHours(oEndTime.getHours(), oEndTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oEnd.setHours(23, 59, 59, 999);
                }

                if (oEnd <= oStart) {
                    MessageToast.show("End time must be after start time");
                    return;
                }

                var newAppointment = {
                    start: oStart,
                    end: oEnd,
                    title: sTitle,
                    info: "Virtual Appointment with " + sGuestName + " (" + sGuestEmail + ")",
                    type: "Type01",
                    pic: "sap-icon://video",
                    internalAttendees: sInternalAttendees,
                    location: sLocation,
                    presenterOptions: sPresenterOptions,
                    recordAutomatically: bRecordAutomatically,
                    meetingChat: sMeetingChat,
                    message: sMessage,
                    allDay: bAllDay,
                    isVirtual: true,
                    category: "Appointment",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: "Virtual",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted",
                    description: sMessage
                };

                var oModel = this.getView().getModel();
                var aPeople = oModel.getProperty("/people");

                if (aPeople && aPeople.length > 0) {
                    aPeople[0].appointments.push(newAppointment);
                    oModel.setProperty("/people", aPeople);
                    oModel.refresh(true);

                    MessageToast.show("Virtual appointment '" + sTitle + "' has been created");

                    // Refresh calendar to show the new appointment
                    this.byId("calendar").getBinding("rows").refresh(true);
                } else {
                    MessageToast.show("Error: Could not find calendar to add appointment");
                }

                if (this._oVirtualAppointmentDialog) {
                    this._oVirtualAppointmentDialog.close();
                }
            } catch (error) {
                console.error("Error saving virtual appointment:", error);
                MessageToast.show("Error creating appointment. Please try again.");
            }
        },


        // Cancel Channel Meeting
        onCancelChannelMeeting: function () {
            // Close the dialog without saving
            if (this._oChannelMeetingDialog) {
                this._oChannelMeetingDialog.close();
            }
            MessageToast.show("Channel meeting creation cancelled");
        },

        // Cancel Virtual Appointment
        onCancelVirtualAppointment: function () {
            // Close the dialog without saving
            if (this._oVirtualAppointmentDialog) {
                this._oVirtualAppointmentDialog.close();
            }
            MessageToast.show("Virtual appointment creation cancelled");
        },

        // Add additional guest
        onAddGuest: function () {
            MessageToast.show("Additional guest feature coming soon");
        },

        // Handle All Day checkbox changes
        onAllDayChange: function (oEvent) {
            var bAllDay = oEvent.getParameter("state");
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent/allDay", bAllDay);

            if (bAllDay) {
                var oStart = new Date(oViewModel.getProperty("/selectedEvent/start"));
                oStart.setHours(0, 0, 0, 0);
                oViewModel.setProperty("/selectedEvent/start", oStart);

                var oEnd = new Date(oViewModel.getProperty("/selectedEvent/end"));
                oEnd.setHours(23, 59, 59, 999);
                oViewModel.setProperty("/selectedEvent/end", oEnd);
            } else {
                var oStart = new Date(oViewModel.getProperty("/selectedEvent/start"));
                if (oStart.getHours() === 0) {
                    oStart.setHours(10, 0, 0, 0);
                }
                oViewModel.setProperty("/selectedEvent/start", oStart);

                var oEnd = new Date(oViewModel.getProperty("/selectedEvent/end"));
                if (oEnd.getHours() === 23) {
                    oEnd.setHours(10, 30, 0, 0);
                }
                oViewModel.setProperty("/selectedEvent/end", oEnd);
            }
        },

        onStartDateChange: function (oEvent) {
            var oDate = oEvent.getSource().getDateValue();
            if (!oDate) return;

            var oViewModel = this.getView().getModel("view");
            var oStart = new Date(oViewModel.getProperty("/selectedEvent/start"));
            oStart.setFullYear(oDate.getFullYear(), oDate.getMonth(), oDate.getDate());
            oViewModel.setProperty("/selectedEvent/start", oStart);
        },

        onStartTimeChange: function (oEvent) {
            var oTime = oEvent.getSource().getDateValue();
            if (!oTime) return;

            var oViewModel = this.getView().getModel("view");
            var oStart = new Date(oViewModel.getProperty("/selectedEvent/start"));
            oStart.setHours(oTime.getHours(), oTime.getMinutes(), 0, 0);
            oViewModel.setProperty("/selectedEvent/start", oStart);
        },

        onEndDateChange: function (oEvent) {
            var oDate = oEvent.getSource().getDateValue();
            if (!oDate) return;

            var oViewModel = this.getView().getModel("view");
            var oEnd = new Date(oViewModel.getProperty("/selectedEvent/end"));
            oEnd.setFullYear(oDate.getFullYear(), oDate.getMonth(), oDate.getDate());
            oViewModel.setProperty("/selectedEvent/end", oEnd);
        },

        onEndTimeChange: function (oEvent) {
            var oTime = oEvent.getSource().getDateValue();
            if (!oTime) return;

            var oViewModel = this.getView().getModel("view");
            var oEnd = new Date(oViewModel.getProperty("/selectedEvent/end"));
            oEnd.setHours(oTime.getHours(), oTime.getMinutes(), 0, 0);
            oViewModel.setProperty("/selectedEvent/end", oEnd);
        },

        onMoreOptionsPress: function () {
            MessageToast.show("More options coming soon");
        },

        // Modified onAppointmentSelect method
        onAppointmentSelect: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment");
            var oBindingContext = oAppointment.getBindingContext();

            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("filterPopover").close();
            this.byId("newEventPopover").close();

            // Get appointment data
            var oAppointmentData = oBindingContext.getObject();

            // Extract attendees from appointment
            var aAttendees = this._extractAttendeesFromAppointment(oAppointmentData);
            var sTitle = oAppointmentData.title;
            if (sTitle === "new appointment") {
                sTitle = "";
            }

            // Update selected event in model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", {
                title: sTitle,
                start: oAppointmentData.start,
                end: oAppointmentData.end,
                location: oAppointmentData.info || "",
                description: oAppointmentData.description || "",
                allDay: oAppointmentData.allDay || false,
                attendees: aAttendees,
                meetingLink: oAppointmentData.meetingLink || ""
            });
            oViewModel.setProperty("/selectedEventPath", oBindingContext.getPath());

            // Open event details popover using the new fragment
            this._openEventDetailsPopover(oEvent.getParameter("domRef"));
        },

        // Modified onIntervalSelect method
        onIntervalSelect: function (oEvent) {
            var oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                oRow = oEvent.getParameter("row"),
                oModel = this.getView().getModel(),
                oAppointment = {
                    start: oStartDate,
                    end: oEndDate,
                    title: "new appointment",
                    info: "",
                    type: "Type01",
                    location: "",
                    description: "",
                    allDay: false,
                    attendees: "",
                    category: "Appointment",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: "In-person",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted"
                };
            var oRowContext = oRow.getBindingContext();
            var sPath = oRowContext.getPath() + "/appointments";
            var aAppointments = oModel.getProperty(sPath) || [];
            aAppointments.push(oAppointment);
            oModel.setProperty(sPath, aAppointments);
            MessageToast.show("New appointment created. Click on it to edit.");
        },

        // Add this method to open the event details popover
        _openEventDetailsPopover: function (oSource) {
            var that = this;

            // Load the fragment if not already loaded
            if (!this._oEventDetailsPopover) {
                Fragment.load({
                    id: this.getView().getId(),
                    name: "com.capexrevex.capexrevex.view.Fragments.EventDetailsDialog",
                    controller: this
                }).then(function (oPopover) {
                    that._oEventDetailsPopover = oPopover;
                    that.getView().addDependent(that._oEventDetailsPopover);

                    // Set the model for the fragment
                    that._oEventDetailsPopover.setModel(that.getView().getModel("view"), "view");
                    that._oEventDetailsPopover.setModel(that.getView().getModel("attendees"), "attendees");

                    that._oEventDetailsPopover.openBy(oSource);

                    // Set attendees tokens after the fragment is rendered
                    setTimeout(function () {
                        that._setAttendeesTokens();
                    }, 100);
                }).catch(function (error) {
                    console.error("Error loading event details fragment:", error);
                    MessageToast.show("Error loading event details");
                });
            } else {
                // Set the model for the fragment
                this._oEventDetailsPopover.setModel(this.getView().getModel("view"), "view");
                this._oEventDetailsPopover.setModel(this.getView().getModel("attendees"), "attendees");

                // Open the popover
                this._oEventDetailsPopover.openBy(oSource);

                // Set attendees tokens
                this._setAttendeesTokens();
            }
        },

        _setAttendeesTokens: function () {
            var oViewModel = this.getView().getModel("view");
            var sAttendees = oViewModel.getProperty("/selectedEvent/attendees") || "";

            // Get the MultiInput control from the fragment
            var oMultiInput = Fragment.byId(this.getView().getId(), "eventAttendees");
            if (!oMultiInput) {
                console.error("MultiInput control not found in fragment");
                return;
            }

            // Clear existing tokens
            oMultiInput.destroyTokens();

            // Parse attendees and create tokens
            var aAttendees = this._parseAttendees(sAttendees);
            aAttendees.forEach(function (oAttendee) {
                var oToken = new Token({
                    key: oAttendee.email,
                    text: oAttendee.name + " (" + oAttendee.email + ")"
                });
                oMultiInput.addToken(oToken);
            });
        },

        // Extract attendees from appointment data
        _extractAttendeesFromAppointment: function (oAppointment) {
            var aAttendees = [];

            // Handle different appointment types
            if (oAppointment.requiredAttendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.requiredAttendees));
            }
            if (oAppointment.optionalAttendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.optionalAttendees));
            }
            if (oAppointment.internalAttendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.internalAttendees));
            }
            if (oAppointment.guestEmail) {
                aAttendees.push({
                    name: oAppointment.guestName || oAppointment.guestEmail,
                    email: oAppointment.guestEmail,
                    status: "Free"
                });
            }
            if (oAppointment.attendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.attendees));
            }

            return aAttendees;
        },

        // Parse attendees string into objects
        _parseAttendees: function (sAttendees) {
            if (!sAttendees) return [];

            if (typeof sAttendees === 'string') {
                return sAttendees.split(';').map(function (sAttendee) {
                    sAttendee = sAttendee.trim();
                    if (sAttendee) {
                        return {
                            name: sAttendee,
                            email: sAttendee,
                            status: "Free"
                        };
                    }
                    return null;
                }).filter(Boolean);
            } else if (Array.isArray(sAttendees)) {
                return sAttendees;
            }

            return [];
        },

        // Modified onSaveEvent method to handle attendees
        onSaveEvent: function () {
            var oViewModel = this.getView().getModel("view");
            var sPath = oViewModel.getProperty("/selectedEventPath");

            // Get values from the fragment controls
            var oTitleControl = Fragment.byId(this.getView().getId(), "eventTitle");
            var oStartDateControl = Fragment.byId(this.getView().getId(), "eventStartDate");
            var oStartTimeControl = Fragment.byId(this.getView().getId(), "eventStartTime");
            var oEndDateControl = Fragment.byId(this.getView().getId(), "eventEndDate");
            var oEndTimeControl = Fragment.byId(this.getView().getId(), "eventEndTime");
            var oLocationControl = Fragment.byId(this.getView().getId(), "eventLocation");
            var oDescriptionControl = Fragment.byId(this.getView().getId(), "eventDescription");
            var oAllDayControl = Fragment.byId(this.getView().getId(), "allDayCheckbox");
            var oAttendeesControl = Fragment.byId(this.getView().getId(), "eventAttendees");

            // Validate controls exist
            if (!oTitleControl || !oStartDateControl || !oStartTimeControl ||
                !oEndDateControl || !oEndTimeControl || !oLocationControl ||
                !oDescriptionControl || !oAllDayControl || !oAttendeesControl) {
                MessageToast.show("Error: Could not find all form controls");
                return;
            }

            // Get values
            var sTitle = oTitleControl.getValue();
            var oStartDate = oStartDateControl.getDateValue();
            var oStartTime = oStartTimeControl.getDateValue();
            var oEndDate = oEndDateControl.getDateValue();
            var oEndTime = oEndTimeControl.getDateValue();
            var sLocation = oLocationControl.getValue();
            var sDescription = oDescriptionControl.getValue();
            var bAllDay = oAllDayControl.getSelected();

            // Get attendees
            var aTokens = oAttendeesControl.getTokens();
            var sAttendees = aTokens.map(function (oToken) {
                return oToken.getKey();
            }).join("; ");

            // Validate required fields
            if (!sTitle) {
                MessageToast.show("Please enter a title for the event");
                return;
            }

            if (!oStartDate || !oEndDate) {
                MessageToast.show("Please enter valid start and end dates");
                return;
            }

            // Combine date and time
            var oStart = new Date(oStartDate);
            if (!bAllDay && oStartTime) {
                oStart.setHours(oStartTime.getHours(), oStartTime.getMinutes(), 0, 0);
            } else if (bAllDay) {
                oStart.setHours(0, 0, 0, 0);
            }

            var oEnd = new Date(oEndDate);
            if (!bAllDay && oEndTime) {
                oEnd.setHours(oEndTime.getHours(), oEndTime.getMinutes(), 0, 0);
            } else if (bAllDay) {
                oEnd.setHours(23, 59, 59, 999);
            }

            // Validate that end time is after start time
            if (oEnd <= oStart) {
                MessageToast.show("End time must be after start time");
                return;
            }

            // Check if this is a new appointment or editing existing one
            if (sPath) {
                // Update existing appointment
                var oModel = this.getView().getModel();
                oModel.setProperty(sPath + "/title", sTitle);
                oModel.setProperty(sPath + "/start", oStart);
                oModel.setProperty(sPath + "/end", oEnd);
                oModel.setProperty(sPath + "/allDay", bAllDay);
                oModel.setProperty(sPath + "/info", sLocation);
                oModel.setProperty(sPath + "/location", sLocation);
                oModel.setProperty(sPath + "/description", sDescription);
                oModel.setProperty(sPath + "/attendees", sAttendees);
                MessageToast.show("Event updated successfully");
            } else {
                // Create new appointment
                var newAppointment = {
                    start: oStart,
                    end: oEnd,
                    title: sTitle,
                    info: sLocation,
                    type: "Type01",
                    
                    category: "Appointment",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: "In-person",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted",
                    attendees: sAttendees,
                    allDay: bAllDay,
                    description: sDescription
                };

                // Add to the first person's appointments
                var oModel = this.getView().getModel();
                var aPeople = oModel.getProperty("/people");
                if (aPeople && aPeople.length > 0) {
                    aPeople[0].appointments.push(newAppointment);
                    oModel.setProperty("/people", aPeople);
                    MessageToast.show("New event '" + sTitle + "' has been created");
                } else {
                    MessageToast.show("Error: Could not find calendar to add event");
                    return;
                }
            }

            // Close the popover
            if (this._oEventDetailsPopover) {
                this._oEventDetailsPopover.close();
            }

            // Refresh the calendar
            this.byId("calendar").getBinding("rows").refresh(true);
        },

        // Modified onDiscardEvent method
        onDiscardEvent: function () {
            // Close the popover without saving
            if (this._oEventDetailsPopover) {
                this._oEventDetailsPopover.close();
            }
            MessageToast.show("Changes discarded");
        },

        // Fragment handling functions
        _openRemarksDialog: function () {
            // Reset status properties
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/attendeeStatus/eventwAttendeesStatus", "");

            if (!this._oRemarksDialog) {
                // Load RemarksDialog (must match file path & name exactly)
                this._oRemarksDialog = new sap.ui.xmlfragment(this.getView().getId(),  // always pass view id for scoping
                    "com.capexrevex.capexrevex.Fragments.RemarksDialog", // no .fragment.xml here
                    this);
                this.getView().addDependent(this._oRemarksDialog);

                // Set the models for the fragment
                this._oRemarksDialog.setModel(this.getView().getModel());
                this._oRemarksDialog.setModel(this.getView().getModel("attendees"), "attendees");

                this._oRemarksDialog.open();
            }

            // Set default values for new event
            var oEventDate = UI5Date.getInstance();
            oEventDate.setHours(16, 0, 0, 0);
            var oEnd = UI5Date.getInstance(oEventDate);
            oEnd.setHours(16, 30, 0, 0);

            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", {
                title: "",
                start: oEventDate,
                end: oEnd,
                info: "",
                type: "Type01",
                icon: "",
                attendees: [],
                attendeeStatus: "", // Initialize attendee status
                isNew: true
            });

            this._oRemarksDialog.open();
        },

        // Update your save function to ensure it works
        onSaveEventFromDialog: function () {
            try {
                var oViewModel = this.getView().getModel("view");
                var sTitle = Fragment.byId(this.getView().getId(), "eventwTitle").getValue();

                // Get attendees from MultiInput
                var oAttendeesInput = Fragment.byId(this.getView().getId(), "eventwAttendees");
                var aTokens = oAttendeesInput.getTokens();
                var sAttendees = aTokens.map(function (oToken) {
                    return oToken.getKey();
                }).join("; ");

                // Validate required fields
                if (!sTitle) {
                    MessageToast.show("Please enter a title for the event");
                    return;
                }

                // Get other form values and create the event
                var newAppointment = {
                    start: oViewModel.getProperty("/selectedEvent/start"),
                    end: oViewModel.getProperty("/selectedEvent/end"),
                    title: sTitle,
                    pic: "sap-icon://video",
                    info: "Event with attendees",
                    type: "Type01",
                    attendees: sAttendees,
                    category: "Appointment",
                    showAs: "Busy"
                };

                // Add to calendar
                var oModel = this.getView().getModel();
                var aPeople = oModel.getProperty("/people");

                if (aPeople && aPeople.length > 0) {
                    aPeople[0].appointments.push(newAppointment);
                    oModel.setProperty("/people", aPeople);

                    // Close dialog
                    if (this._oRemarksDialog) {
                        this._oRemarksDialog.close();
                    }

                    MessageToast.show("Event '" + sTitle + "' has been created");
                    this.byId("calendar").getBinding("rows").refresh(true);
                }
            } catch (error) {
                console.error("Error saving event:", error);
                MessageToast.show("Error creating event");
            }
        },

        onCancelEventFromDialog: function () {
            // Close the dialog without saving
            if (this._oRemarksDialog) {
                this._oRemarksDialog.close();
            }
        },

        onToggleGroupMode: function () {
            var oViewModel = this.getView().getModel("view");
            var sMode = oViewModel.getProperty("/groupMode");
            oViewModel.setProperty("/groupMode", sMode === "Group" ? "None" : "Group");
            this.byId("calendar").rerender();
        },

        // Meet Now functionality
        onMeetNowPress: function () {
            this._openMeetNowDialog();
        },

        _openMeetNowDialog: function () {
            // Create dialog if it doesn't exist
            if (!this._oMeetNowDialog) {
                // Create meeting name input
                var oMeetingNameInput = new Input({
                    placeholder: "Enter meeting name",
                    value: "Meeting with Nadeem Abbas",
                    liveChange: function (oEvent) {
                        this._sMeetingName = oEvent.getParameter("value");
                    }.bind(this)
                });

                // Create start meeting button
                var oStartButton = new Button({
                    text: "Start meeting",
                    type: "Emphasized",
                    press: function () {
                        this._startMeetingDirect();
                    }.bind(this)
                });

                // Create get link button
                var oGetLinkButton = new Button({
                    text: "Get a link to share",
                    icon: "sap-icon://chain-link",
                    press: function () {
                        this._getMeetingLink();
                    }.bind(this)
                });

                // Create dialog with BOTH buttons
                this._oMeetNowDialog = new Dialog({
                    title: "Start a meeting now",
                    content: [
                        new Text({ text: "Meeting name" }),
                        oMeetingNameInput,
                        new Text({
                            // text: "This will open Microsoft Teams directly with the meeting link.",
                            class: "sapUiSmallMarginTop"
                        })
                    ],
                    beginButton: oStartButton,
                    endButton: oGetLinkButton, // Add the second button here
                    afterClose: function () {
                        // Reset meeting name when dialog closes
                        oMeetingNameInput.setValue("Meeting with Nadeem Abbas");
                    }
                });

                // Add dialog to view as dependent
                this.getView().addDependent(this._oMeetNowDialog);
            }

            // Open dialog
            this._oMeetNowDialog.open();
        },

        // Simplified version that just opens the Teams link
        _startMeetingDirect: function () {
            var meetingName = this._sMeetingName || "Meeting with Nadeem Abbas";

            // The Teams meeting link
            var joinUrl = "https://teams.microsoft.com/meet/4326770710049?p=BLkTTilSIc40mXD6CS";

            // Create a simple calendar event
            this._createMeetingEvent(meetingName, joinUrl);

            // Close the dialog
            if (this._oMeetNowDialog) {
                this._oMeetNowDialog.close();
            }

            // Open the Teams link directly
            window.open(joinUrl, "_blank");

            MessageToast.show("Opening Microsoft Teams meeting...");
        },

        _getMeetingLink: function () {
            // The correct meeting link as specified
            var meetingLink = "https://teams.microsoft.com/l/meetup-join/19%3ameeting_OGI5NmRmNDEtODc0Ni00MGNhLThlNjQtYzAyYTY2NzA5Yzhk%40thread.v2/0?context=%7b%22Tid%22%3a%229b95bc3c-fada-4090-b06b-0f54c08cc340%22%2c%22Oid%22%3a%22bef22b80-5884-4ba0-9774-00c706633cb5%22%7d";

            // Copy to clipboard
            navigator.clipboard.writeText(meetingLink).then(function () {
                MessageToast.show("Meeting link copied to clipboard");
            }).catch(function (err) {
                console.error('Could not copy text: ', err);
                MessageToast.show("Failed to copy link");
            });

            // Close the dialog
            if (this._oMeetNowDialog) {
                this._oMeetNowDialog.close();
            }
        },

        _createMeetingEvent: function (meetingName, meetingLink) {
            var oNow = UI5Date.getInstance();
            var oStart = UI5Date.getInstance(oNow);
            var oEnd = UI5Date.getInstance(oStart);
            oEnd.setHours(oEnd.getHours() + 1); // 1 hour meeting

            var newAppointment = {
                start: oStart,
                end: oEnd,
                title: meetingName,
                info: "Online Meeting",
                type: "Type01",
                pic: "sap-icon://video",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "Virtual",
                organizerStatus: "sent",
                attendeeStatus: "accepted",
                isOnline: true,
                meetingLink: meetingLink || ""
            };

            // Get the model and add the new appointment to the first person's calendar
            var oModel = this.getView().getModel();
            var aPeople = oModel.getProperty("/people");

            if (aPeople && aPeople.length > 0) {
                aPeople[0].appointments.push(newAppointment);
                oModel.setProperty("/people", aPeople);

                // Refresh the calendar to show the new appointment
                this.byId("calendar").getBinding("rows").refresh(true);
            }
        },

        // Join meeting functionality with late join detection
        onJoinMeeting: function () {
            var oViewModel = this.getView().getModel("view");
            var oSelectedEvent = oViewModel.getProperty("/selectedEvent");
            var oNow = UI5Date.getInstance();
            var oEventStart = new Date(oSelectedEvent.start);

            // Calculate time difference in minutes
            var iDiffMinutes = (oNow - oEventStart) / (1000 * 60);

            // Check if user is joining 30+ minutes late
            if (iDiffMinutes > 30) {
                // Create a new event starting now and ending 30 minutes later
                var oNewStart = UI5Date.getInstance(oNow);
                var oNewEnd = UI5Date.getInstance(oNow);
                oNewEnd.setMinutes(oNewEnd.getMinutes() + 30);

                var newAppointment = {
                    start: oNewStart,
                    end: oNewEnd,
                    title: "Follow-up: " + oSelectedEvent.title,
                    info: oSelectedEvent.info || "",
                    type: "Type01",
                    category: "Meeting",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: oSelectedEvent.inPerson || "Virtual",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted",
                    meetingLink: oSelectedEvent.meetingLink || ""
                };

                // Add to the first person's appointments
                var oModel = this.getView().getModel();
                var aPeople = oModel.getProperty("/people");

                if (aPeople && aPeople.length > 0) {
                    aPeople[0].appointments.push(newAppointment);
                    oModel.setProperty("/people", aPeople);
                    MessageToast.show("Created a new follow-up meeting for 30 minutes");
                }

                // Show popup message
                MessageToast.show("The meeting has ended, please join the new meeting.");
            }

            // Use the fixed Teams meeting link provided in the requirement
            var sMeetingLink = "https://teams.microsoft.com/l/meetup-join/19%3ameeting_MGQ0NGJjODQtMGEyMC00MjJiLTg3NzMtYTEyYTdlMjk4YTI4%40thread.v2/0?context=%7b%22Tid%22%3a%229b95bc3c-fada";

            // Open the meeting link
            sap.m.URLHelper.redirect(sMeetingLink, true);
        }
    });
});




UPDATED CODE 12

sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/ui/core/date/UI5Date",
    "sap/ui/core/Fragment",
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/m/Token",
    "sap/ui/model/odata/v2/ODataModel",
    "sap/m/Dialog",
    "sap/m/Input",
    "sap/m/Button",
    "sap/m/Text",
    "sap/m/SuggestionItem",
    "sap/m/BusyIndicator",
    "sap/ui/layout/HorizontalLayout",
    "sap/ui/layout/VerticalLayout",
    "sap/m/Label",
    "sap/m/DatePicker",
    "sap/m/TimePicker",
    "sap/m/CheckBox",
    "sap/m/MultiInput",
    "sap/m/Select",
    "sap/m/TextArea",
    "sap/ui/unified/Calendar"
], function (Controller, JSONModel, MessageToast, UI5Date, Fragment, Filter, FilterOperator, Token, ODataModel, Dialog, Input, Button, Text, SuggestionItem, BusyIndicator, HorizontalLayout, VerticalLayout, Label, DatePicker, TimePicker, CheckBox, MultiInput, Select, TextArea, UnifiedCalendar) {
    "use strict";
    return Controller.extend("com.capexrevex.capexrevex.controller.View1", {
        onInit: function () {
            // Initialize OData model
            var oSchedulingModel = new ODataModel({
                serviceUrl: "/calanderservicev2/",
                synchronizationMode: "None",
                useBatch: false
            });

            // Add error handling
            oSchedulingModel.attachRequestFailed(function (oEvent) {
                var oParams = oEvent.getParameters();
                console.error("OData request failed:", oParams);
            });

            // Add metadata loaded handler
            oSchedulingModel.attachMetadataLoaded(function () {
                console.log("Scheduling service metadata loaded successfully");
            });

            // Add metadata error handling
            oSchedulingModel.attachMetadataFailed(function (oEvent) {
                var oParams = oEvent.getParameters();
                MessageToast.show("Error connecting to scheduling service");
            });

            // Add request failed handler
            oSchedulingModel.attachRequestFailed(function (oEvent) {
                var oParams = oEvent.getParameters();
                console.error("OData request failed:", oParams);
                MessageToast.show("Service request failed: " + (oParams.message || "Unknown error"));
            });

            this.getView().setModel(oSchedulingModel, "scheduling");

            // Initialize attendees model with value property
            var oAttendeesModel = new JSONModel({
                value: [
                    { name: "Portal Admin", email: "donotreply@risedx.com", status: "Free" },
                    { name: "Pushpak Jha", email: "pushpak.jha@risedx.com", status: "Busy" }
                ] // This will hold the attendees array
            });
            this.getView().setModel(oAttendeesModel, "attendees");

            // Set initial view to Work week
            this.byId("viewSelectButton").setText("Work week");

            // Set initial time scale and days to show
            this._updateTimeScale(30);
            this._updateWorkWeekView(5);

            // Get today's date
            var today = UI5Date.getInstance();

            // Set the calendar to start from today
            var startDate = UI5Date.getInstance(
                today.getFullYear(),
                today.getMonth(),
                today.getDate(),
                8, 0 // Start at 8 AM
            );

            // Initialize the view model with data
            var oViewModel = new JSONModel({
                startDate: startDate,
                people: [{}],
                selectedEvent: {
                    title: "",
                    start: UI5Date.getInstance(),
                    end: UI5Date.getInstance(),
                    info: "",
                    type: "Type01",
                    isNew: true // Flag to identify new appointments
                },
                attendeeStatus: {
                    eventwAttendeesStatus: "",
                    requiredAttendeesStatus: "",
                    optionalAttendeesStatus: "",
                    internalAttendeesStatus: ""
                },
                busy: {
                    checkingAvailability: false
                },
                filters: {
                    appointments: true,
                    meetings: true,
                    reservations: false,
                    categories: [],
                    showAs: [],
                    recurrence: [],
                    inPerson: [],
                    organizer: {
                        sent: true,
                        draft: true
                    },
                    attendee: {
                        accepted: true,
                        declined: true,
                        followed: true,
                        tentative: true,
                        canceled: true,
                        notResponded: true
                    }
                },
                currentView: "Work week",
                timeScale: "30 minutes",
                daysToShow: 5,
                workWeekMenuOpen: false,
                timeScaleMinutes: 30,
                groupMode: "Group",
                currentTime: UI5Date.getInstance()
            });

            // Create additional model with extended data using UI5Date
            var oModel = new JSONModel();
            oModel.setData({
                startDate: startDate,
                people: [
                    { appointments: [] },
                    { appointments: [] },
                    { appointments: [] },
                    { appointments: [] }
                ]
            });

            // Set both models to the view
            this.getView().setModel(oViewModel, "view");
            this.getView().setModel(oModel);

            // Initialize filter arrays
            this._aFilters = [];

            // Update date display in filter popover
            this._updateDateDisplay();

            // Load attendees data
            this._loadAttendees();

            // Set up interval to update current time display every minute
            this._currentTimeInterval = setInterval(this._updateCurrentTime.bind(this), 60000);

            // Initial update of current time
            this._updateCurrentTime();
        },

        // Update current time in the model
        _updateCurrentTime: function () {
            var oNow = UI5Date.getInstance();
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/currentTime", oNow);
        },

        // Load attendees from scheduling service
        _loadAttendees: function () {
            var oSchedulingModel = this.getView().getModel("scheduling");
            var oAttendeesModel = this.getView().getModel("attendees");
            var that = this;

            // Read attendees from OData service
            oSchedulingModel.read("/getAttendees", {
                success: function (oData) {
                    if (oData && oData.value) {
                        // Transform the data to match our expected structure
                        var aAttendees = oData.value.map(function (oAttendee) {
                            return {
                                name: oAttendee.Name || oAttendee.name || "",
                                email: oAttendee.Email || oAttendee.email || "",
                                status: oAttendee.Status || oAttendee.status || "Free"
                            };
                        });

                        // Store in attendees model using /value property
                        oAttendeesModel.setProperty("/value", aAttendees);
                        MessageToast.show("Attendees loaded successfully: " + aAttendees.length + " found");
                    } else {
                        MessageToast.show("No attendees found");
                        oAttendeesModel.setProperty("/value", []);
                    }
                },
                error: function (oError) {
                    console.error("Error loading attendees:", oError);
                    MessageToast.show("Error loading attendees from service");
                    // Fallback to empty array if service fails
                    oAttendeesModel.setProperty("/value", []);
                }
            });
        },

        // Create a new attendee via OData service
        _createAttendee: function (oNewAttendee) {
            var oSchedulingModel = this.getView().getModel("scheduling");
            var oAttendeesModel = this.getView().getModel("attendees");
            var that = this;

            // Create the attendee via OData service
            oSchedulingModel.create("/getAttendees", oNewAttendee, {
                success: function (oData, oResponse) {
                    // Refresh the attendees list from backend
                    that._loadAttendees();
                    // Also update local model immediately so UI updates
                    var aAttendees = oAttendeesModel.getProperty("/value") || [];
                    aAttendees.push({
                        name: oNewAttendee.Name || oNewAttendee.name || "",
                        email: oNewAttendee.Email || oNewAttendee.email || "",
                        status: oNewAttendee.Status || oNewAttendee.status || "Free"
                    });
                    oAttendeesModel.setProperty("/value", aAttendees);
                    MessageToast.show("Attendee created successfully");
                },
                error: function (oError) {
                    console.error("Error creating attendee:", oError);
                    MessageToast.show("Error creating attendee");
                }
            });
        },

        // Handle attendee suggestions in MultiInput
        onAttendeeSuggest: function (oEvent) {
            var sTerm = oEvent.getParameter("suggestValue");
            var oMultiInput = oEvent.getSource();
            var oAttendeesModel = this.getView().getModel("attendees");

            if (!oAttendeesModel) {
                return;
            }

            // Get attendees from the model's value property
            var aAttendees = oAttendeesModel.getProperty("/value") || [];
            var aFilteredAttendees = [];

            if (sTerm) {
                // Filter attendees based on search term
                aFilteredAttendees = aAttendees.filter(function (oAttendee) {
                    return oAttendee.name.toLowerCase().includes(sTerm.toLowerCase()) ||
                        oAttendee.email.toLowerCase().includes(sTerm.toLowerCase());
                });
            } else {
                aFilteredAttendees = aAttendees;
            }

            // Update suggestion items
            oMultiInput.destroySuggestionItems();

            aFilteredAttendees.forEach(function (oAttendee) {
                var oSuggestionItem = new SuggestionItem({
                    key: oAttendee.email,
                    text: oAttendee.name + " (" + oAttendee.email + ")",
                    description: oAttendee.status
                });

                // Set different icons based on status
                switch (oAttendee.status.toLowerCase()) {
                    case "free":
                        oSuggestionItem.setIcon("sap-icon://accept");
                        break;
                    case "busy":
                        oSuggestionItem.setIcon("sap-icon://busy");
                        break;
                    case "tentative":
                        oSuggestionItem.setIcon("sap-icon://question-mark");
                        break;
                    default:
                        oSuggestionItem.setIcon("sap-icon://employee");
                }

                oMultiInput.addSuggestionItem(oSuggestionItem);
            });
        },

        // Handle token addition in MultiInput with OData call
        onAttendeeTokenChange: function (oEvent) {
            var oMultiInput = oEvent.getSource();
            var sInputValue = oMultiInput.getValue().trim();
            var sId = oMultiInput.getId();

            if (!sInputValue) {
                // Call checkAvailability with default email when input is empty
                var oModel = this.getView().getModel("scheduling");
                var sPath = "/checkAvailability(attendeeEmail='" + encodeURIComponent("donotreply@risedx.com") + "')";
                oModel.read(sPath, {
                    success: function (oData) {
                        var sStatus = oData.status || "Unknown";
                        // Update the status in the view model for ObjectStatus display
                        var oViewModel = this.getView().getModel("view");
                        oViewModel.setProperty("/attendeeStatus/_IDGenObjectStatus", sStatus);
                    }.bind(this),
                    error: function (oError) {
                        console.error("Error checking availability:", oError);
                        sap.m.MessageToast.show("Failed to check availability");
                        var oViewModel = this.getView().getModel("view");
                        oViewModel.setProperty("/attendeeStatus/_IDGenObjectStatus", "Error");
                    }
                });
                return;
            }

            // Determine which status property to update based on MultiInput ID
            var sStatusProperty = this._getStatusPropertyFromId(sId);

            // Check if input is an email
            if (this._isEmailValid(sInputValue)) {
                var oAttendeesModel = this.getView().getModel("attendees");
                var aAttendees = oAttendeesModel.getProperty("/value") || [];
                var bExists = aAttendees.some(function (oAttendee) {
                    return oAttendee.email === sInputValue;
                });

                if (!bExists) {
                    // Create a new attendee
                    var oNewAttendee = {
                        name: sInputValue.split('@')[0],
                        email: sInputValue,
                        status: "Free"
                    };

                    // Create the attendee via OData
                    this._createAttendee(oNewAttendee);
                }

                // Check availability for this attendee using OData service
                this._checkAttendeeAvailability(sInputValue, function (sStatus) {
                    // Create token for the email with status
                    var oToken = new Token({
                        key: sInputValue,
                        text: sInputValue.split('@')[0] + " (" + sInputValue + ")",
                        tooltip: "Status: " + sStatus
                    });

                    // Set token color based on status
                    switch (sStatus.toLowerCase()) {
                        case "free":
                            oToken.setType("Success");
                            break;
                        case "busy":
                            oToken.setType("Error");
                            break;
                        case "tentative":
                            oToken.setType("Warning");
                            break;
                        default:
                            oToken.setType("Information");
                    }

                    oMultiInput.addToken(oToken);
                    oMultiInput.setValue("");

                    // Update the status in the view model
                    var oViewModel = this.getView().getModel("view");
                    oViewModel.setProperty(sStatusProperty, sStatus);

                }.bind(this));

            } else {
                // Trigger suggestion for non-email input
                this.onAttendeeSuggest(oEvent);
            }
        },

        // Handle attendee input change to show busy indicator
        onAttendeeInputChange: function (oEvent) {
            var oMultiInput = oEvent.getSource();
            var sInputValue = oMultiInput.getValue().trim();

            if (sInputValue) {
                // Show busy indicator
                this._showAttendeeBusyIndicator(true);

                // Simulate a delay for checking availability
                setTimeout(function () {
                    // Hide busy indicator
                    this._showAttendeeBusyIndicator(false);

                    // Trigger token change if valid email
                    if (this._isEmailValid(sInputValue)) {
                        this.onAttendeeTokenChange(oEvent);
                    }
                }.bind(this), 1000);
            }
        },

        // Show or hide the busy indicator for attendee availability check
        _showAttendeeBusyIndicator: function (bShow) {
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/busy/checkingAvailability", bShow);

            // Find the busy indicator in the fragment and show/hide it
            var oBusyIndicator = Fragment.byId(this.getView().getId(), "attendeeBusyIndicator");
            if (oBusyIndicator) {
                if (bShow) {
                    oBusyIndicator.setVisible(true);
                } else {
                    oBusyIndicator.setVisible(false);
                }
            }
        },

        // Helper method to get status property from MultiInput ID
        _getStatusPropertyFromId: function (sId) {
            if (sId.indexOf("requiredAttendees") !== -1) {
                return "/attendeeStatus/requiredAttendeesStatus";
            } else if (sId.indexOf("optionalAttendees") !== -1) {
                return "/attendeeStatus/optionalAttendeesStatus";
            } else if (sId.indexOf("internalAttendees") !== -1) {
                return "/attendeeStatus/internalAttendeesStatus";
            } else {
                return "/attendeeStatus/eventwAttendeesStatus";
            }
        },

        // Check attendee availability using OData service
        _checkAttendeeAvailability: function (sEmail, fnCallback) {
            var oSchedulingModel = this.getView().getModel("scheduling");
            var oViewModel = this.getView().getModel("view");

            // Get current meeting time from the view model
            var oStartDateTime = oViewModel.getProperty("/selectedEvent/start");
            var oEndDateTime = oViewModel.getProperty("/selectedEvent/end");

            // Format dates for OData call
            var sStartDateTime = oStartDateTime ? oStartDateTime.toISOString() : new Date().toISOString();
            var sEndDateTime = oEndDateTime ? oEndDateTime.toISOString() : new Date(Date.now() + 30 * 60000).toISOString();

            // Build the OData call URL
            var sPath = "/checkAvailability(attendeeEmail='" + encodeURIComponent(sEmail) +
                "',startDateTime='" + encodeURIComponent(sStartDateTime) +
                "',endDateTime='" + encodeURIComponent(sEndDateTime) + "')";

            // Call the checkAvailability endpoint
            oSchedulingModel.read(sPath, {
                success: function (oData) {
                    var sStatus = oData.status || "Unknown";
                    fnCallback(sStatus);
                },
                error: function (oError) {
                    console.error("Error checking availability:", oError);
                    // Fallback: check if attendee exists and get their status
                    var oAttendeesModel = this.getView().getModel("attendees");
                    var aAttendees = oAttendeesModel.getProperty("/value") || [];
                    var oAttendee = aAttendees.find(function (attendee) {
                        return attendee.email === sEmail;
                    });
                    var sStatus = oAttendee ? oAttendee.status : "Unknown";
                    fnCallback(sStatus);
                }.bind(this)
            });
        },

        // Validate email format
        _isEmailValid: function (sEmail) {
            var re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            return re.test(sEmail);
        },

        // Handle date/time changes that affect availability
        onDateTimeChange: function (oEvent) {
            var oViewModel = this.getView().getModel("view");
            var oSelectedEvent = oViewModel.getProperty("/selectedEvent");

            // Get all MultiInput controls and re-check availability
            var aMultiInputIds = ["eventwAttendees", "requiredAttendees", "optionalAttendees", "internalAttendees"];
            var that = this;

            aMultiInputIds.forEach(function (sInputId) {
                var oMultiInput = Fragment.byId(that.getView().getId(), sInputId);
                if (!oMultiInput) return;

                var aTokens = oMultiInput.getTokens();
                if (aTokens.length === 0) return;

                // Re-check availability for all attendees when date/time changes
                aTokens.forEach(function (oToken) {
                    var sEmail = oToken.getKey();
                    var sStatusProperty = that._getStatusPropertyFromId(sInputId);

                    that._checkAttendeeAvailability(sEmail, function (sStatus) {
                        // Update token appearance based on new status
                        switch (sStatus.toLowerCase()) {
                            case "free":
                                oToken.setType("Success");
                                break;
                            case "busy":
                                oToken.setType("Error");
                                break;
                            case "tentative":
                                oToken.setType("Warning");
                                break;
                            default:
                                oToken.setType("Information");
                        }

                        oToken.setTooltip("Status: " + sStatus);

                        // Update the status in the view model
                        oViewModel.setProperty(sStatusProperty, sStatus);
                    });
                });
            });
        },

        // Handle status pressed to show details
        handleStatusPressed: function (oEvent) {
            var oObjectStatus = oEvent.getSource();
            var sStatus = oObjectStatus.getText();
            var sTitle = "Attendee Status Details";

            // Create a dialog to show status details
            var oDialog = new Dialog({
                title: sTitle,
                type: "Message",
                state: "Information",
                content: new Text({
                    text: "Current status: " + sStatus + "\n\n" +
                        "This status indicates the attendee's availability during the scheduled meeting time."
                }),
                beginButton: new Button({
                    text: "OK",
                    press: function () {
                        oDialog.close();
                    }
                }),
                afterClose: function () {
                    oDialog.destroy();
                }
            });

            // Open the dialog
            oDialog.open();
        },

        // Formatter for attendee status
        formatAttendeeStatus: function (sStatus) {
            switch (sStatus) {
                case "Free":
                    return "Success";
                case "Busy":
                    return "Error";
                case "Tentative":
                    return "Warning";
                default:
                    return "None";
            }
        },

        // Open the New Appointment dialog
        onNewAppointmentPress: function () {
            this._openNewAppointmentDialog();
        },

        _openNewAppointmentDialog: function () {
            if (!this._oNewAppointmentDialog) {
                Fragment.load({
                    id: this.getView().getId(),
                    name: "com.capexrevex.capexrevex.view.Fragments.NewAppointmentDialog",
                    controller: this
                }).then(function (oDialog) {
                    this._oNewAppointmentDialog = oDialog;
                    this.getView().addDependent(this._oNewAppointmentDialog);

                    // Set default values for new appointment
                    this._setDefaultAppointmentValues();

                    // Set the models for the fragment
                    this._oNewAppointmentDialog.setModel(this.getView().getModel("view"), "view");
                    this._oNewAppointmentDialog.setModel(this.getView().getModel("attendees"), "attendees");

                    this._oNewAppointmentDialog.open();
                }.bind(this)).catch(function (oError) {
                    MessageToast.show("Error loading dialog: " + oError.message);
                });
            } else {
                // Set default values for the appointment
                this._setDefaultAppointmentValues();

                // Set the models for the fragment
                this._oNewAppointmentDialog.setModel(this.getView().getModel("view"), "view");
                this._oNewAppointmentDialog.setModel(this.getView().getModel("attendees"), "attendees");

                this._oNewAppointmentDialog.open();
            }
        },

        _setDefaultAppointmentValues: function () {
            // Set default date and time to current time
            var oNow = UI5Date.getInstance();
            var oStart = UI5Date.getInstance(oNow);

            // Round to nearest 15 minutes
            var minutes = oStart.getMinutes();
            if (minutes < 7.5) {
                oStart.setMinutes(0);
            } else if (minutes < 22.5) {
                oStart.setMinutes(15);
            } else if (minutes < 37.5) {
                oStart.setMinutes(30);
            } else if (minutes < 52.5) {
                oStart.setMinutes(45);
            } else {
                oStart.setHours(oStart.getHours() + 1);
                oStart.setMinutes(0);
            }

            var oEnd = UI5Date.getInstance(oStart);
            oEnd.setMinutes(oEnd.getMinutes() + 30);

            // Set values in the view model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", {
                title: "",
                start: oStart,
                end: oEnd,
                location: "",
                description: "",
                allDay: false,
                isNew: true
            });

            // Reset status
            oViewModel.setProperty("/attendeeStatus/eventwAttendeesStatus", "");
        },

        // Save the new appointment with OData service integration
        onSaveNewAppointment: function () {
            try {
                var oViewModel = this.getView().getModel("view");
                var oSelectedEvent = oViewModel.getProperty("/selectedEvent");

                // Get values from the dialog
                var sTitle = Fragment.byId(this.getView().getId(), "appointmentTitle").getValue();
                var oAttendeesInput = Fragment.byId(this.getView().getId(), "eventwAttendees");
                var aTokens = oAttendeesInput.getTokens();
                var sAttendees = aTokens.map(function (oToken) {
                    return oToken.getKey();
                }).join("; ");

                // Validate required fields
                if (!sTitle) {
                    MessageToast.show("Please enter a title for the appointment");
                    return;
                }

                // Validate that end time is after start time
                if (oSelectedEvent.end <= oSelectedEvent.start) {
                    MessageToast.show("End time must be after start time");
                    return;
                }

                // Prepare data for OData service
                var oMeetingData = {
                    MeetingTitle: sTitle,
                    StartDateTime: oSelectedEvent.start.toISOString(),
                    EndDateTime: oSelectedEvent.end.toISOString(),
                    Location: oSelectedEvent.location || "",
                    Description: oSelectedEvent.description || "",
                    IsAllDay: oSelectedEvent.allDay || false,
                    IsRecurring: false,
                    IsVirtual: false,
                    Attendees: sAttendees,
                    OrganizerEmail: "pushpak.jha@risedx.com",
                    Category: "Appointment"
                };

                // Call OData service to create meeting
                this.createMeetingScheduling(oMeetingData);

            } catch (error) {
                console.error("Error saving appointment:", error);
                MessageToast.show("Error creating appointment. Please try again.");
            }
        },

        // Create meeting scheduling via OData service
        createMeetingScheduling: function (oMeetingData) {
            var oSchedulingModel = this.getView().getModel("scheduling");
            var that = this;

            // Prepare the payload according to your service metadata
            var oPayload = {
                MeetingTitle: oMeetingData.MeetingTitle,
                StartDateTime: oMeetingData.StartDateTime,
                EndDateTime: oMeetingData.EndDateTime,
                Location: oMeetingData.Location || "",
                Description: oMeetingData.Description || "",
                IsAllDay: oMeetingData.IsAllDay || false,
                IsRecurring: oMeetingData.IsRecurring || false,
                IsVirtual: oMeetingData.IsVirtual || false,
                Attendees: oMeetingData.Attendees || "",
                OrganizerEmail: oMeetingData.OrganizerEmail || "pushpak.jha@risedx.com",
                Category: oMeetingData.Category || "Meeting"
            };

            oSchedulingModel.create("/MeetingScheduling", oPayload, {
                success: function (oData, oResponse) {
                    MessageToast.show("Meeting scheduled successfully!");

                    // Add the meeting to the local calendar for immediate UI update
                    that._addMeetingToCalendar(oMeetingData);

                    // Close the dialog
                    if (that._oNewAppointmentDialog) {
                        that._oNewAppointmentDialog.close();
                    }

                    // Refresh attendees if needed
                    that._loadAttendees();
                },
                error: function (oError) {
                    console.error("Error scheduling meeting:", oError);

                    // Fallback: Add to local calendar even if service call fails
                    that._addMeetingToCalendar(oMeetingData);

                    // Close the dialog
                    if (that._oNewAppointmentDialog) {
                        that._oNewAppointmentDialog.close();
                    }

                    MessageToast.show("Meeting saved locally (service unavailable)");
                }
            });
        },

        // Helper method to add meeting to calendar
        _addMeetingToCalendar: function (oMeetingData) {
            var oModel = this.getView().getModel();
            var aPeople = oModel.getProperty("/people");

            if (aPeople && aPeople.length > 0) {
                var newAppointment = {
                    start: new Date(oMeetingData.StartDateTime),
                    end: new Date(oMeetingData.EndDateTime),
                    title: oMeetingData.MeetingTitle,
                    info: oMeetingData.Location || "Online Meeting",
                    type: "Type01",
                    pic: "sap-icon://group",
                    category: "Meeting",
                    showAs: "Busy",
                    recurrence: oMeetingData.IsRecurring ? "Recurring" : "Non-recurring",
                    inPerson: oMeetingData.IsVirtual ? "Virtual" : "In-person",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted",
                    attendees: oMeetingData.Attendees || []
                };

                aPeople[0].appointments.push(newAppointment);
                oModel.setProperty("/people", aPeople);

                // Refresh calendar to show the new appointment
                this.byId("calendar").getBinding("rows").refresh(true);
            }
        },

        // Discard the new appointment
        onDiscardNewAppointment: function () {
            // Close the dialog without saving
            if (this._oNewAppointmentDialog) {
                this._oNewAppointmentDialog.close();
            }
            MessageToast.show("Appointment creation cancelled");
        },

        // Update date display in filter popover
        _updateDateDisplay: function () {
            var oDateDisplay = this.byId("dateDisplay");
            if (oDateDisplay) {
                var today = UI5Date.getInstance();
                var options = { weekday: 'long', day: 'numeric' };
                var dateText = today.toLocaleDateString('en-US', options);
                oDateDisplay.setText(dateText);
            }
        },

        // Clean up on exit
        onExit: function () {
            // Clean up all fragments when the controller is destroyed
            if (this._oNewAppointmentDialog) {
                this._oNewAppointmentDialog.destroy();
                this._oNewAppointmentDialog = null;
            }
            if (this._oChannelMeetingDialog) {
                this._oChannelMeetingDialog.destroy();
                this._oChannelMeetingDialog = null;
            }
            if (this._oVirtualAppointmentDialog) {
                this._oVirtualAppointmentDialog.destroy();
                this._oVirtualAppointmentDialog = null;
            }
            if (this._oRemarksDialog) {
                this._oRemarksDialog.destroy();
                this._oRemarksDialog = null;
            }
            if (this._oEventDetailsPopover) {
                this._oEventDetailsPopover.destroy();
                this._oEventDetailsPopover = null;
            }
            if (this._oMeetNowDialog) {
                this._oMeetNowDialog.destroy();
                this._oMeetNowDialog = null;
            }

            // Clear the interval for updating current time
            if (this._currentTimeInterval) {
                clearInterval(this._currentTimeInterval);
            }
        },

        // Role-based functionality
        roles: {
            donna: "Donna Moore",
            manager: "manager",
            admin: "admin"
        },

        handleRoleChange: function () {
            this.getView().getModel().refresh(true);
        },

        getUserRole: function () {
            return this.roles[this.byId("userRole").getSelectedKey()];
        },

        canModifyAppointments: function (sRole) {
            var sUserRole = this.getUserRole();
            if (sUserRole === this.roles.manager || sUserRole === this.roles.admin || sUserRole === sRole) {
                return true;
            }
            return false;
        },

        // Filter functionality
        onFilterChange: function (oEvent) {
            var sFilterType = oEvent.getSource().getId().replace("Checkbox", "");
            var bSelected = oEvent.getParameter("selected");
            // Update filter model
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            oFilters[sFilterType.toLowerCase()] = bSelected;
            oViewModel.setProperty("/filters", oFilters);
            // Apply filters
            this.applyFilters();
        },

        // Update the applyFilters method to work correctly
        applyFilters: function () {
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            // Clear existing filters
            this._aFilters = [];

            // Apply category type filters
            var aCategoryFilters = [];
            if (oFilters.appointments) {
                aCategoryFilters.push(new Filter("category", FilterOperator.EQ, "Appointment"));
            }
            if (oFilters.meetings) {
                aCategoryFilters.push(new Filter("category", FilterOperator.EQ, "Meeting"));
            }
            if (oFilters.reservations) {
                aCategoryFilters.push(new Filter("category", FilterOperator.EQ, "Reservation"));
            }
            if (aCategoryFilters.length > 0) {
                this._aFilters.push(new Filter({
                    filters: aCategoryFilters,
                    and: false
                }));
            }

            // Apply additional filters if any are selected
            if (oFilters.categories && oFilters.categories.length > 0) {
                this._aFilters.push(new Filter("category", FilterOperator.Contains, oFilters.categories.join("|")));
            }
            if (oFilters.showAs && oFilters.showAs.length > 0) {
                this._aFilters.push(new Filter("showAs", FilterOperator.Contains, oFilters.showAs.join("|")));
            }
            if (oFilters.recurrence && oFilters.recurrence.length > 0) {
                this._aFilters.push(new Filter("recurrence", FilterOperator.Contains, oFilters.recurrence.join("|")));
            }
            if (oFilters.inPerson && oFilters.inPerson.length > 0) {
                this._aFilters.push(new Filter("inPerson", FilterOperator.Contains, oFilters.inPerson.join("|")));
            }

            // Apply organizer filters
            var aOrganizerFilters = [];
            if (oFilters.organizer.sent) {
                aOrganizerFilters.push(new Filter("organizerStatus", FilterOperator.EQ, "sent"));
            }
            if (oFilters.organizer.draft) {
                aOrganizerFilters.push(new Filter("organizerStatus", FilterOperator.EQ, "draft"));
            }
            if (aOrganizerFilters.length > 0) {
                this._aFilters.push(new Filter({
                    filters: aOrganizerFilters,
                    and: false
                }));
            }

            // Apply attendee filters
            var aAttendeeFilters = [];
            if (oFilters.attendee.accepted) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "accepted"));
            }
            if (oFilters.attendee.declined) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "declined"));
            }
            if (oFilters.attendee.followed) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "followed"));
            }
            if (oFilters.attendee.tentative) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "tentative"));
            }
            if (oFilters.attendee.canceled) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "canceled"));
            }
            if (oFilters.attendee.notResponded) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "notResponded"));
            }
            if (aAttendeeFilters.length > 0) {
                this._aFilters.push(new Filter({
                    filters: aAttendeeFilters,
                    and: false
                }));
            }

            // Apply filters to the calendar
            var oCalendar = this.byId("calendar");
            var oBinding = oCalendar.getBinding("rows");
            if (this._aFilters.length > 0) {
                oBinding.filter(this._aFilters);
            } else {
                oBinding.filter([]);
            }

            // Update filter button text
            var oFilterButton = this.byId("_IDGenButton7");
            var iFilterCount = this._aFilters.length;
            oFilterButton.setText(iFilterCount > 0 ? "Filter (" + iFilterCount + ")" : "Filter");
        },

        // Filter popover handlers
        onAppointmentsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("appointmentsFilterPopover").openBy(oButton);
        },

        onMeetingsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("meetingsFilterPopover").openBy(oButton);
        },

        onReservationsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("reservationsFilterPopover").openBy(oButton);
        },

        onCategoriesFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("categoriesFilterPopover").openBy(oButton);
        },

        onShowAsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("showAsFilterPopover").openBy(oButton);
        },

        onRecurrenceFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("recurrenceFilterPopover").openBy(oButton);
        },

        onInPersonFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("inPersonFilterPopover").openBy(oButton);
        },

        // Organizer and Attendee filter handlers
        onOrganizerFilterPress: function (oEvent) {
            var oOptionsBox = this.byId("organizerOptions");
            oOptionsBox.setVisible(!oOptionsBox.getVisible());
        },

        onAttendeeFilterPress: function (oEvent) {
            var oOptionsBox = this.byId("attendeeOptions");
            oOptionsBox.setVisible(!oOptionsBox.getVisible());
        },

        onOrganizerFilterChange: function (oEvent) {
            var sId = oEvent.getSource().getId();
            var bSelected = oEvent.getParameter("selected");
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            // Update the corresponding filter property
            if (sId === "sentCheckbox") {
                oFilters.organizer.sent = bSelected;
            } else if (sId === "draftCheckbox") {
                oFilters.organizer.draft = bSelected;
            }
            oViewModel.setProperty("/filters", oFilters);
            this.applyFilters();
        },

        onAttendeeFilterChange: function (oEvent) {
            var sId = oEvent.getSource().getId();
            var bSelected = oEvent.getParameter("selected");
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            // Update the corresponding filter property
            if (sId === "acceptedCheckbox") {
                oFilters.attendee.accepted = bSelected;
            } else if (sId === "declinedCheckbox") {
                oFilters.attendee.declined = bSelected;
            } else if (sId === "followedCheckbox") {
                oFilters.attendee.followed = bSelected;
            } else if (sId === "tentativeCheckbox") {
                oFilters.attendee.tentative = bSelected;
            } else if (sId === "canceledCheckbox") {
                oFilters.attendee.canceled = bSelected;
            } else if (sId === "notRespondedCheckbox") {
                oFilters.attendee.notResponded = bSelected;
            }
            oViewModel.setProperty("/filters", oFilters);
            this.applyFilters();
        },

        onUnselectAllRight: function () {
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            // Reset organizer filters
            oFilters.organizer.sent = false;
            oFilters.organizer.draft = false;
            // Reset attendee filters
            oFilters.attendee.accepted = false;
            oFilters.attendee.declined = false;
            oFilters.attendee.followed = false;
            oFilters.attendee.tentative = false;
            oFilters.attendee.canceled = false;
            oFilters.attendee.notResponded = false;
            oViewModel.setProperty("/filters", oFilters);
            // Update the checkboxes
            this.byId("sentCheckbox").setSelected(false);
            this.byId("draftCheckbox").setSelected(false);
            this.byId("acceptedCheckbox").setSelected(false);
            this.byId("declinedCheckbox").setSelected(false);
            this.byId("followedCheckbox").setSelected(false);
            this.byId("tentativeCheckbox").setSelected(false);
            this.byId("canceledCheckbox").setSelected(false);
            this.byId("notRespondedCheckbox").setSelected(false);
            this.applyFilters();
        },

        // Unselect all handlers
        onAppointmentsUnselectAll: function () {
            this._unselectAllCheckboxes("appointmentsFilterList");
        },

        onMeetingsUnselectAll: function () {
            this._unselectAllCheckboxes("meetingsFilterList");
        },

        onReservationsUnselectAll: function () {
            this._unselectAllCheckboxes("reservationsFilterList");
        },

        onCategoriesUnselectAll: function () {
            this._unselectAllCheckboxes("categoriesFilterList");
        },

        onShowAsUnselectAll: function () {
            this._unselectAllCheckboxes("showAsFilterList");
        },

        onRecurrenceUnselectAll: function () {
            this._unselectAllCheckboxes("recurrenceFilterList");
        },

        onInPersonUnselectAll: function () {
            this._unselectAllCheckboxes("inPersonFilterList");
        },

        _unselectAllCheckboxes: function (sListId) {
            var oList = this.byId(sListId);
            var aItems = oList.getItems();
            aItems.forEach(function (oItem) {
                if (oItem.isA("sap.m.CheckBox")) {
                    oItem.setSelected(false);
                }
            });
        },

        // Filter selection handlers
        onAppointmentsFilterSelect: function (oEvent) {
            this._updateFilterArray("appointments", oEvent);
        },

        onMeetingsFilterSelect: function (oEvent) {
            this._updateFilterArray("meetings", oEvent);
        },

        onReservationsFilterSelect: function (oEvent) {
            this._updateFilterArray("reservations", oEvent);
        },

        onCategoriesFilterSelect: function (oEvent) {
            this._updateFilterArray("categories", oEvent);
        },

        onShowAsFilterSelect: function (oEvent) {
            this._updateFilterArray("showAs", oEvent);
        },

        onRecurrenceFilterSelect: function (oEvent) {
            this._updateFilterArray("recurrence", oEvent);
        },

        onInPersonFilterSelect: function (oEvent) {
            this._updateFilterArray("inPerson", oEvent);
        },

        _updateFilterArray: function (sFilterType, oEvent) {
            var sValue = oEvent.getSource().getText();
            var bSelected = oEvent.getParameter("selected");
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            if (!oFilters[sFilterType]) {
                oFilters[sFilterType] = [];
            }
            if (bSelected) {
                if (oFilters[sFilterType].indexOf(sValue) === -1) {
                    oFilters[sFilterType].push(sValue);
                }
            } else {
                var iIndex = oFilters[sFilterType].indexOf(sValue);
                if (iIndex !== -1) {
                    oFilters[sFilterType].splice(iIndex, 1);
                }
            }
            oViewModel.setProperty("/filters", oFilters);
            this.applyFilters();
        },

        onClearFilters: function () {
            // Reset all filter checkboxes
            var aCheckBoxIds = [
                "appointmentsCheckbox", "meetingsCheckbox", "reservationsCheckbox"
            ];
            aCheckBoxIds.forEach(function (sId) {
                var oCheckBox = this.byId(sId);
                if (oCheckBox) {
                    oCheckBox.setSelected(sId === "appointmentsCheckbox" || sId === "meetingsCheckbox");
                }
            }.bind(this));

            // Reset organizer and attendee filters
            this.byId("sentCheckbox").setSelected(true);
            this.byId("draftCheckbox").setSelected(true);
            this.byId("acceptedCheckbox").setSelected(true);
            this.byId("declinedCheckbox").setSelected(true);
            this.byId("followedCheckbox").setSelected(true);
            this.byId("tentativeCheckbox").setSelected(true);
            this.byId("canceledCheckbox").setSelected(true);
            this.byId("notRespondedCheckbox").setSelected(true);

            // Reset filter arrays in model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/filters", {
                appointments: true,
                meetings: true,
                reservations: false,
                categories: [],
                showAs: [],
                recurrence: [],
                inPerson: [],
                organizer: {
                    sent: true,
                    draft: true
                },
                attendee: {
                    accepted: true,
                    declined: true,
                    followed: true,
                    tentative: true,
                    canceled: true,
                    notResponded: true
                }
            });

            // Apply empty filters
            this._aFilters = [];
            var oCalendar = this.byId("calendar");
            oCalendar.getBinding("rows").filter([]);

            // Update filter button text
            this.byId("_IDGenButton7").setText("Filter");
            MessageToast.show("All filters cleared");
        },

        // Drag and Drop functionality
        handleAppointmentDragEnter: function (oEvent) {
            if (this.isAppointmentOverlap(oEvent, oEvent.getParameter("calendarRow"))) {
                oEvent.preventDefault();
            }
        },

        handleAppointmentDrop: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                oCalendarRow = oEvent.getParameter("calendarRow"),
                bCopy = oEvent.getParameter("copy"),
                sTitle = oAppointment.getTitle(),
                oModel = this.getView().getModel(),
                oAppBindingContext = oAppointment.getBindingContext(),
                oRowBindingContext = oCalendarRow.getBindingContext(),
                handleAppointmentDropBetweenRows = function () {
                    var aPath = oAppBindingContext.getPath().split("/");
                    var iIndex = aPath.pop();
                    var sRowAppointmentsPath = aPath.join("/");
                    oRowBindingContext.getObject().appointments.push(
                        oModel.getProperty(oAppBindingContext.getPath())
                    );
                    oModel.getProperty(sRowAppointmentsPath).splice(iIndex, 1);
                };
            if (bCopy) { // "copy" appointment
                var oProps = Object.assign({}, oModel.getProperty(oAppointment.getBindingContext().getPath()));
                oProps.start = oStartDate;
                oProps.end = oEndDate;
                oRowBindingContext.getObject().appointments.push(oProps);
            } else { // "move" appointment
                oModel.setProperty("start", oStartDate, oAppBindingContext);
                oModel.setProperty("end", oEndDate, oAppBindingContext);
                if (oAppointment.getParent() !== oCalendarRow) {
                    handleAppointmentDropBetweenRows();
                }
            }
            oModel.refresh(true);
        },

        handleAppointmentResize: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate");
            if (!this.isAppointmentOverlap(oEvent, oAppointment.getParent())) {
                oAppointment
                    .setStartDate(oStartDate)
                    .setEndDate(oEndDate);
            } else {
                MessageToast.show("As a manager you can not resize events if they overlap with another events");
            }
        },

        // Modified handleAppointmentCreate to open event details fragment
        handleAppointmentCreate: function (oEvent) {
            var oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                oPlanningCalendarRow = oEvent.getParameter("calendarRow"),
                oModel = this.getView().getModel(),
                sPath = oPlanningCalendarRow.getBindingContext().getPath();
            // Create a new appointment object
            var newAppointment = {
                title: "New Appointment",
                start: oStartDate,
                end: oEndDate,
                info: "",
                type: "Type01",
                category: "Appointment",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "In-person",
                organizerStatus: "sent",
                attendeeStatus: "accepted",
                isNew: true // Flag to indicate it's a new appointment
            };
            // Set the selected event in the view model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", newAppointment);
            // Open the event details fragment
            this._openEventDetailsPopover(oEvent.getParameter("domRef"));
            MessageToast.show("New Appointment is created at \n" + oStartDate + "\n and end at \n" + oEndDate + ".");
        },

        isAppointmentOverlap: function (oEvent, oCalendarRow) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                bAppointmentOverlapped;
            if (this.getUserRole() === this.roles.manager) {
                bAppointmentOverlapped = oCalendarRow.getAppointments().some(function (oCurrentAppointment) {
                    if (oCurrentAppointment === oAppointment) {
                        return;
                    }
                    var oAppStartTime = oCurrentAppointment.getStartDate().getTime(),
                        oAppEndTime = oCurrentAppointment.getEndDate().getTime();
                    if (oAppStartTime <= oStartDate.getTime() && oStartDate.getTime() < oAppEndTime) {
                        return true;
                    }
                    if (oAppStartTime < oEndDate.getTime() && oEndDate.getTime() <= oAppEndTime) {
                        return true;
                    }
                    if (oStartDate.getTime() <= oAppStartTime && oAppStartTime < oEndDate.getTime()) {
                        return true;
                    }
                });
            }
            return bAppointmentOverlapped;
        },

        // Toolbar and UI functionality
        onTodayPress: function () {
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/startDate", UI5Date.getInstance());
            MessageToast.show("Navigated to today");
        },

        onViewSelectPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oViewPopover = this.byId("viewPopover");
            // Close other popovers
            this.byId("filterPopover").close();
            this.byId("newEventPopover").close();
            this.byId("eventDetailsPopover").close();
            // Toggle view popover
            if (!oViewPopover.isOpen()) {
                oViewPopover.openBy(oButton);
            } else {
                oViewPopover.close();
            }
        },

        onFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oFilterPopover = this.byId("filterPopover");
            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("newEventPopover").close();
            this.byId("eventDetailsPopover").close();
            // Toggle filter popover
            if (!oFilterPopover.isOpen()) {
                oFilterPopover.openBy(oButton);
            } else {
                oFilterPopover.close();
            }
        },

        onNewEventPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oNewEventPopover = this.byId("newEventPopover");
            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("filterPopover").close();
            this.byId("eventDetailsPopover").close();
            // Toggle new event popover
            if (!oNewEventPopover.isOpen()) {
                oNewEventPopover.openBy(oButton);
            } else {
                oNewEventPopover.close();
            }
        },

        onNotificationPress: function () {
            MessageToast.show("No new notifications");
        },

        // Work week menu functionality
        onWorkWeekMenuPress: function (oEvent) {
            var oViewModel = this.getView().getModel("view");
            var bMenuOpen = oViewModel.getProperty("/workWeekMenuOpen");
            // Toggle the menu visibility
            oViewModel.setProperty("/workWeekMenuOpen", !bMenuOpen);
            // Update the arrow icon direction
            var oButton = this.byId("_IDGenWorkWeekButton");
            oButton.setIcon(!bMenuOpen ? "sap-icon://slim-arrow-down" : "sap-icon://slim-arrow-right");
        },

        // Time scale dropdown change handler
        onTimeScaleChange: function (oEvent) {
            var oViewModel = this.getView().getModel("view");
            var oSource = oEvent.getSource();
            var sSelectedKey = oSource.getSelectedKey();
            // Extract the number of minutes from the selected key
            var iMinutes = parseInt(sSelectedKey);
            // Update the model
            oViewModel.setProperty("/timeScale", iMinutes + " minutes");
            oViewModel.setProperty("/timeScaleMinutes", iMinutes);
            // Get current days to show
            var iDays = oViewModel.getProperty("/daysToShow");
            // Update the button text to show both days and time scale
            var oButton = this.byId("viewSelectButton");
            oButton.setText("Work week (" + iDays + " days, " + iMinutes + " min)");
            // Update the calendar's time scale
            this._updateTimeScale(iMinutes);
            // Make sure we're in Work week view
            var oCalendar = this.byId("calendar");
            oCalendar.setViewKey("Workweek");
            oViewModel.setProperty("/currentView", "Work week");
            MessageToast.show("Time scale changed to: " + iMinutes + " minutes");
        },

        // Days to show dropdown change handler
        onDaysToShowChange: function (oEvent) {
            var oViewModel = this.getView().getModel("view");
            var oSource = oEvent.getSource();
            var iDays = parseInt(oSource.getSelectedKey());
            // Update the model
            oViewModel.setProperty("/daysToShow", iDays);
            // Get current time scale
            var sTimeScale = oViewModel.getProperty("/timeScale");
            var iMinutes = parseInt(sTimeScale.match(/\d+/)[0]);
            // Update the button text to show both days and time scale
            var oButton = this.byId("viewSelectButton");
            oButton.setText("Work week (" + iDays + " days, " + iMinutes + " min)");
            // Update the work week view
            this._updateWorkWeekView(iDays);
            // Make sure we're in Work week view
            var oCalendar = this.byId("calendar");
            oCalendar.setViewKey("Workweek");
            oViewModel.setProperty("/currentView", "Work week");
            MessageToast.show("Work week now shows " + iDays + " days");
        },

        // Days dropdown change handler (main view selection)
        onDaysChange: function (oEvent) {
            var oSource = oEvent.getSource();
            var iDays = parseInt(oSource.getSelectedKey());
            // Update the model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/daysToShow", iDays);
            // Set the current view to Work week
            oViewModel.setProperty("/currentView", "Work week");
            // Update the button text
            var oButton = this.byId("viewSelectButton");
            var sTimeScale = oViewModel.getProperty("/timeScale");
            var iMinutes = parseInt(sTimeScale.match(/\d+/)[0]);
            oButton.setText("Work week (" + iDays + " days, " + iMinutes + " min)");
            // Update the calendar
            var oCalendar = this.byId("calendar");
            oCalendar.setViewKey("Workweek");
            // Update the work week view
            this._updateWorkWeekView(iDays);
            // Close the popover
            this.byId("viewPopover").close();
            MessageToast.show("Work week now shows " + iDays + " days");
        },

        onViewSelected: function (oEvent) {
            var sSelectedView = oEvent.getParameter("listItem").getTitle();
            var oButton = this.byId("viewSelectButton");
            var oCalendar = this.byId("calendar");
            var oViewModel = this.getView().getModel("view");
            // Close the popover first
            this.byId("viewPopover").close();
            // Handle regular view selection
            if (sSelectedView === "Work week") {
                oButton.setText(sSelectedView);
                oViewModel.setProperty("/currentView", sSelectedView);
                // Update calendar view
                oCalendar.setViewKey("Workweek");
                // Get current settings
                var iDaysToShow = oViewModel.getProperty("/daysToShow");
                var sTimeScale = oViewModel.getProperty("/timeScale");
                var iMinutes = parseInt(sTimeScale.match(/\d+/)[0]);
                // Update button text to show both days and time scale
                oButton.setText("Work week (" + iDaysToShow + " days, " + iMinutes + " min)");
                // Update the work week view and time scale
                this._updateWorkWeekView(iDaysToShow);
                this._updateTimeScale(iMinutes);
                MessageToast.show("View changed to: " + sSelectedView);
            } else if (sSelectedView === "Week") {
                oButton.setText(sSelectedView);
                oViewModel.setProperty("/currentView", sSelectedView);
                // Update calendar view
                oCalendar.setViewKey("Week");
                // Force refresh to ensure proper rendering
                oCalendar.rerender();
                MessageToast.show("View changed to: " + sSelectedView);
            } else if (sSelectedView === "Month") {
                oButton.setText(sSelectedView);
                oViewModel.setProperty("/currentView", sSelectedView);
                // Update calendar view
                oCalendar.setViewKey("Month");
                // Force refresh to ensure proper rendering
                oCalendar.rerender();
                MessageToast.show("View changed to: " + sSelectedView);
            } else if (sSelectedView === "Split view") {
                MessageToast.show("Split view feature coming soon");
            }
        },

        _switchCalendarView: function (sViewKey) {
            var oCalendar = this.byId("calendar");
            var oViewModel = this.getView().getModel("view");
            // Set the view key
            oCalendar.setViewKey(sViewKey);
            // Update the current view in the model
            oViewModel.setProperty("/currentView", sViewKey);
            // Force a rerender to ensure proper display
            oCalendar.rerender();
        },

        _updateTimeScale: function (iMinutes) {
            var oCalendar = this.byId("calendar");
            var oViewModel = this.getView().getModel("view");
            var sCurrentView = oViewModel;

            // Only update time scale for Day and Work week views
            if (sCurrentView === "Day" || sCurrentView === "Work week") {
                var oView = oCalendar.getViews().find(function (view) {
                    return view.getKey() === (sCurrentView === "Work week" ? "Workweek" : sCurrentView);
                });

                if (oView) {
                    // Calculate the number of intervals based on the selected minutes
                    var iTotalMinutes = 24 * 60; // 24 hours in minutes
                    var iIntervals = iTotalMinutes / iMinutes;

                    // Update the view settings
                    oView.setIntervalsS(iIntervals);
                    oView.setIntervalsM(iIntervals);
                    oView.setIntervalsL(iIntervals);
                    oView.setIntervalType("Minute"); // Use string value directly

                    // Refresh the calendar
                    oCalendar.rerender();
                }
            }
        },

        _updateWorkWeekView: function (iDays) {
            var oCalendar = this.byId("calendar");
            var oView = oCalendar.getViews().find(function (view) {
                return view.getKey() === "Workweek";
            });

            if (oView) {
                // Update the number of days to show
                oView.setIntervalsS(iDays);
                oView.setIntervalsM(iDays);
                oView.setIntervalsL(iDays);

                // Refresh the calendar
                oCalendar.rerender();
            }
        },

        onSavedViewsPress: function () {
            MessageToast.show("Saved views feature coming soon");
        },

        onNewEventTypeSelected: function (oEvent) {
            var sEventType = oEvent.getSource().getTitle();
            this.byId("newEventPopover").close();

            if (sEventType === "Channel meeting") {
                this._openChannelMeetingDialog();
            } else if (sEventType === "Event") {
                this._openRemarksDialog();
            } else if (sEventType === "Virtual appointment") {
                this._openVirtualAppointmentDialog();
            } else {
                MessageToast.show("Creating new: " + sEventType);
            }
        },

        // Open the Channel Meeting Dialog
        _openChannelMeetingDialog: function () {
            // Reset status properties
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/attendeeStatus/requiredAttendeesStatus", "");
            oViewModel.setProperty("/attendeeStatus/optionalAttendeesStatus", "");

            if (!this._oChannelMeetingDialog) {
                Fragment.load({
                    id: this.getView().getId(),
                    name: "com.capexrevex.capexrevex.view.Fragments.ChannelMeetingDialog",
                    controller: this
                }).then(function (oDialog) {
                    this._oChannelMeetingDialog = oDialog;
                    this.getView().addDependent(this._oChannelMeetingDialog);

                    // Set default values for new channel meeting
                    this._setDefaultChannelMeetingValues();

                    // Set the models for the fragment
                    this._oChannelMeetingDialog.setModel(this.getView().getModel());
                    this._oChannelMeetingDialog.setModel(this.getView().getModel("attendees"), "attendees");

                    this._oChannelMeetingDialog.open();
                }.bind(this)).catch(function (oError) {
                    MessageToast.show("Error loading dialog: " + oError.message);
                });
            } else {
                // Set default values for the meeting
                this._setDefaultChannelMeetingValues();

                // Set the models for the fragment
                this._oChannelMeetingDialog.setModel(this.getView().getModel());
                this._oChannelMeetingDialog.setModel(this.getView().getModel("attendees"), "attendees");

                this._oChannelMeetingDialog.open();
            }
        },

        // Open the Virtual Appointment Dialog
        _openVirtualAppointmentDialog: function () {
            if (!this._oVirtualAppointmentDialog) {
                Fragment.load({
                    id: this.getView().getId(),
                    name: "com.capexrevex.capexrevex.view.Fragments.VirtualAppointmentDialog",
                    controller: this
                }).then(function (oDialog) {
                    this._oVirtualAppointmentDialog = oDialog;
                    this.getView().addDependent(this._oVirtualAppointmentDialog);

                    // Set default values for virtual appointment
                    this._setDefaultVirtualAppointmentValues();

                    // Set the model for the fragment
                    this._oVirtualAppointmentDialog.setModel(this.getView().getModel());
                    this._oVirtualAppointmentDialog.setModel(this.getView().getModel("attendees"), "attendees");

                    this._oVirtualAppointmentDialog.open();
                }.bind(this)).catch(function (oError) {
                    MessageToast.show("Error loading dialog: " + oError.message);
                });
            } else {
                // Set default values for the appointment
                this._setDefaultVirtualAppointmentValues();

                // Set the model for the fragment
                this._oVirtualAppointmentDialog.setModel(this.getView().getModel());
                this._oVirtualAppointmentDialog.setModel(this.getView().getModel("attendees"), "attendees");

                this._oVirtualAppointmentDialog.open();
            }
        },

        _setDefaultChannelMeetingValues: function () {
            // Set default date and time to current time
            var oNow = UI5Date.getInstance();
            var oStart = UI5Date.getInstance(oNow);

            // Round to nearest 30 minutes
            var minutes = oStart.getMinutes();
            if (minutes < 15) {
                oStart.setMinutes(0);
            } else if (minutes < 45) {
                oStart.setMinutes(30);
            } else {
                oStart.setHours(oStart.getHours() + 1);
                oStart.setMinutes(0);
            }

            var oEnd = UI5Date.getInstance(oStart);
            oEnd.setMinutes(oEnd.getMinutes() + 30);

            // Set values in the dialog if it exists
            if (this._oChannelMeetingDialog) {
                var oStartDate = Fragment.byId(this.getView().getId(), "startDate");
                var oStartTime = Fragment.byId(this.getView().getId(), "startTime");
                var oEndDate = Fragment.byId(this.getView().getId(), "endDate");
                var oEndTime = Fragment.byId(this.getView().getId(), "endTime");

                if (oStartDate) oStartDate.setDateValue(oStart);
                if (oStartTime) oStartTime.setDateValue(oStart);
                if (oEndDate) oEndDate.setDateValue(oEnd);
                if (oEndTime) oEndTime.setDateValue(oEnd);
            }
        },

        _setDefaultVirtualAppointmentValues: function () {
            // Set default date and time to current time
            var oNow = UI5Date.getInstance();
            var oStart = UI5Date.getInstance(oNow);

            // Round to nearest 30 minutes
            var minutes = oStart.getMinutes();
            if (minutes < 15) {
                oStart.setMinutes(0);
            } else if (minutes < 45) {
                oStart.setMinutes(30);
            } else {
                oStart.setHours(oStart.getHours() + 1);
                oStart.setMinutes(0);
            }

            var oEnd = UI5Date.getInstance(oStart);
            oEnd.setMinutes(oEnd.getMinutes() + 30);

            // Set default status values
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent/internalAttendeeStatus", "");

            // Set values in the dialog if it exists
            if (this._oVirtualAppointmentDialog) {
                var oStartDate = Fragment.byId(this.getView().getId(), "virtualStartDate");
                var oStartTime = Fragment.byId(this.getView().getId(), "virtualStartTime");
                var oEndDate = Fragment.byId(this.getView().getId(), "virtualEndDate");
                var oEndTime = Fragment.byId(this.getView().getId(), "virtualEndTime");

                if (oStartDate) oStartDate.setDateValue(oStart);
                if (oStartTime) {
                    oStartTime.setDateValue(oStart);
                    // Set minutes step based on current time scale
                    var oViewModel = this.getView().getModel("view");
                    var iMinutes = oViewModel.getProperty("/timeScaleMinutes");
                    oStartTime.setMinutesStep(iMinutes);
                }
                if (oEndDate) oEndDate.setDateValue(oEnd);
                if (oEndTime) {
                    oEndTime.setDateValue(oEnd);
                    // Set minutes step based on current time scale
                    var oViewModel = this.getView().getModel("view");
                    var iMinutes = oViewModel.getProperty("/timeScaleMinutes");
                    oEndTime.setMinutesStep(iMinutes);
                }

                // Set default recurrence to "none"
                var oRecurrenceSelect = Fragment.byId(this.getView().getId(), "virtualRecurrence");
                if (oRecurrenceSelect) {
                    oRecurrenceSelect.setSelectedKey("none");
                }
            }
        },

        // Save Channel Meeting
        onSaveChannelMeeting: function () {
            try {
                // Get values from the dialog
                var sTitle = Fragment.byId(this.getView().getId(), "meetingTitle").getValue();

                // Get required attendees
                var oRequiredAttendees = Fragment.byId(this.getView().getId(), "requiredAttendees");
                var aRequiredTokens = oRequiredAttendees.getTokens();
                var sRequiredAttendees = aRequiredTokens.map(function (oToken) {
                    return oToken.getKey();
                }).join("; ");

                // Get optional attendees
                var oOptionalAttendees = Fragment.byId(this.getView().getId(), "optionalAttendees");
                var aOptionalTokens = oOptionalAttendees.getTokens();
                var sOptionalAttendees = aOptionalTokens.map(function (oToken) {
                    return oToken.getKey();
                }).join("; ");

                // Get date and time values properly
                var oStartDateControl = Fragment.byId(this.getView().getId(), "startDate");
                var oStartTimeControl = Fragment.byId(this.getView().getId(), "startTime");
                var oEndDateControl = Fragment.byId(this.getView().getId(), "endDate");
                var oEndTimeControl = Fragment.byId(this.getView().getId(), "endTime");

                var oStartDate = oStartDateControl ? oStartDateControl.getDateValue() : null;
                var oStartTime = oStartTimeControl ? oStartTimeControl.getDateValue() : null;
                var oEndDate = oEndDateControl ? oEndDateControl.getDateValue() : null;
                var oEndTime = oEndTimeControl ? oEndTimeControl.getDateValue() : null;

                var bAllDay = Fragment.byId(this.getView().getId(), "allDayCheckbox").getSelected();
                var sChannel = Fragment.byId(this.getView().getId(), "channelInput").getValue();
                var sLocation = Fragment.byId(this.getView().getId(), "locationInput").getValue();
                var bOnlineMeeting = Fragment.byId(this.getView().getId(), "onlineMeetingCheckbox").getSelected();
                var sDetails = Fragment.byId(this.getView().getId(), "meetingDetails").getValue();
                var sAgenda = Fragment.byId(this.getView().getId(), "meetingAgenda").getValue();

                // Validate required fields
                if (!sTitle) {
                    MessageToast.show("Please enter a title for the meeting");
                    return;
                }

                // Validate date controls exist
                if (!oStartDate || !oEndDate) {
                    MessageToast.show("Please select valid dates");
                    return;
                }

                // Combine date and time
                var oStart = new Date(oStartDate);
                if (!bAllDay && oStartTime) {
                    oStart.setHours(oStartTime.getHours(), oStartTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oStart.setHours(0, 0, 0, 0);
                }

                var oEnd = new Date(oEndDate);
                if (!bAllDay && oEndTime) {
                    oEnd.setHours(oEndTime.getHours(), oEndTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oEnd.setHours(23, 59, 59, 999);
                }

                // Validate that end time is after start time
                if (oEnd <= oStart) {
                    MessageToast.show("End time must be after start time");
                    return;
                }

                // Create the new appointment object
                var newAppointment = {
                    start: oStart,
                    end: oEnd,
                    title: sTitle,
                    info: "Channel: " + sChannel + (sLocation ? " | Location: " + sLocation : ""),
                    type: "Type01",
                    pic: "sap-icon://group",
                    requiredAttendees: sRequiredAttendees,
                    optionalAttendees: sOptionalAttendees,
                    details: sDetails,
                    agenda: sAgenda,
                    allDay: bAllDay,
                    onlineMeeting: bOnlineMeeting,
                    category: "Meeting",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: bOnlineMeeting ? "Virtual" : "In-person",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted"
                };

                // Get the model and add the new appointment to the first person's calendar
                var oModel = this.getView().getModel();
                var aPeople = oModel.getProperty("/people");

                if (aPeople && aPeople.length > 0) {
                    // Add to the first person's appointments
                    aPeople[0].appointments.push(newAppointment);

                    // Update the model
                    oModel.setProperty("/people", aPeople);

                    // Show success message
                    MessageToast.show("Channel meeting '" + sTitle + "' has been created");

                    // Close the dialog
                    this._oChannelMeetingDialog.close();

                    // Refresh the calendar to show the new appointment
                    this.byId("calendar").getBinding("rows").refresh(true);
                } else {
                    MessageToast.show("Error: Could not find calendar to add meeting");
                }
            } catch (error) {
                console.error("Error saving channel meeting:", error);
                MessageToast.show("Error creating meeting. Please try again.");
            }
        },

        // Save Virtual Appointment
        onSaveVirtualAppointment: function () {
            try {
                var oViewModel = this.getView().getModel("view");
                var sTitle = Fragment.byId(this.getView().getId(), "virtualTitle").getValue();
                var sGuestName = Fragment.byId(this.getView().getId(), "guestName").getValue();
                var sGuestEmail = Fragment.byId(this.getView().getId(), "guestEmail").getValue();

                var oInternalAttendees = Fragment.byId(this.getView().getId(), "internalAttendees");
                var aInternalTokens = oInternalAttendees.getTokens();
                var sInternalAttendees = aInternalTokens.map(function (oToken) {
                    return oToken.getKey();
                }).join("; ");

                var oStartDateControl = Fragment.byId(this.getView().getId(), "virtualStartDate");
                var oStartTimeControl = Fragment.byId(this.getView().getId(), "virtualStartTime");
                var oEndDateControl = Fragment.byId(this.getView().getId(), "virtualEndDate");
                var oEndTimeControl = Fragment.byId(this.getView().getId(), "virtualEndTime");

                var oStartDate = oStartDateControl.getDateValue();
                var oStartTime = oStartTimeControl.getDateValue();
                var oEndDate = oEndDateControl.getDateValue();
                var oEndTime = oEndTimeControl.getDateValue();

                var bAllDay = Fragment.byId(this.getView().getId(), "virtualAllDay").getSelected();
                var sLocation = Fragment.byId(this.getView().getId(), "virtualLocation").getValue();
                var sPresenterOptions = Fragment.byId(this.getView().getId(), "presenterOptions").getSelectedKey();
                var bRecordAutomatically = Fragment.byId(this.getView().getId(), "recordAutomatically").getSelected();
                var sMeetingChat = Fragment.byId(this.getView().getId(), "meetingChat").getSelectedKey();
                var sMessage = Fragment.byId(this.getView().getId(), "virtualMessage").getValue();

                if (!sTitle) {
                    MessageToast.show("Please enter a title for the appointment");
                    return;
                }

                if (!sGuestName || !sGuestEmail) {
                    MessageToast.show("Please enter guest name and email");
                    return;
                }

                if (!oStartDate || !oEndDate) {
                    MessageToast.show("Please select valid dates");
                    return;
                }

                var oStart = new Date(oStartDate);
                if (!bAllDay && oStartTime) {
                    oStart.setHours(oStartTime.getHours(), oStartTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oStart.setHours(0, 0, 0, 0);
                }

                var oEnd = new Date(oEndDate);
                if (!bAllDay && oEndTime) {
                    oEnd.setHours(oEndTime.getHours(), oEndTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oEnd.setHours(23, 59, 59, 999);
                }

                if (oEnd <= oStart) {
                    MessageToast.show("End time must be after start time");
                    return;
                }

                var newAppointment = {
                    start: oStart,
                    end: oEnd,
                    title: sTitle,
                    info: "Virtual Appointment with " + sGuestName + " (" + sGuestEmail + ")",
                    type: "Type01",
                    pic: "sap-icon://video",
                    internalAttendees: sInternalAttendees,
                    location: sLocation,
                    presenterOptions: sPresenterOptions,
                    recordAutomatically: bRecordAutomatically,
                    meetingChat: sMeetingChat,
                    message: sMessage,
                    allDay: bAllDay,
                    isVirtual: true,
                    category: "Appointment",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: "Virtual",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted"
                };

                var oModel = this.getView().getModel();
                var aPeople = oModel.getProperty("/people");

                if (aPeople && aPeople.length > 0) {
                    aPeople[0].appointments.push(newAppointment);
                    oModel.setProperty("/people", aPeople);
                    MessageToast.show("Virtual appointment '" + sTitle + "' has been created");

                    // Refresh calendar to show the new appointment
                    this.byId("calendar").getBinding("rows").refresh(true);
                } else {
                    MessageToast.show("Error: Could not find calendar to add appointment");
                }

                if (this._oVirtualAppointmentDialog) {
                    this._oVirtualAppointmentDialog.close();
                }
            } catch (error) {
                console.error("Error saving virtual appointment:", error);
                MessageToast.show("Error creating appointment. Please try again.");
            }
        },

        // Cancel Channel Meeting
        onCancelChannelMeeting: function () {
            // Close the dialog without saving
            if (this._oChannelMeetingDialog) {
                this._oChannelMeetingDialog.close();
            }
            MessageToast.show("Channel meeting creation cancelled");
        },

        // Cancel Virtual Appointment
        onCancelVirtualAppointment: function () {
            // Close the dialog without saving
            if (this._oVirtualAppointmentDialog) {
                this._oVirtualAppointmentDialog.close();
            }
            MessageToast.show("Virtual appointment creation cancelled");
        },

        // Add additional guest
        onAddGuest: function () {
            MessageToast.show("Additional guest feature coming soon");
        },

        // Handle All Day checkbox changes
        onAllDayChange: function (oEvent) {
            var bAllDay = oEvent.getParameter("state");
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent/allDay", bAllDay);

            if (bAllDay) {
                var oStart = new Date(oViewModel.getProperty("/selectedEvent/start"));
                oStart.setHours(0, 0, 0, 0);
                oViewModel.setProperty("/selectedEvent/start", oStart);

                var oEnd = new Date(oViewModel.getProperty("/selectedEvent/end"));
                oEnd.setHours(23, 59, 59, 999);
                oViewModel.setProperty("/selectedEvent/end", oEnd);
            } else {
                var oStart = new Date(oViewModel.getProperty("/selectedEvent/start"));
                if (oStart.getHours() === 0) {
                    oStart.setHours(10, 0, 0, 0);
                }
                oViewModel.setProperty("/selectedEvent/start", oStart);

                var oEnd = new Date(oViewModel.getProperty("/selectedEvent/end"));
                if (oEnd.getHours() === 23) {
                    oEnd.setHours(10, 30, 0, 0);
                }
                oViewModel.setProperty("/selectedEvent/end", oEnd);
            }
        },

        onStartDateChange: function (oEvent) {
            var oDate = oEvent.getSource().getDateValue();
            if (!oDate) return;

            var oViewModel = this.getView().getModel("view");
            var oStart = new Date(oViewModel.getProperty("/selectedEvent/start"));
            oStart.setFullYear(oDate.getFullYear(), oDate.getMonth(), oDate.getDate());
            oViewModel.setProperty("/selectedEvent/start", oStart);
        },

        onStartTimeChange: function (oEvent) {
            var oTime = oEvent.getSource().getDateValue();
            if (!oTime) return;

            var oViewModel = this.getView().getModel("view");
            var oStart = new Date(oViewModel.getProperty("/selectedEvent/start"));
            oStart.setHours(oTime.getHours(), oTime.getMinutes(), 0, 0);
            oViewModel.setProperty("/selectedEvent/start", oStart);
        },

        onEndDateChange: function (oEvent) {
            var oDate = oEvent.getSource().getDateValue();
            if (!oDate) return;

            var oViewModel = this.getView().getModel("view");
            var oEnd = new Date(oViewModel.getProperty("/selectedEvent/end"));
            oEnd.setFullYear(oDate.getFullYear(), oDate.getMonth(), oDate.getDate());
            oViewModel.setProperty("/selectedEvent/end", oEnd);
        },

        onEndTimeChange: function (oEvent) {
            var oTime = oEvent.getSource().getDateValue();
            if (!oTime) return;

            var oViewModel = this.getView().getModel("view");
            var oEnd = new Date(oViewModel.getProperty("/selectedEvent/end"));
            oEnd.setHours(oTime.getHours(), oTime.getMinutes(), 0, 0);
            oViewModel.setProperty("/selectedEvent/end", oEnd);
        },

        onMoreOptionsPress: function () {
            MessageToast.show("More options coming soon");
        },

        // Modified onAppointmentSelect method
        onAppointmentSelect: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment");
            var oBindingContext = oAppointment.getBindingContext();

            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("filterPopover").close();
            this.byId("newEventPopover").close();

            // Get appointment data
            var oAppointmentData = oBindingContext.getObject();

            // Extract attendees from appointment
            var aAttendees = this._extractAttendeesFromAppointment(oAppointmentData);
            var sTitle = oAppointmentData.title;
            if (sTitle === "new appointment") {
                sTitle = "";
            }

            // Update selected event in model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", {
                title: sTitle,
                start: oAppointmentData.start,
                end: oAppointmentData.end,
                location: oAppointmentData.info || "",
                description: oAppointmentData.description || "",
                allDay: oAppointmentData.allDay || false,
                attendees: aAttendees,
                meetingLink: oAppointmentData.meetingLink || ""
            });
            oViewModel.setProperty("/selectedEventPath", oBindingContext.getPath());

            // Open event details popover using the new fragment
            this._openEventDetailsPopover(oEvent.getParameter("domRef"));
        },

        // Modified onIntervalSelect method
        onIntervalSelect: function (oEvent) {
            var oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                oRow = oEvent.getParameter("row"),
                oModel = this.getView().getModel(),
                oAppointment = {
                    start: oStartDate,
                    end: oEndDate,
                    title: "new appointment",
                    info: "",
                    type: "Type01",
                    location: "",
                    description: "",
                    allDay: false,
                    attendees: "",
                    category: "Appointment",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: "In-person",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted"
                };
            var oRowContext = oRow.getBindingContext();
            var sPath = oRowContext.getPath() + "/appointments";
            var aAppointments = oModel.getProperty(sPath) || [];
            aAppointments.push(oAppointment);
            oModel.setProperty(sPath, aAppointments);
            MessageToast.show("New appointment created. Click on it to edit.");
        },

        // Add this method to open the event details popover
        _openEventDetailsPopover: function (oSource) {
            var that = this;

            // Load the fragment if not already loaded
            if (!this._oEventDetailsPopover) {
                Fragment.load({
                    id: this.getView().getId(),
                    name: "com.capexrevex.capexrevex.view.Fragments.EventDetailsDialog",
                    controller: this
                }).then(function (oPopover) {
                    that._oEventDetailsPopover = oPopover;
                    that.getView().addDependent(that._oEventDetailsPopover);

                    // Set the model for the fragment
                    that._oEventDetailsPopover.setModel(that.getView().getModel("view"), "view");
                    that._oEventDetailsPopover.setModel(that.getView().getModel("attendees"), "attendees");

                    that._oEventDetailsPopover.openBy(oSource);

                    // Set attendees tokens after the fragment is rendered
                    setTimeout(function () {
                        that._setAttendeesTokens();
                    }, 100);
                }).catch(function (error) {
                    console.error("Error loading event details fragment:", error);
                    MessageToast.show("Error loading event details");
                });
            } else {
                // Set the model for the fragment
                this._oEventDetailsPopover.setModel(this.getView().getModel("view"), "view");
                this._oEventDetailsPopover.setModel(this.getView().getModel("attendees"), "attendees");

                // Open the popover
                this._oEventDetailsPopover.openBy(oSource);

                // Set attendees tokens
                this._setAttendeesTokens();
            }
        },

        _setAttendeesTokens: function () {
            var oViewModel = this.getView().getModel("view");
            var sAttendees = oViewModel.getProperty("/selectedEvent/attendees") || "";

            // Get the MultiInput control from the fragment
            var oMultiInput = Fragment.byId(this.getView().getId(), "eventAttendees");
            if (!oMultiInput) {
                console.error("MultiInput control not found in fragment");
                return;
            }

            // Clear existing tokens
            oMultiInput.destroyTokens();

            // Parse attendees and create tokens
            var aAttendees = this._parseAttendees(sAttendees);
            aAttendees.forEach(function (oAttendee) {
                var oToken = new Token({
                    key: oAttendee.email,
                    text: oAttendee.name + " (" + oAttendee.email + ")"
                });
                oMultiInput.addToken(oToken);
            });
        },

        // Extract attendees from appointment data
        _extractAttendeesFromAppointment: function (oAppointment) {
            var aAttendees = [];

            // Handle different appointment types
            if (oAppointment.requiredAttendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.requiredAttendees));
            }
            if (oAppointment.optionalAttendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.optionalAttendees));
            }
            if (oAppointment.internalAttendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.internalAttendees));
            }
            if (oAppointment.guestEmail) {
                aAttendees.push({
                    name: oAppointment.guestName || oAppointment.guestEmail,
                    email: oAppointment.guestEmail,
                    status: "Free"
                });
            }
            if (oAppointment.attendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.attendees));
            }

            return aAttendees;
        },

        // Parse attendees string into objects
        _parseAttendees: function (sAttendees) {
            if (!sAttendees) return [];

            if (typeof sAttendees === 'string') {
                return sAttendees.split(';').map(function (sAttendee) {
                    sAttendee = sAttendee.trim();
                    if (sAttendee) {
                        return {
                            name: sAttendee,
                            email: sAttendee,
                            status: "Free"
                        };
                    }
                    return null;
                }).filter(Boolean);
            } else if (Array.isArray(sAttendees)) {
                return sAttendees;
            }

            return [];
        },

        // Modified onSaveEvent method to handle attendees
        onSaveEvent: function () {
            var oViewModel = this.getView().getModel("view");
            var sPath = oViewModel.getProperty("/selectedEventPath");

            // Get values from the fragment controls
            var oTitleControl = Fragment.byId(this.getView().getId(), "eventTitle");
            var oStartDateControl = Fragment.byId(this.getView().getId(), "eventStartDate");
            var oStartTimeControl = Fragment.byId(this.getView().getId(), "eventStartTime");
            var oEndDateControl = Fragment.byId(this.getView().getId(), "eventEndDate");
            var oEndTimeControl = Fragment.byId(this.getView().getId(), "eventEndTime");
            var oLocationControl = Fragment.byId(this.getView().getId(), "eventLocation");
            var oDescriptionControl = Fragment.byId(this.getView().getId(), "eventDescription");
            var oAllDayControl = Fragment.byId(this.getView().getId(), "allDayCheckbox");
            var oAttendeesControl = Fragment.byId(this.getView().getId(), "eventAttendees");

            // Validate controls exist
            if (!oTitleControl || !oStartDateControl || !oStartTimeControl ||
                !oEndDateControl || !oEndTimeControl || !oLocationControl ||
                !oDescriptionControl || !oAllDayControl || !oAttendeesControl) {
                MessageToast.show("Error: Could not find all form controls");
                return;
            }

            // Get values
            var sTitle = oTitleControl.getValue();
            var oStartDate = oStartDateControl.getDateValue();
            var oStartTime = oStartTimeControl.getDateValue();
            var oEndDate = oEndDateControl.getDateValue();
            var oEndTime = oEndTimeControl.getDateValue();
            var sLocation = oLocationControl.getValue();
            var sDescription = oDescriptionControl.getValue();
            var bAllDay = oAllDayControl.getSelected();

            // Get attendees
            var aTokens = oAttendeesControl.getTokens();
            var sAttendees = aTokens.map(function (oToken) {
                return oToken.getKey();
            }).join("; ");

            // Validate required fields
            if (!sTitle) {
                MessageToast.show("Please enter a title for the event");
                return;
            }

            if (!oStartDate || !oEndDate) {
                MessageToast.show("Please enter valid start and end dates");
                return;
            }

            // Combine date and time
            var oStart = new Date(oStartDate);
            if (!bAllDay && oStartTime) {
                oStart.setHours(oStartTime.getHours(), oStartTime.getMinutes(), 0, 0);
            } else if (bAllDay) {
                oStart.setHours(0, 0, 0, 0);
            }

            var oEnd = new Date(oEndDate);
            if (!bAllDay && oEndTime) {
                oEnd.setHours(oEndTime.getHours(), oEndTime.getMinutes(), 0, 0);
            } else if (bAllDay) {
                oEnd.setHours(23, 59, 59, 999);
            }

            // Validate that end time is after start time
            if (oEnd <= oStart) {
                MessageToast.show("End time must be after start time");
                return;
            }

            // Check if this is a new appointment or editing existing one
            if (sPath) {
                // Update existing appointment
                var oModel = this.getView().getModel();
                oModel.setProperty(sPath + "/title", sTitle);
                oModel.setProperty(sPath + "/start", oStart);
                oModel.setProperty(sPath + "/end", oEnd);
                oModel.setProperty(sPath + "/allDay", bAllDay);
                oModel.setProperty(sPath + "/info", sLocation);
                oModel.setProperty(sPath + "/location", sLocation);
                oModel.setProperty(sPath + "/description", sDescription);
                oModel.setProperty(sPath + "/attendees", sAttendees);
                MessageToast.show("Event updated successfully");
            } else {
                // Create new appointment
                var newAppointment = {
                    start: oStart,
                    end: oEnd,
                    title: sTitle,
                    info: sLocation,
                    type: "Type01",
                    category: "Appointment",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: "In-person",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted",
                    attendees: sAttendees,
                    allDay: bAllDay,
                    description: sDescription
                };

                // Add to the first person's appointments
                var oModel = this.getView().getModel();
                var aPeople = oModel.getProperty("/people");
                if (aPeople && aPeople.length > 0) {
                    aPeople[0].appointments.push(newAppointment);
                    oModel.setProperty("/people", aPeople);
                    MessageToast.show("New event '" + sTitle + "' has been created");
                } else {
                    MessageToast.show("Error: Could not find calendar to add event");
                    return;
                }
            }

            // Close the popover
            if (this._oEventDetailsPopover) {
                this._oEventDetailsPopover.close();
            }

            // Refresh the calendar
            this.byId("calendar").getBinding("rows").refresh(true);
        },

        // Modified onDiscardEvent method
        onDiscardEvent: function () {
            // Close the popover without saving
            if (this._oEventDetailsPopover) {
                this._oEventDetailsPopover.close();
            }
            MessageToast.show("Changes discarded");
        },

        // Fragment handling functions
        _openRemarksDialog: function () {
            // Reset status properties
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/attendeeStatus/eventwAttendeesStatus", "");

            if (!this._oRemarksDialog) {
                Fragment.load({
                    id: this.getView().getId(),
                    name: "com.capexrevex.capexrevex.view.Fragments.RemarksDialog",
                    controller: this
                }).then(function (oDialog) {
                    this._oRemarksDialog = oDialog;
                    this.getView().addDependent(this._oRemarksDialog);

                    // Set the models for the fragment
                    this._oRemarksDialog.setModel(this.getView().getModel());
                    this._oRemarksDialog.setModel(this.getView().getModel("attendees"), "attendees");

                    this._oRemarksDialog.open();
                }.bind(this)).catch(function (oError) {
                    MessageToast.show("Error loading dialog: " + oError.message);
                });
            } else {
                // Set the models for the fragment
                this._oRemarksDialog.setModel(this.getView().getModel());
                this._oRemarksDialog.setModel(this.getView().getModel("attendees"), "attendees");

                this._oRemarksDialog.open();
            }

            // Set default values for new event
            var oEventDate = UI5Date.getInstance();
            oEventDate.setHours(16, 0, 0, 0);
            var oEnd = UI5Date.getInstance(oEventDate);
            oEnd.setHours(16, 30, 0, 0);

            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", {
                title: "",
                start: oEventDate,
                end: oEnd,
                info: "",
                type: "Type01",
                icon: "",
                attendees: [],
                attendeeStatus: "", // Initialize attendee status
                isNew: true
            });
        },

        // Update your save function to ensure it works
        onSaveEventFromDialog: function () {
            try {
                var oViewModel = this.getView().getModel("view");
                var sTitle = Fragment.byId(this.getView().getId(), "eventwTitle").getValue();

                // Get attendees from MultiInput
                var oAttendeesInput = Fragment.byId(this.getView().getId(), "eventwAttendees");
                var aTokens = oAttendeesInput.getTokens();
                var sAttendees = aTokens.map(function (oToken) {
                    return oToken.getKey();
                }).join("; ");

                // Validate required fields
                if (!sTitle) {
                    MessageToast.show("Please enter a title for the event");
                    return;
                }

                // Get other form values and create the event
                var newAppointment = {
                    start: oViewModel.getProperty("/selectedEvent/start"),
                    end: oViewModel.getProperty("/selectedEvent/end"),
                    title: sTitle,
                    info: "Event with attendees",
                    type: "Type01",
                    attendees: sAttendees,
                    category: "Appointment",
                    showAs: "Busy"
                };

                // Add to calendar
                var oModel = this.getView().getModel();
                var aPeople = oModel.getProperty("/people");

                if (aPeople && aPeople.length > 0) {
                    aPeople[0].appointments.push(newAppointment);
                    oModel.setProperty("/people", aPeople);

                    // Close dialog
                    if (this._oRemarksDialog) {
                        this._oRemarksDialog.close();
                    }

                    MessageToast.show("Event '" + sTitle + "' has been created");
                    this.byId("calendar").getBinding("rows").refresh(true);
                }
            } catch (error) {
                console.error("Error saving event:", error);
                MessageToast.show("Error creating event");
            }
        },

        onCancelEventFromDialog: function () {
            // Close the dialog without saving
            if (this._oRemarksDialog) {
                this._oRemarksDialog.close();
            }
        },

        onToggleGroupMode: function () {
            var oViewModel = this.getView().getModel("view");
            var sMode = oViewModel.getProperty("/groupMode");
            oViewModel.setProperty("/groupMode", sMode === "Group" ? "None" : "Group");
            this.byId("calendar").rerender();
        },

        // Meet Now functionality
        onMeetNowPress: function () {
            this._openMeetNowDialog();
        },

        // _openMeetNowDialog: function () {
        //     // Create dialog if it doesn't exist
        //     if (!this._oMeetNowDialog) {
        //         // Create meeting name input
        //         var oMeetingNameInput = new Input({
        //             placeholder: "Enter meeting name",
        //             value: "Meeting with Nadeem Abbas",
        //             liveChange: function (oEvent) {
        //                 this._sMeetingName = oEvent.getParameter("value");
        //             }.bind(this)
        //         });

        //         // Create start meeting button
        //         var oStartButton = new Button({
        //             text: "Start meeting",
        //             type: "Emphasized",
        //             press: function () {
        //                 this._startMeeting();
        //             }.bind(this)
        //         });

        //         // Create get link button
        //         var oGetLinkButton = new Button({
        //             text: "Get a link to share",
        //              icon: "sap-icon://chain-link",
        //             press: function () {
        //                 this._getMeetingLink();
        //             }.bind(this)
        //         });

        //         // Create dialog
        //         this._oMeetNowDialog = new Dialog({
        //             title: "Start a meeting now",
        //             content: [
        //                 new Text({ text: "Meeting name" }),
        //                 oMeetingNameInput
        //             ],
        //             beginButton: oStartButton,
        //             endButton: oGetLinkButton,
        //             afterClose: function () {
        //                 // Reset meeting name when dialog closes
        //                 oMeetingNameInput.setValue("Meeting with Nadeem Abbas");
        //             }
        //         });

        //         // Add dialog to view as dependent
        //         this.getView().addDependent(this._oMeetNowDialog);
        //     }

        //     // Open dialog
        //     this._oMeetNowDialog.open();
        // },

        _openMeetNowDialog: function () {
            // Create dialog if it doesn't exist
            if (!this._oMeetNowDialog) {
                // Create meeting name input
                var oMeetingNameInput = new Input({
                    placeholder: "Enter meeting name",
                    value: "Meeting with Nadeem Abbas",
                    liveChange: function (oEvent) {
                        this._sMeetingName = oEvent.getParameter("value");
                    }.bind(this)
                });

                // Create start meeting button
                var oStartButton = new Button({
                    text: "Start meeting",
                    type: "Emphasized",
                    press: function () {
                        this._startMeetingDirect();
                    }.bind(this)
                });

                // Create get link button
                var oGetLinkButton = new Button({
                    text: "Get a link to share",
                    icon: "sap-icon://chain-link",
                    press: function () {
                        this._getMeetingLink();
                    }.bind(this)
                });

                // Create dialog with BOTH buttons
                this._oMeetNowDialog = new Dialog({
                    title: "Start a meeting now",

                    content: [
                        new Text({ text: "Meeting name" }),
                        oMeetingNameInput,
                        new Text({
                            // text: "This will open Microsoft Teams directly with the meeting link.",
                            class: "sapUiSmallMarginTop"
                        })
                    ],
                    beginButton: oStartButton,
                    endButton: oGetLinkButton, // Add the second button here
                    afterClose: function () {
                        // Reset meeting name when dialog closes
                        oMeetingNameInput.setValue("Meeting with Nadeem Abbas");
                    }
                });

                // Add dialog to view as dependent
                this.getView().addDependent(this._oMeetNowDialog);
            }

            // Open dialog
            this._oMeetNowDialog.open();
        },

        // Simplified version that just opens the Teams link
        _startMeetingDirect: function () {
            var meetingName = this._sMeetingName || "Meeting with Nadeem Abbas";

            // The Teams meeting link
            var joinUrl = "https://teams.microsoft.com/l/meetup-join/19%3ameeting_OGI5NmRmNDEtODc0Ni00MGNhLThlNjQtYzAyYTY2NzA5Yzhk%40thread.v2/0?context=%7b%22Tid%22%3a%229b95bc3c-fada-4090-b06b-0f54c08cc340%22%2c%22Oid%22%3a%22bef22b80-5884-4ba0-9774-00c706633cb5%22%7d";

            // Create a simple calendar event
            this._createMeetingEvent(meetingName, joinUrl);

            // Close the dialog
            if (this._oMeetNowDialog) {
                this._oMeetNowDialog.close();
            }

            // Open the Teams link directly
            window.open(joinUrl, "_blank");

            MessageToast.show("Opening Microsoft Teams meeting...");
        },


        _startMeeting: function () {
            var meetingName = this._sMeetingName || "Meeting with Nadeem Abbas";
            var that = this;

            // Prepare meeting payload
            var oNow = UI5Date.getInstance();
            var oStart = UI5Date.getInstance(oNow);
            var oEnd = UI5Date.getInstance(oStart);
            oEnd.setHours(oEnd.getHours() + 1); // 1 hour meeting

            // The correct join link as specified
            var joinUrl = "https://teams.microsoft.com/l/meetup-join/19%3ameeting_OGI5NmRmNDEtODc0Ni00MGNhLThlNjQtYzAyYTY2NzA5Yzhk%40thread.v2/0?context=%7b%22Tid%22%3a%229b95bc3c-fada-4090-b06b-0f54c08cc340%22%2c%22Oid%22%3a%22bef22b80-5884-4ba0-9774-00c706633cb5%22%7d";

            var meetingPayload = {
                subject: meetingName,
                startDateTime: oStart.toISOString(),
                endDateTime: oEnd.toISOString(),
                attendeeEmail: "donotreply@risedx.com", // Default attendee
                organizerEmail: "pushpak.jha@risedx.com", // Organizer email
                joinUrl: joinUrl
            };

            var oModel = this.getView().getModel("scheduling");

            // Show loading message
            sap.m.MessageToast.show("Scheduling meeting...");

            // Call the meetingScheduling endpoint
            oModel.create("/meetingScheduling", meetingPayload, {
                success: function (oData, oResponse) {
                    // Extract joinUrl from the response if available, otherwise use the one we set
                    var responseJoinUrl = (oData.onlineMeeting && oData.onlineMeeting.joinUrl) ? oData.onlineMeeting.joinUrl : joinUrl;

                    // Create a calendar event for the meeting with the join URL
                    that._createMeetingEvent(meetingName, responseJoinUrl);

                    // Close the dialog
                    if (that._oMeetNowDialog) {
                        that._oMeetNowDialog.close();
                    }

                    sap.m.MessageToast.show("Meeting scheduled successfully");

                    // Open the correct meeting link directly for the organizer
                    sap.m.URLHelper.redirect(joinUrl, true);
                },
                error: function (oError) {
                    console.error("Error scheduling meeting:", oError);
                    sap.m.MessageToast.show("Failed to schedule meeting");
                }
            });
        },

        _getMeetingLink: function () {
            // The correct meeting link as specified
            var meetingLink = "https://teams.microsoft.com/l/meetup-join/19%3ameeting_OGI5NmRmNDEtODc0Ni00MGNhLThlNjQtYzAyYTY2NzA5Yzhk%40thread.v2/0?context=%7b%22Tid%22%3a%229b95bc3c-fada-4090-b06b-0f54c08cc340%22%2c%22Oid%22%3a%22bef22b80-5884-4ba0-9774-00c706633cb5%22%7d";

            // Copy to clipboard
            navigator.clipboard.writeText(meetingLink).then(function () {
                MessageToast.show("Meeting link copied to clipboard");
            }).catch(function (err) {
                console.error('Could not copy text: ', err);
                MessageToast.show("Failed to copy link");
            });

            // Close the dialog
            if (this._oMeetNowDialog) {
                this._oMeetNowDialog.close();
            }
        },

        _createMeetingEvent: function (meetingName, meetingLink) {
            var oNow = UI5Date.getInstance();
            var oStart = UI5Date.getInstance(oNow);
            var oEnd = UI5Date.getInstance(oStart);
            oEnd.setHours(oEnd.getHours() + 1); // 1 hour meeting

            var newAppointment = {
                start: oStart,
                end: oEnd,
                title: meetingName,
                info: "Online Meeting",
                type: "Type01",
                pic: "sap-icon://video",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "Virtual",
                organizerStatus: "sent",
                attendeeStatus: "accepted",
                isOnline: true,
                meetingLink: meetingLink || ""
            };

            // Get the model and add the new appointment to the first person's calendar
            var oModel = this.getView().getModel();
            var aPeople = oModel.getProperty("/people");

            if (aPeople && aPeople.length > 0) {
                aPeople[0].appointments.push(newAppointment);
                oModel.setProperty("/people", aPeople);

                // Refresh the calendar to show the new appointment
                this.byId("calendar").getBinding("rows").refresh(true);
            }
        },

        // Join meeting functionality with late join detection
        onJoinMeeting: function () {
            var oViewModel = this.getView().getModel("view");
            var oSelectedEvent = oViewModel.getProperty("/selectedEvent");
            var oNow = UI5Date.getInstance();
            var oEventStart = new Date(oSelectedEvent.start);

            // Calculate time difference in minutes
            var iDiffMinutes = (oNow - oEventStart) / (1000 * 60);

            // Check if user is joining 30+ minutes late
            if (iDiffMinutes > 30) {
                // Create a new event starting now and ending 30 minutes later
                var oNewStart = UI5Date.getInstance(oNow);
                var oNewEnd = UI5Date.getInstance(oNow);
                oNewEnd.setMinutes(oNewEnd.getMinutes() + 30);

                var newAppointment = {
                    start: oNewStart,
                    end: oNewEnd,
                    title: "Follow-up: " + oSelectedEvent.title,
                    info: oSelectedEvent.info || "",
                    type: "Type01",
                    category: "Meeting",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: oSelectedEvent.inPerson || "Virtual",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted",
                    meetingLink: oSelectedEvent.meetingLink || ""
                };

                // Add to the first person's appointments
                var oModel = this.getView().getModel();
                var aPeople = oModel.getProperty("/people");

                if (aPeople && aPeople.length > 0) {
                    aPeople[0].appointments.push(newAppointment);
                    oModel.setProperty("/people", aPeople);
                    MessageToast.show("Created a new follow-up meeting for 30 minutes");
                }

                // Show popup message
                MessageToast.show("The meeting has ended, please join the new meeting.");
            }

            // Open email client with the owner's email address
            var sOwnerEmail = "ankit.jha@sumodigitech.com";
            var sSubject = "Regarding: " + (oSelectedEvent.title || "Meeting");
            var sBody = "Hello,\n\nI'm writing regarding our meeting: " + (oSelectedEvent.title || "Meeting") +
                " scheduled for " + (oEventStart ? oEventStart.toLocaleString() : "the scheduled time") +
                ".\n\nBest regards";

            sap.m.URLHelper.triggerEmail(sOwnerEmail, sSubject, sBody);
        }
    });
});



UPDATED CODE 11

sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/ui/core/date/UI5Date",
    "sap/ui/core/Fragment",
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/m/Token",
    "sap/ui/model/odata/v2/ODataModel",
    "sap/m/Dialog",
    "sap/m/Input",
    "sap/m/Button",
    "sap/m/Text",
    "sap/m/SuggestionItem"
], function (Controller, JSONModel, MessageToast, UI5Date, Fragment, Filter, FilterOperator, Token, ODataModel, Dialog, Input, Button, Text, SuggestionItem) {
    "use strict";
    return Controller.extend("com.capexrevex.capexrevex.controller.View1", {
        onInit: function () {

            // Initialize attendees model with value property
            var oAttendeesModel = new JSONModel({
                value: [] // This will hold the attendees array
            });
            this.getView().setModel(oAttendeesModel, "attendees");

            // Set initial view to Work week
            this.byId("viewSelectButton").setText("Work week");
            // Set initial time scale and days to show
            this._updateTimeScale(30);
            this._updateWorkWeekView(5);
            // Get today's date
            var today = UI5Date.getInstance();
            // Set the calendar to start from today
            var startDate = UI5Date.getInstance(
                today.getFullYear(),
                today.getMonth(),
                today.getDate(),
                8, 0 // Start at 8 AM
            );
            // Initialize the view model with data
            var oViewModel = new JSONModel({
                startDate: startDate,
                people: [
                    {
                        name: "John Doe",
                        role: "Developer",
                        appointments: []
                    }
                ],
                selectedEvent: {
                    title: "",
                    start: UI5Date.getInstance(),
                    end: UI5Date.getInstance(),
                    info: "",
                    type: "Type01",
                    isNew: true // Flag to identify new appointments
                },
                filters: {
                    appointments: true,
                    meetings: true,
                    reservations: false,
                    categories: [],
                    showAs: [],
                    recurrence: [],
                    inPerson: [],
                    organizer: {
                        sent: true,
                        draft: true
                    },
                    attendee: {
                        accepted: true,
                        declined: true,
                        followed: true,
                        tentative: true,
                        canceled: true,
                        notResponded: true
                    }
                },
                currentView: "Work week", // Track the current calendar view
                timeScale: "30 minutes", // Track the current time scale
                daysToShow: 5, // Track the number of days to show in work week view
                workWeekMenuOpen: false, // Track if work week submenu is open
                timeScaleMinutes: 30, // Add numeric value for time scale
                groupMode: "Group", // For group appointment mode
                currentTime: UI5Date.getInstance() // Current system time
            });
            // Create additional model with extended data using UI5Date
            var oModel = new JSONModel();
            oModel.setData({
                startDate: startDate,
                people: [
                    {
                        pic: "sap-icon://hr-approval/",
                        name: "John Miller",
                        role: "team member",
                        appointments: []
                    },
                    {
                        pic: "sap-icon://hr-approval",
                        name: "Donna Moore",
                        role: "team member",
                        appointments: []
                    },
                    {
                        pic: "sap-icon://hr-approval",
                        name: "Alex Johnson",
                        role: "team member",
                        appointments: []
                    },
                    {
                        pic: "sap-icon://hr-approval",
                        name: "Sarah Williams",
                        role: "team member",
                        appointments: []
                    }
                ]
            });
            // Set both models to the view
            this.getView().setModel(oViewModel, "view");
            this.getView().setModel(oModel);
            // Initialize filter arrays
            this._aFilters = [];
            // Update date display in filter popover
            this._updateDateDisplay();
            // Initialize OData model for scheduling service
            // Initialize OData v4 model for scheduling service
            var oSchedulingModel = new ODataModel({
                serviceUrl: "/schedulingservice/", // Ensure this matches your backend service
                synchronizationMode: "None",
                autoExpandSelect: true
            });


            // Add metadata error handling
            oSchedulingModel.attachMetadataFailed(function (oEvent) {
                var oParams = oEvent.getParameters();
                console.error("Metadata loading failed:", oParams);
                MessageToast.show("Error loading service metadata. Check service URL.");
            });
            // Add request failed handler
            oSchedulingModel.attachRequestFailed(function (oEvent) {
                var oParams = oEvent.getParameters();
                console.error("OData request failed:", oParams);
                MessageToast.show("OData request failed: " + (oParams.message || "Unknown error"));
            });

            this.getView().setModel(oSchedulingModel, "scheduling");
            this.getView().setModel(oSchedulingModel, "scheduling");
            // Initialize attendees model// Initialize attendees model with mock data as fallback
            var oAttendeesModel = new JSONModel({
                value: [
                    { name: "Portal Admin", email: "donotreply@risedx.com", status: "Free" },
                    { name: "Pushpak Jha", email: "pushpak.jha@risedx.com", status: "Busy" }
                ]
            });
            this.getView().setModel(oAttendeesModel, "attendees");
            this.getView().setModel(oAttendeesModel, "attendees");
            // Load attendees data
            this._loadAttendees();
            // Set up interval to update current time display every minute
            this._currentTimeInterval = setInterval(this._updateCurrentTime.bind(this), 60000);
            // Initial update of current time
            this._updateCurrentTime();
        },
        // Update current time in the model
        _updateCurrentTime: function () {
            var oNow = UI5Date.getInstance();
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/currentTime", oNow);
        },
        // Load attendees from scheduling service
        // _loadAttendees: function () {
        //     var oSchedulingModel = this.getView().getModel("scheduling");
        //     var oAttendeesModel = this.getView().getModel("attendees");
        //     var that = this;

        //     // Read attendees from OData service
        //     oSchedulingModel.read("/getAttendees", {
        //         success: function (oData) {
        //             if (oData && oData.results) {
        //                 // Transform the data to match our expected structure
        //                 var aAttendees = oData.results.map(function (oAttendee) {
        //                     return {
        //                         name: oAttendee.Name || oAttendee.name || "",
        //                         email: oAttendee.Email || oAttendee.email || "",
        //                         status: oAttendee.Status || oAttendee.status || "Free"
        //                     };
        //                 });

        //                 // Set the value property in the attendees model
        //                 oAttendeesModel.setProperty("/value", aAttendees);

        //                 // Log the loaded attendees for debugging
        //                 console.log("Attendees loaded successfully:", aAttendees.length, "attendees");
        //                 MessageToast.show("Attendees loaded successfully: " + aAttendees.length + " found");
        //             } else {
        //                 MessageToast.show("No attendees found");
        //                 oAttendeesModel.setProperty("/value", []);
        //             }
        //         },
        //         error: function (oError) {
        //             console.error("Error loading attendees:", oError);
        //             MessageToast.show("Error loading attendees from service");
        //             // Fallback to empty array if service fails
        //             oAttendeesModel.setProperty("/value", []);
        //         }
        //     });
        // },

        // Load attendees from scheduling service
        _loadAttendees: function () {
            var oSchedulingModel = this.getView().getModel("scheduling");
            var oAttendeesModel = this.getView().getModel("attendees");
            var that = this;

            // Read attendees from OData service
            oSchedulingModel.read("/getAttendees", {
                success: function (oData) {
                    if (oData && oData.value) { // Use 'value' property as per OData standard
                        // Transform the data to match our expected structure
                        var aAttendees = oData.value.map(function (oAttendee) {
                            return {
                                name: oAttendee.Name || oAttendee.name || "",
                                email: oAttendee.Email || oAttendee.email || "",
                                status: oAttendee.Status || oAttendee.status || "Free"
                            };
                        });

                        // Store in attendees model using /value property
                        oAttendeesModel.setProperty("/value", aAttendees);
                        MessageToast.show("Attendees loaded successfully: " + aAttendees.length + " found");
                    } else {
                        MessageToast.show("No attendees found");
                        oAttendeesModel.setProperty("/value", []);
                    }
                },
                error: function (oError) {
                    console.error("Error loading attendees:", oError);
                    MessageToast.show("Error loading attendees from service");
                    // Fallback to empty array if service fails
                    oAttendeesModel.setProperty("/value", []);
                }
            });
        },
        // Create a new attendee via OData service
        // _createAttendee: function (oNewAttendee) {
        //     var oSchedulingModel = this.getView().getModel("scheduling");
        //     var oAttendeesModel = this.getView().getModel("attendees");
        //     var that = this;

        //     // Create the attendee via OData service
        //     oSchedulingModel.create("/getAttendees", oNewAttendee, {
        //         success: function (oData, oResponse) {
        //             // Refresh the attendees list from backend
        //             that._loadAttendees();
        //             MessageToast.show("Attendee created successfully");
        //         },
        //         error: function (oError) {
        //             console.error("Error creating attendee:", oError);
        //             MessageToast.show("Error creating attendee");
        //         }
        //     });
        // },

        // Create a new attendee via OData service
        _createAttendee: function (oNewAttendee) {
            var oSchedulingModel = this.getView().getModel("scheduling");
            var oAttendeesModel = this.getView().getModel("attendees");
            var that = this;

            // Create the attendee via OData service
            oSchedulingModel.create("/getAttendees", oNewAttendee, {
                success: function (oData, oResponse) {
                    // Refresh the attendees list from backend
                    that._loadAttendees();

                    // Also update local model immediately so UI updates
                    var aAttendees = oAttendeesModel.getProperty("/value") || [];
                    aAttendees.push({
                        name: oNewAttendee.Name || oNewAttendee.name || "",
                        email: oNewAttendee.Email || oNewAttendee.email || "",
                        status: oNewAttendee.Status || oNewAttendee.status || "Free"
                    });
                    oAttendeesModel.setProperty("/value", aAttendees);

                    MessageToast.show("Attendee created successfully");
                },
                error: function (oError) {
                    console.error("Error creating attendee:", oError);
                    MessageToast.show("Error creating attendee");
                }
            });
        },

        // Handle attendee suggestions in MultiInput
        // onAttendeeSuggest: function (oEvent) {
        //     var sTerm = oEvent.getParameter("suggestValue");
        //     var oMultiInput = oEvent.getSource();
        //     var oAttendeesModel = this.getView().getModel("attendees");

        //     if (!oAttendeesModel) {
        //         return;
        //     }

        //     // Get attendees from the model's value property
        //     var aAttendees = oAttendeesModel.getProperty("/value") || [];
        //     var aFilteredAttendees = [];

        //     if (sTerm) {
        //         // Filter attendees based on search term
        //         aFilteredAttendees = aAttendees.filter(function (oAttendee) {
        //             return oAttendee.name.toLowerCase().includes(sTerm.toLowerCase()) ||
        //                    oAttendee.email.toLowerCase().includes(sTerm.toLowerCase());
        //         });
        //     } else {
        //         aFilteredAttendees = aAttendees;
        //     }

        //     // Update suggestion items
        //     oMultiInput.destroySuggestionItems();
        //     aFilteredAttendees.forEach(function (oAttendee) {
        //         // Create a custom suggestion item with name, email, and status
        //         var oSuggestionItem = new SuggestionItem({
        //             key: oAttendee.email,
        //             text: oAttendee.name + " (" + oAttendee.email + ")",
        //             description: oAttendee.status
        //         });

        //         // Set different icons based on status
        //         switch (oAttendee.status.toLowerCase()) {
        //             case "free":
        //                 oSuggestionItem.setIcon("sap-icon://accept");
        //                 break;
        //             case "busy":
        //                 oSuggestionItem.setIcon("sap-icon://busy");
        //                 break;
        //             case "tentative":
        //                 oSuggestionItem.setIcon("sap-icon://question-mark");
        //                 break;
        //             default:
        //                 oSuggestionItem.setIcon("sap-icon://employee");
        //         }

        //         oMultiInput.addSuggestionItem(oSuggestionItem);
        //     });
        // },

        // Handle attendee suggestions in MultiInput
        onAttendeeSuggest: function (oEvent) {
            var sTerm = oEvent.getParameter("suggestValue");
            var oMultiInput = oEvent.getSource();
            var oAttendeesModel = this.getView().getModel("attendees");

            if (!oAttendeesModel) {
                return;
            }

            // Get attendees from the model's value property
            var aAttendees = oAttendeesModel.getProperty("/value") || [];
            var aFilteredAttendees = [];

            if (sTerm) {
                // Filter attendees based on search term
                aFilteredAttendees = aAttendees.filter(function (oAttendee) {
                    return oAttendee.name.toLowerCase().includes(sTerm.toLowerCase()) ||
                        oAttendee.email.toLowerCase().includes(sTerm.toLowerCase());
                });
            } else {
                aFilteredAttendees = aAttendees;
            }

            // Update suggestion items
            oMultiInput.destroySuggestionItems();
            aFilteredAttendees.forEach(function (oAttendee) {
                var oSuggestionItem = new SuggestionItem({
                    key: oAttendee.email,
                    text: oAttendee.name + " (" + oAttendee.email + ")",
                    description: oAttendee.status
                });

                // Set different icons based on status
                switch (oAttendee.status.toLowerCase()) {
                    case "free":
                        oSuggestionItem.setIcon("sap-icon://accept");
                        break;
                    case "busy":
                        oSuggestionItem.setIcon("sap-icon://busy");
                        break;
                    case "tentative":
                        oSuggestionItem.setIcon("sap-icon://question-mark");
                        break;
                    default:
                        oSuggestionItem.setIcon("sap-icon://employee");
                }

                oMultiInput.addSuggestionItem(oSuggestionItem);
            });
        },
        // Handle token addition in MultiInput
        // onAttendeeTokenChange: function (oEvent) {
        //     var oMultiInput = oEvent.getSource();
        //     var sInputValue = oMultiInput.getValue().trim();

        //     if (!sInputValue) {
        //         return;
        //     }

        //     // Check if input is an email or should be treated as search
        //     if (this._isEmailValid(sInputValue)) {
        //         // Check if this email already exists in the attendees model
        //         var oAttendeesModel = this.getView().getModel("attendees");
        //         var aAttendees = oAttendeesModel.getProperty("/value") || [];
        //         var bExists = aAttendees.some(function (oAttendee) {
        //             return oAttendee.email === sInputValue;
        //         });

        //         if (!bExists) {
        //             // Create a new attendee
        //             var oNewAttendee = {
        //                 name: sInputValue.split('@')[0], // Use the part before @ as name
        //                 email: sInputValue,
        //                 status: "Free" // Default status
        //             };
        //             // Create the attendee via OData
        //             this._createAttendee(oNewAttendee);
        //         }

        //         // Create token for the email
        //         var oToken = new Token({
        //             key: sInputValue,
        //             text: sInputValue.split('@')[0] + " (" + sInputValue + ")"
        //         });
        //         oMultiInput.addToken(oToken);
        //         oMultiInput.setValue("");
        //     } else {
        //         // Trigger suggestion for non-email input
        //         this.onAttendeeSuggest(oEvent);
        //     }
        // },

        // Handle token addition in MultiInput
        onAttendeeTokenChange: function (oEvent) {
            var oMultiInput = oEvent.getSource();
            var sInputValue = oMultiInput.getValue().trim();

            if (!sInputValue) {
                return;
            }

            // Check if input is an email or should be treated as search
            if (this._isEmailValid(sInputValue)) {
                // Check if this email already exists in the attendees model
                var oAttendeesModel = this.getView().getModel("attendees");
                var aAttendees = oAttendeesModel.getProperty("/value") || [];
                var bExists = aAttendees.some(function (oAttendee) {
                    return oAttendee.email === sInputValue;
                });

                if (!bExists) {
                    // Create a new attendee
                    var oNewAttendee = {
                        name: sInputValue.split('@')[0],
                        email: sInputValue,
                        status: "Free"
                    };
                    // Create the attendee via OData
                    this._createAttendee(oNewAttendee);
                }

                // Create token for the email
                var oToken = new Token({
                    key: sInputValue,
                    text: sInputValue.split('@')[0] + " (" + sInputValue + ")"
                });
                oMultiInput.addToken(oToken);
                oMultiInput.setValue("");
            } else {
                // Trigger suggestion for non-email input
                this.onAttendeeSuggest(oEvent);
            }
        },
        // Validate email format
        _isEmailValid: function (sEmail) {
            var re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            return re.test(sEmail);
        },
        // Create meeting scheduling
        createMeetingScheduling: function (oMeetingData) {
            var oSchedulingModel = this.getView().getModel("scheduling");
            var that = this;

            oSchedulingModel.create("/meetingScheduling", oMeetingData, {
                success: function (oData) {
                    MessageToast.show("Meeting scheduled successfully!");
                    // Refresh attendees after creating meeting
                    that._loadAttendees();
                    // Add the meeting to the calendar
                    that._addMeetingToCalendar(oData);
                },
                error: function (oError) {
                    console.error("Error scheduling meeting:", oError);
                    MessageToast.show("Failed to schedule meeting");
                    // Fallback: Add to local calendar
                    that._addMeetingToCalendar(oMeetingData);
                }
            });
        },
        // Helper method to add meeting to calendar
        _addMeetingToCalendar: function (oMeetingData) {
            var oModel = this.getView().getModel();
            var aPeople = oModel.getProperty("/people");

            if (aPeople && aPeople.length > 0) {
                var newAppointment = {
                    start: new Date(oMeetingData.StartDateTime),
                    end: new Date(oMeetingData.EndDateTime),
                    title: oMeetingData.MeetingTitle,
                    info: oMeetingData.Location || "Online Meeting",
                    type: "Type01",
                    pic: "sap-icon://group",
                    category: "Meeting",
                    showAs: "Busy",
                    recurrence: oMeetingData.IsRecurring ? "Recurring" : "Non-recurring",
                    inPerson: oMeetingData.IsVirtual ? "Virtual" : "In-person",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted",
                    attendees: oMeetingData.Attendees || []
                };

                aPeople[0].appointments.push(newAppointment);
                oModel.setProperty("/people", aPeople);

                // Refresh calendar
                this.byId("calendar").getBinding("rows").refresh(true);
            }
        },
        // Update date display in filter popover
        _updateDateDisplay: function () {
            var oDateDisplay = this.byId("dateDisplay");
            if (oDateDisplay) {
                var today = UI5Date.getInstance();
                var options = { weekday: 'long', day: 'numeric' };
                var dateText = today.toLocaleDateString('en-US', options);
                oDateDisplay.setText(dateText);
            }
        },
        // Role-based functionality
        roles: {
            donna: "Donna Moore",
            manager: "manager",
            admin: "admin"
        },

        handleRoleChange: function () {
            this.getView().getModel().refresh(true);
        },

        getUserRole: function () {
            return this.roles[this.byId("userRole").getSelectedKey()];
        },

        canModifyAppointments: function (sRole) {
            var sUserRole = this.getUserRole();
            if (sUserRole === this.roles.manager || sUserRole === this.roles.admin || sUserRole === sRole) {
                return true;
            }
            return false;
        },

        // Filter functionality
        onFilterChange: function (oEvent) {
            var sFilterType = oEvent.getSource().getId().replace("Checkbox", "");
            var bSelected = oEvent.getParameter("selected");

            // Update filter model
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            oFilters[sFilterType.toLowerCase()] = bSelected;
            oViewModel.setProperty("/filters", oFilters);

            // Apply filters
            this.applyFilters();
        },

        applyFilters: function () {
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");

            // Clear existing filters
            this._aFilters = [];

            // Apply category filters
            if (!oFilters.appointments) {
                this._aFilters.push(new Filter("category", FilterOperator.NE, "Appointment"));
            }
            if (!oFilters.meetings) {
                this._aFilters.push(new Filter("category", FilterOperator.NE, "Meeting"));
            }
            if (!oFilters.reservations) {
                this._aFilters.push(new Filter("category", FilterOperator.NE, "Reservation"));
            }

            // Apply additional filters based on selected options
            if (oFilters.categories && oFilters.categories.length > 0) {
                this._aFilters.push(new Filter("category", FilterOperator.Contains, oFilters.categories.join("|")));
            }
            if (oFilters.showAs && oFilters.showAs.length > 0) {
                this._aFilters.push(new Filter("showAs", FilterOperator.Contains, oFilters.showAs.join("|")));
            }
            if (oFilters.recurrence && oFilters.recurrence.length > 0) {
                this._aFilters.push(new Filter("recurrence", FilterOperator.Contains, oFilters.recurrence.join("|")));
            }
            if (oFilters.inPerson && oFilters.inPerson.length > 0) {
                this._aFilters.push(new Filter("inPerson", FilterOperator.Contains, oFilters.inPerson.join("|")));
            }

            // Apply organizer filters
            var aOrganizerFilters = [];
            if (oFilters.organizer.sent) {
                aOrganizerFilters.push(new Filter("organizerStatus", FilterOperator.EQ, "sent"));
            }
            if (oFilters.organizer.draft) {
                aOrganizerFilters.push(new Filter("organizerStatus", FilterOperator.EQ, "draft"));
            }
            if (aOrganizerFilters.length > 0) {
                this._aFilters.push(new Filter({
                    filters: aOrganizerFilters,
                    and: false
                }));
            }

            // Apply attendee filters
            var aAttendeeFilters = [];
            if (oFilters.attendee.accepted) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "accepted"));
            }
            if (oFilters.attendee.declined) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "declined"));
            }
            if (oFilters.attendee.followed) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "followed"));
            }
            if (oFilters.attendee.tentative) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "tentative"));
            }
            if (oFilters.attendee.canceled) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "canceled"));
            }
            if (oFilters.attendee.notResponded) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "notResponded"));
            }
            if (aAttendeeFilters.length > 0) {
                this._aFilters.push(new Filter({
                    filters: aAttendeeFilters,
                    and: false
                }));
            }

            // Apply filters to the calendar
            var oCalendar = this.byId("calendar");
            var oBinding = oCalendar.getBinding("rows");
            if (this._aFilters.length > 0) {
                oBinding.filter(this._aFilters);
            } else {
                oBinding.filter([]);
            }

            // Update filter button text
            var oFilterButton = this.byId("_IDGenButton7");
            var iFilterCount = this._aFilters.length;
            oFilterButton.setText(iFilterCount > 0 ? "Filter applied (" + iFilterCount + ")" : "Filter applied");
        },

        // Filter popover handlers
        onAppointmentsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("appointmentsFilterPopover").openBy(oButton);
        },

        onMeetingsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("meetingsFilterPopover").openBy(oButton);
        },

        onReservationsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("reservationsFilterPopover").openBy(oButton);
        },

        onCategoriesFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("categoriesFilterPopover").openBy(oButton);
        },

        onShowAsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("showAsFilterPopover").openBy(oButton);
        },

        onRecurrenceFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("recurrenceFilterPopover").openBy(oButton);
        },

        onInPersonFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("inPersonFilterPopover").openBy(oButton);
        },

        // Organizer and Attendee filter handlers
        onOrganizerFilterPress: function (oEvent) {
            var oOptionsBox = this.byId("organizerOptions");
            oOptionsBox.setVisible(!oOptionsBox.getVisible());
        },

        onAttendeeFilterPress: function (oEvent) {
            var oOptionsBox = this.byId("attendeeOptions");
            oOptionsBox.setVisible(!oOptionsBox.getVisible());
        },

        onOrganizerFilterChange: function (oEvent) {
            var sId = oEvent.getSource().getId();
            var bSelected = oEvent.getParameter("selected");
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");

            // Update the corresponding filter property
            if (sId === "sentCheckbox") {
                oFilters.organizer.sent = bSelected;
            } else if (sId === "draftCheckbox") {
                oFilters.organizer.draft = bSelected;
            }

            oViewModel.setProperty("/filters", oFilters);
            this.applyFilters();
        },

        onAttendeeFilterChange: function (oEvent) {
            var sId = oEvent.getSource().getId();
            var bSelected = oEvent.getParameter("selected");
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");

            // Update the corresponding filter property
            if (sId === "acceptedCheckbox") {
                oFilters.attendee.accepted = bSelected;
            } else if (sId === "declinedCheckbox") {
                oFilters.attendee.declined = bSelected;
            } else if (sId === "followedCheckbox") {
                oFilters.attendee.followed = bSelected;
            } else if (sId === "tentativeCheckbox") {
                oFilters.attendee.tentative = bSelected;
            } else if (sId === "canceledCheckbox") {
                oFilters.attendee.canceled = bSelected;
            } else if (sId === "notRespondedCheckbox") {
                oFilters.attendee.notResponded = bSelected;
            }

            oViewModel.setProperty("/filters", oFilters);
            this.applyFilters();
        },

        onUnselectAllRight: function () {
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");

            // Reset organizer filters
            oFilters.organizer.sent = false;
            oFilters.organizer.draft = false;

            // Reset attendee filters
            oFilters.attendee.accepted = false;
            oFilters.attendee.declined = false;
            oFilters.attendee.followed = false;
            oFilters.attendee.tentative = false;
            oFilters.attendee.canceled = false;
            oFilters.attendee.notResponded = false;

            oViewModel.setProperty("/filters", oFilters);

            // Update the checkboxes
            this.byId("sentCheckbox").setSelected(false);
            this.byId("draftCheckbox").setSelected(false);
            this.byId("acceptedCheckbox").setSelected(false);
            this.byId("declinedCheckbox").setSelected(false);
            this.byId("followedCheckbox").setSelected(false);
            this.byId("tentativeCheckbox").setSelected(false);
            this.byId("canceledCheckbox").setSelected(false);
            this.byId("notRespondedCheckbox").setSelected(false);

            this.applyFilters();
        },

        // Unselect all handlers
        onAppointmentsUnselectAll: function () {
            this._unselectAllCheckboxes("appointmentsFilterList");
        },

        onMeetingsUnselectAll: function () {
            this._unselectAllCheckboxes("meetingsFilterList");
        },

        onReservationsUnselectAll: function () {
            this._unselectAllCheckboxes("reservationsFilterList");
        },

        onCategoriesUnselectAll: function () {
            this._unselectAllCheckboxes("categoriesFilterList");
        },

        onShowAsUnselectAll: function () {
            this._unselectAllCheckboxes("showAsFilterList");
        },

        onRecurrenceUnselectAll: function () {
            this._unselectAllCheckboxes("recurrenceFilterList");
        },

        onInPersonUnselectAll: function () {
            this._unselectAllCheckboxes("inPersonFilterList");
        },

        _unselectAllCheckboxes: function (sListId) {
            var oList = this.byId(sListId);
            var aItems = oList.getItems();

            aItems.forEach(function (oItem) {
                if (oItem.isA("sap.m.CheckBox")) {
                    oItem.setSelected(false);
                }
            });
        },

        // Filter selection handlers
        onAppointmentsFilterSelect: function (oEvent) {
            this._updateFilterArray("appointments", oEvent);
        },

        onMeetingsFilterSelect: function (oEvent) {
            this._updateFilterArray("meetings", oEvent);
        },

        onReservationsFilterSelect: function (oEvent) {
            this._updateFilterArray("reservations", oEvent);
        },

        onCategoriesFilterSelect: function (oEvent) {
            this._updateFilterArray("categories", oEvent);
        },

        onShowAsFilterSelect: function (oEvent) {
            this._updateFilterArray("showAs", oEvent);
        },

        onRecurrenceFilterSelect: function (oEvent) {
            this._updateFilterArray("recurrence", oEvent);
        },

        onInPersonFilterSelect: function (oEvent) {
            this._updateFilterArray("inPerson", oEvent);
        },

        _updateFilterArray: function (sFilterType, oEvent) {
            var sValue = oEvent.getSource().getText();
            var bSelected = oEvent.getParameter("selected");
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");

            if (!oFilters[sFilterType]) {
                oFilters[sFilterType] = [];
            }

            if (bSelected) {
                if (oFilters[sFilterType].indexOf(sValue) === -1) {
                    oFilters[sFilterType].push(sValue);
                }
            } else {
                var iIndex = oFilters[sFilterType].indexOf(sValue);
                if (iIndex !== -1) {
                    oFilters[sFilterType].splice(iIndex, 1);
                }
            }

            oViewModel.setProperty("/filters", oFilters);
            this.applyFilters();
        },

        onClearFilters: function () {
            // Reset all filter checkboxes
            var aCheckBoxIds = [
                "appointmentsCheckbox", "meetingsCheckbox", "reservationsCheckbox"
            ];

            aCheckBoxIds.forEach(function (sId) {
                var oCheckBox = this.byId(sId);
                if (oCheckBox) {
                    oCheckBox.setSelected(sId === "appointmentsCheckbox" || sId === "meetingsCheckbox");
                }
            }.bind(this));

            // Reset organizer and attendee filters
            this.byId("sentCheckbox").setSelected(true);
            this.byId("draftCheckbox").setSelected(true);
            this.byId("acceptedCheckbox").setSelected(true);
            this.byId("declinedCheckbox").setSelected(true);
            this.byId("followedCheckbox").setSelected(true);
            this.byId("tentativeCheckbox").setSelected(true);
            this.byId("canceledCheckbox").setSelected(true);
            this.byId("notRespondedCheckbox").setSelected(true);

            // Reset filter arrays in model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/filters", {
                appointments: true,
                meetings: true,
                reservations: false,
                categories: [],
                showAs: [],
                recurrence: [],
                inPerson: [],
                organizer: {
                    sent: true,
                    draft: true
                },
                attendee: {
                    accepted: true,
                    declined: true,
                    followed: true,
                    tentative: true,
                    canceled: true,
                    notResponded: true
                }
            });

            // Apply empty filters
            this._aFilters = [];
            var oCalendar = this.byId("calendar");
            oCalendar.getBinding("rows").filter([]);

            // Update filter button text
            this.byId("_IDGenButton7").setText("Filter applied");
            MessageToast.show("All filters cleared");
        },

        // Drag and Drop functionality
        handleAppointmentDragEnter: function (oEvent) {
            if (this.isAppointmentOverlap(oEvent, oEvent.getParameter("calendarRow"))) {
                oEvent.preventDefault();
            }
        },

        handleAppointmentDrop: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                oCalendarRow = oEvent.getParameter("calendarRow"),
                bCopy = oEvent.getParameter("copy"),
                sTitle = oAppointment.getTitle(),
                oModel = this.getView().getModel(),
                oAppBindingContext = oAppointment.getBindingContext(),
                oRowBindingContext = oCalendarRow.getBindingContext(),
                handleAppointmentDropBetweenRows = function () {
                    var aPath = oAppBindingContext.getPath().split("/");
                    var iIndex = aPath.pop();
                    var sRowAppointmentsPath = aPath.join("/");
                    oRowBindingContext.getObject().appointments.push(
                        oModel.getProperty(oAppBindingContext.getPath())
                    );
                    oModel.getProperty(sRowAppointmentsPath).splice(iIndex, 1);
                };

            if (bCopy) { // "copy" appointment
                var oProps = Object.assign({}, oModel.getProperty(oAppointment.getBindingContext().getPath()));
                oProps.start = oStartDate;
                oProps.end = oEndDate;
                oRowBindingContext.getObject().appointments.push(oProps);
            } else { // "move" appointment
                oModel.setProperty("start", oStartDate, oAppBindingContext);
                oModel.setProperty("end", oEndDate, oAppBindingContext);
                if (oAppointment.getParent() !== oCalendarRow) {
                    handleAppointmentDropBetweenRows();
                }
            }
            oModel.refresh(true);
        },

        handleAppointmentResize: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate");

            if (!this.isAppointmentOverlap(oEvent, oAppointment.getParent())) {
                oAppointment
                    .setStartDate(oStartDate)
                    .setEndDate(oEndDate);
            } else {
                MessageToast.show("As a manager you can not resize events if they overlap with another events");
            }
        },

        // Modified handleAppointmentCreate to open event details fragment
        handleAppointmentCreate: function (oEvent) {
            var oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                oPlanningCalendarRow = oEvent.getParameter("calendarRow"),
                oModel = this.getView().getModel(),
                sPath = oPlanningCalendarRow.getBindingContext().getPath();

            // Create a new appointment object
            var newAppointment = {
                title: "New Appointment",
                start: oStartDate,
                end: oEndDate,
                info: "",
                type: "Type01",
                category: "Appointment",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "In-person",
                organizerStatus: "sent",
                attendeeStatus: "accepted",
                isNew: true // Flag to indicate it's a new appointment
            };

            // Set the selected event in the view model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", newAppointment);

            // Open the event details fragment
            this._openEventDetailsPopover(oEvent.getParameter("domRef"));
            MessageToast.show("New Appointment is created at \n" + oStartDate + "\n and end at \n" + oEndDate + ".");
        },

        isAppointmentOverlap: function (oEvent, oCalendarRow) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                bAppointmentOverlapped;

            if (this.getUserRole() === this.roles.manager) {
                bAppointmentOverlapped = oCalendarRow.getAppointments().some(function (oCurrentAppointment) {
                    if (oCurrentAppointment === oAppointment) {
                        return;
                    }

                    var oAppStartTime = oCurrentAppointment.getStartDate().getTime(),
                        oAppEndTime = oCurrentAppointment.getEndDate().getTime();

                    if (oAppStartTime <= oStartDate.getTime() && oStartDate.getTime() < oAppEndTime) {
                        return true;
                    }

                    if (oAppStartTime < oEndDate.getTime() && oEndDate.getTime() <= oAppEndTime) {
                        return true;
                    }

                    if (oStartDate.getTime() <= oAppStartTime && oAppStartTime < oEndDate.getTime()) {
                        return true;
                    }
                });
            }

            return bAppointmentOverlapped;
        },

        // Toolbar and UI functionality
        onTodayPress: function () {
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/startDate", UI5Date.getInstance());
            MessageToast.show("Navigated to today");
        },

        onViewSelectPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oViewPopover = this.byId("viewPopover");

            // Close other popovers
            this.byId("filterPopover").close();
            this.byId("newEventPopover").close();
            this.byId("eventDetailsPopover").close();

            // Toggle view popover
            if (!oViewPopover.isOpen()) {
                oViewPopover.openBy(oButton);
            } else {
                oViewPopover.close();
            }
        },

        onFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oFilterPopover = this.byId("filterPopover");

            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("newEventPopover").close();
            this.byId("eventDetailsPopover").close();

            // Toggle filter popover
            if (!oFilterPopover.isOpen()) {
                oFilterPopover.openBy(oButton);
            } else {
                oFilterPopover.close();
            }
        },

        onNewEventPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oNewEventPopover = this.byId("newEventPopover");

            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("filterPopover").close();
            this.byId("eventDetailsPopover").close();

            // Toggle new event popover
            if (!oNewEventPopover.isOpen()) {
                oNewEventPopover.openBy(oButton);
            } else {
                oNewEventPopover.close();
            }
        },

        onNotificationPress: function () {
            MessageToast.show("No new notifications");
        },

        // Work week menu functionality
        onWorkWeekMenuPress: function (oEvent) {
            var oViewModel = this.getView().getModel("view");
            var bMenuOpen = oViewModel.getProperty("/workWeekMenuOpen");

            // Toggle the menu visibility
            oViewModel.setProperty("/workWeekMenuOpen", !bMenuOpen);

            // Update the arrow icon direction
            var oButton = this.byId("_IDGenWorkWeekButton");
            oButton.setIcon(!bMenuOpen ? "sap-icon://slim-arrow-down" : "sap-icon://slim-arrow-right");
        },

        // Time scale dropdown change handler
        onTimeScaleChange: function (oEvent) {
            var oViewModel = this.getView().getModel("view");
            var oSource = oEvent.getSource();
            var sSelectedKey = oSource.getSelectedKey();

            // Extract the number of minutes from the selected key
            var iMinutes = parseInt(sSelectedKey);

            // Update the model
            oViewModel.setProperty("/timeScale", iMinutes + " minutes");
            oViewModel.setProperty("/timeScaleMinutes", iMinutes);

            // Get current days to show
            var iDays = oViewModel.getProperty("/daysToShow");

            // Update the button text to show both days and time scale
            var oButton = this.byId("viewSelectButton");
            oButton.setText("Work week (" + iDays + " days, " + iMinutes + " min)");

            // Update the calendar's time scale
            this._updateTimeScale(iMinutes);

            // Make sure we're in Work week view
            var oCalendar = this.byId("calendar");
            oCalendar.setViewKey("Workweek");
            oViewModel.setProperty("/currentView", "Work week");

            MessageToast.show("Time scale changed to: " + iMinutes + " minutes");
        },

        // Days to show dropdown change handler
        onDaysToShowChange: function (oEvent) {
            var oViewModel = this.getView().getModel("view");
            var oSource = oEvent.getSource();
            var iDays = parseInt(oSource.getSelectedKey());

            // Update the model
            oViewModel.setProperty("/daysToShow", iDays);

            // Get current time scale
            var sTimeScale = oViewModel.getProperty("/timeScale");
            var iMinutes = parseInt(sTimeScale.match(/\d+/)[0]);

            // Update the button text to show both days and time scale
            var oButton = this.byId("viewSelectButton");
            oButton.setText("Work week (" + iDays + " days, " + iMinutes + " min)");

            // Update the work week view
            this._updateWorkWeekView(iDays);

            // Make sure we're in Work week view
            var oCalendar = this.byId("calendar");
            oCalendar.setViewKey("Workweek");
            oViewModel.setProperty("/currentView", "Work week");

            MessageToast.show("Work week now shows " + iDays + " days");
        },

        // Days dropdown change handler (main view selection)
        onDaysChange: function (oEvent) {
            var oSource = oEvent.getSource();
            var iDays = parseInt(oSource.getSelectedKey());

            // Update the model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/daysToShow", iDays);

            // Set the current view to Work week
            oViewModel.setProperty("/currentView", "Work week");

            // Update the button text
            var oButton = this.byId("viewSelectButton");
            var sTimeScale = oViewModel.getProperty("/timeScale");
            var iMinutes = parseInt(sTimeScale.match(/\d+/)[0]);
            oButton.setText("Work week (" + iDays + " days, " + iMinutes + " min)");

            // Update the calendar
            var oCalendar = this.byId("calendar");
            oCalendar.setViewKey("Workweek");

            // Update the work week view
            this._updateWorkWeekView(iDays);

            // Close the popover
            this.byId("viewPopover").close();

            MessageToast.show("Work week now shows " + iDays + " days");
        },

        onViewSelected: function (oEvent) {
            var sSelectedView = oEvent.getParameter("listItem").getTitle();
            var oButton = this.byId("viewSelectButton");
            var oCalendar = this.byId("calendar");
            var oViewModel = this.getView().getModel("view");

            // Close the popover first
            this.byId("viewPopover").close();

            // Handle regular view selection
            if (sSelectedView === "Work week") {
                oButton.setText(sSelectedView);
                oViewModel.setProperty("/currentView", sSelectedView);

                // Update calendar view
                oCalendar.setViewKey("Workweek");

                // Get current settings
                var iDaysToShow = oViewModel.getProperty("/daysToShow");
                var sTimeScale = oViewModel.getProperty("/timeScale");
                var iMinutes = parseInt(sTimeScale.match(/\d+/)[0]);

                // Update button text to show both days and time scale
                oButton.setText("Work week (" + iDaysToShow + " days, " + iMinutes + " min)");

                // Update the work week view and time scale
                this._updateWorkWeekView(iDaysToShow);
                this._updateTimeScale(iMinutes);

                MessageToast.show("View changed to: " + sSelectedView);
            } else if (sSelectedView === "Week") {
                oButton.setText(sSelectedView);
                oViewModel.setProperty("/currentView", sSelectedView);

                // Update calendar view
                oCalendar.setViewKey("Week");

                // Force refresh to ensure proper rendering
                oCalendar.rerender();

                MessageToast.show("View changed to: " + sSelectedView);
            } else if (sSelectedView === "Month") {
                oButton.setText(sSelectedView);
                oViewModel.setProperty("/currentView", sSelectedView);

                // Update calendar view
                oCalendar.setViewKey("Month");

                // Force refresh to ensure proper rendering
                oCalendar.rerender();

                MessageToast.show("View changed to: " + sSelectedView);
            } else if (sSelectedView === "Split view") {
                MessageToast.show("Split view feature coming soon");
            }
        },

        _switchCalendarView: function (sViewKey) {
            var oCalendar = this.byId("calendar");
            var oViewModel = this.getView().getModel("view");

            // Set the view key
            oCalendar.setViewKey(sViewKey);

            // Update the current view in the model
            oViewModel.setProperty("/currentView", sViewKey);

            // Force a rerender to ensure proper display
            oCalendar.rerender();
        },

        _updateTimeScale: function (iMinutes) {
            var oCalendar = this.byId("calendar");
            var oViewModel = this.getView().getModel("view");
            var sCurrentView = oViewModel;

            // Only update time scale for Day and Work week views
            if (sCurrentView === "Day" || sCurrentView === "Work week") {
                var oView = oCalendar.getViews().find(function (view) {
                    return view.getKey() === (sCurrentView === "Work week" ? "Workweek" : sCurrentView);
                });

                if (oView) {
                    // Calculate the number of intervals based on the selected minutes
                    var iTotalMinutes = 24 * 60; // 24 hours in minutes
                    var iIntervals = iTotalMinutes / iMinutes;

                    // Update the view settings
                    oView.setIntervalsS(iIntervals);
                    oView.setIntervalsM(iIntervals);
                    oView.setIntervalsL(iIntervals);
                    oView.setIntervalType("Minute"); // Use string value directly

                    // Refresh the calendar
                    oCalendar.rerender();
                }
            }
        },

        _updateWorkWeekView: function (iDays) {
            var oCalendar = this.byId("calendar");
            var oView = oCalendar.getViews().find(function (view) {
                return view.getKey() === "Workweek";
            });

            if (oView) {
                // Update the number of days to show
                oView.setIntervalsS(iDays);
                oView.setIntervalsM(iDays);
                oView.setIntervalsL(iDays);

                // Refresh the calendar
                oCalendar.rerender();
            }
        },

        onSavedViewsPress: function () {
            MessageToast.show("Saved views feature coming soon");
        },

        onNewEventTypeSelected: function (oEvent) {
            var sEventType = oEvent.getSource().getTitle();
            this.byId("newEventPopover").close();

            if (sEventType === "Channel meeting") {
                this._openChannelMeetingDialog();
            } else if (sEventType === "Event") {
                this._openRemarksDialog();
            } else if (sEventType === "Virtual appointment") {
                this._openVirtualAppointmentDialog();
            } else {
                MessageToast.show("Creating new: " + sEventType);
            }
        },

        // Open the Channel Meeting Dialog
        _openChannelMeetingDialog: function () {
            var that = this;

            if (!this._oChannelMeetingDialog) {
                Fragment.load({
                    id: this.getView().getId(),
                    name: "com.capexrevex.capexrevex.view.ChannelMeetingDialog",
                    controller: this
                }).then(function (oDialog) {
                    that._oChannelMeetingDialog = oDialog;
                    that.getView().addDependent(that._oChannelMeetingDialog);

                    // Set default values for new channel meeting
                    that._setDefaultChannelMeetingValues();

                    // Set the model for the fragment
                    that._oChannelMeetingDialog.setModel(that.getView().getModel());
                    that._oChannelMeetingDialog.setModel(that.getView().getModel("attendees"), "attendees");

                    that._oChannelMeetingDialog.open();
                }).catch(function (error) {
                    console.error("Error loading channel meeting dialog:", error);
                    MessageToast.show("Error loading meeting dialog");
                });
            } else {
                // Set default values for the meeting
                this._setDefaultChannelMeetingValues();

                // Set the model for the fragment
                this._oChannelMeetingDialog.setModel(this.getView().getModel());
                this._oChannelMeetingDialog.setModel(this.getView().getModel("attendees"), "attendees");

                this._oChannelMeetingDialog.open();
            }
        },

        // Open the Virtual Appointment Dialog
        _openVirtualAppointmentDialog: function () {
            var that = this;

            if (!this._oVirtualAppointmentDialog) {
                Fragment.load({
                    id: this.getView().getId(),
                    name: "com.capexrevex.capexrevex.view.VirtualAppointmentDialog",
                    controller: this
                }).then(function (oDialog) {
                    that._oVirtualAppointmentDialog = oDialog;
                    that.getView().addDependent(that._oVirtualAppointmentDialog);

                    // Set default values for virtual appointment
                    that._setDefaultVirtualAppointmentValues();

                    // Set the model for the fragment
                    that._oVirtualAppointmentDialog.setModel(that.getView().getModel());
                    that._oVirtualAppointmentDialog.setModel(that.getView().getModel("attendees"), "attendees");

                    that._oVirtualAppointmentDialog.open();
                }).catch(function (error) {
                    console.error("Error loading virtual appointment dialog:", error);
                    MessageToast.show("Error loading virtual appointment dialog");
                });
            } else {
                // Set default values for the appointment
                this._setDefaultVirtualAppointmentValues();

                // Set the model for the fragment
                this._oVirtualAppointmentDialog.setModel(this.getView().getModel());
                this._oVirtualAppointmentDialog.setModel(this.getView().getModel("attendees"), "attendees");

                this._oVirtualAppointmentDialog.open();
            }
        },

        _setDefaultChannelMeetingValues: function () {
            // Set default date and time to current time
            var oNow = UI5Date.getInstance();
            var oStart = UI5Date.getInstance(oNow);

            // Round to nearest 30 minutes
            var minutes = oStart.getMinutes();
            if (minutes < 15) {
                oStart.setMinutes(0);
            } else if (minutes < 45) {
                oStart.setMinutes(30);
            } else {
                oStart.setHours(oStart.getHours() + 1);
                oStart.setMinutes(0);
            }

            var oEnd = UI5Date.getInstance(oStart);
            oEnd.setMinutes(oEnd.getMinutes() + 30);

            // Set values in the dialog if it exists
            if (this._oChannelMeetingDialog) {
                var oStartDate = Fragment.byId(this.getView().getId(), "startDate");
                var oStartTime = Fragment.byId(this.getView().getId(), "startTime");
                var oEndDate = Fragment.byId(this.getView().getId(), "endDate");
                var oEndTime = Fragment.byId(this.getView().getId(), "endTime");

                if (oStartDate) oStartDate.setDateValue(oStart);
                if (oStartTime) oStartTime.setDateValue(oStart);
                if (oEndDate) oEndDate.setDateValue(oEnd);
                if (oEndTime) oEndTime.setDateValue(oEnd);
            }
        },

        _setDefaultVirtualAppointmentValues: function () {
            // Set default date and time to current time
            var oNow = UI5Date.getInstance();
            var oStart = UI5Date.getInstance(oNow);

            // Round to nearest 30 minutes
            var minutes = oStart.getMinutes();
            if (minutes < 15) {
                oStart.setMinutes(0);
            } else if (minutes < 45) {
                oStart.setMinutes(30);
            } else {
                oStart.setHours(oStart.getHours() + 1);
                oStart.setMinutes(0);
            }

            var oEnd = UI5Date.getInstance(oStart);
            oEnd.setMinutes(oEnd.getMinutes() + 30);

            // Set values in the dialog if it exists
            if (this._oVirtualAppointmentDialog) {
                var oStartDate = Fragment.byId(this.getView().getId(), "virtualStartDate");
                var oStartTime = Fragment.byId(this.getView().getId(), "virtualStartTime");
                var oEndDate = Fragment.byId(this.getView().getId(), "virtualEndDate");
                var oEndTime = Fragment.byId(this.getView().getId(), "virtualEndTime");

                if (oStartDate) oStartDate.setDateValue(oStart);
                if (oStartTime) {
                    oStartTime.setDateValue(oStart);
                    // Set minutes step based on current time scale
                    var oViewModel = this.getView().getModel("view");
                    var iMinutes = oViewModel.getProperty("/timeScaleMinutes");
                    oStartTime.setMinutesStep(iMinutes);
                }
                if (oEndDate) oEndDate.setDateValue(oEnd);
                if (oEndTime) {
                    oEndTime.setDateValue(oEnd);
                    // Set minutes step based on current time scale
                    var oViewModel = this.getView().getModel("view");
                    var iMinutes = oViewModel.getProperty("/timeScaleMinutes");
                    oEndTime.setMinutesStep(iMinutes);
                }

                // Set default recurrence to "none"
                var oRecurrenceSelect = Fragment.byId(this.getView().getId(), "virtualRecurrence");
                if (oRecurrenceSelect) {
                    oRecurrenceSelect.setSelectedKey("none");
                }
            }
        },

        // Save Channel Meeting
        onSaveChannelMeeting: function () {
            try {
                // Get values from the dialog
                var sTitle = Fragment.byId(this.getView().getId(), "meetingTitle").getValue();

                // Get required attendees
                var oRequiredAttendees = Fragment.byId(this.getView().getId(), "requiredAttendees");
                var aRequiredTokens = oRequiredAttendees.getTokens();
                var sRequiredAttendees = aRequiredTokens.map(function (oToken) {
                    return oToken.getKey();
                }).join("; ");

                // Get optional attendees
                var oOptionalAttendees = Fragment.byId(this.getView().getId(), "optionalAttendees");
                var aOptionalTokens = oOptionalAttendees.getTokens();
                var sOptionalAttendees = aOptionalTokens.map(function (oToken) {
                    return oToken.getKey();
                }).join("; ");

                // Get date and time values properly
                var oStartDateControl = Fragment.byId(this.getView().getId(), "startDate");
                var oStartTimeControl = Fragment.byId(this.getView().getId(), "startTime");
                var oEndDateControl = Fragment.byId(this.getView().getId(), "endDate");
                var oEndTimeControl = Fragment.byId(this.getView().getId(), "endTime");

                var oStartDate = oStartDateControl ? oStartDateControl.getDateValue() : null;
                var oStartTime = oStartTimeControl ? oStartTimeControl.getDateValue() : null;
                var oEndDate = oEndDateControl ? oEndDateControl.getDateValue() : null;
                var oEndTime = oEndTimeControl ? oEndTimeControl.getDateValue() : null;

                var bAllDay = Fragment.byId(this.getView().getId(), "allDayCheckbox").getSelected();
                var sChannel = Fragment.byId(this.getView().getId(), "channelInput").getValue();
                var sLocation = Fragment.byId(this.getView().getId(), "locationInput").getValue();
                var bOnlineMeeting = Fragment.byId(this.getView().getId(), "onlineMeetingCheckbox").getSelected();
                var sDetails = Fragment.byId(this.getView().getId(), "meetingDetails").getValue();
                var sAgenda = Fragment.byId(this.getView().getId(), "meetingAgenda").getValue();

                // Validate required fields
                if (!sTitle) {
                    MessageToast.show("Please enter a title for the meeting");
                    return;
                }

                // Validate date controls exist
                if (!oStartDate || !oEndDate) {
                    MessageToast.show("Please select valid dates");
                    return;
                }

                // Combine date and time
                var oStart = new Date(oStartDate);
                if (!bAllDay && oStartTime) {
                    oStart.setHours(oStartTime.getHours(), oStartTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oStart.setHours(0, 0, 0, 0);
                }

                var oEnd = new Date(oEndDate);
                if (!bAllDay && oEndTime) {
                    oEnd.setHours(oEndTime.getHours(), oEndTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oEnd.setHours(23, 59, 59, 999);
                }

                // Validate that end time is after start time
                if (oEnd <= oStart) {
                    MessageToast.show("End time must be after start time");
                    return;
                }

                // Create the new appointment object
                var newAppointment = {
                    start: oStart,
                    end: oEnd,
                    title: sTitle,
                    info: "Channel: " + sChannel + (sLocation ? " | Location: " + sLocation : ""),
                    type: "Type01",
                    pic: "sap-icon://group",
                    requiredAttendees: sRequiredAttendees,
                    optionalAttendees: sOptionalAttendees,
                    details: sDetails,
                    agenda: sAgenda,
                    allDay: bAllDay,
                    onlineMeeting: bOnlineMeeting,
                    category: "Meeting",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: bOnlineMeeting ? "Virtual" : "In-person",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted"
                };

                // Get the model and add the new appointment to the first person's calendar
                var oModel = this.getView().getModel();
                var aPeople = oModel.getProperty("/people");

                if (aPeople && aPeople.length > 0) {
                    // Add to the first person's appointments
                    aPeople[0].appointments.push(newAppointment);

                    // Update the model
                    oModel.setProperty("/people", aPeople);

                    // Show success message
                    MessageToast.show("Channel meeting '" + sTitle + "' has been created");

                    // Close the dialog
                    this._oChannelMeetingDialog.close();

                    // Refresh the calendar to show the new appointment
                    this.byId("calendar").getBinding("rows").refresh(true);
                } else {
                    MessageToast.show("Error: Could not find calendar to add meeting");
                }
            } catch (error) {
                console.error("Error saving channel meeting:", error);
                MessageToast.show("Error creating meeting. Please try again.");
            }
        },

        // Save Virtual Appointment
        onSaveVirtualAppointment: function () {
            try {
                // Get values from the dialog
                var sTitle = Fragment.byId(this.getView().getId(), "virtualTitle").getValue();
                var sGuestName = Fragment.byId(this.getView().getId(), "guestName").getValue();
                var sGuestEmail = Fragment.byId(this.getView().getId(), "guestEmail").getValue();

                // Get internal attendees
                var oInternalAttendees = Fragment.byId(this.getView().getId(), "internalAttendees");
                var aInternalTokens = oInternalAttendees.getTokens();
                var sInternalAttendees = aInternalTokens.map(function (oToken) {
                    return oToken.getKey();
                }).join("; ");

                // Get date and time values properly
                var oStartDateControl = Fragment.byId(this.getView().getId(), "virtualStartDate");
                var oStartTimeControl = Fragment.byId(this.getView().getId(), "virtualStartTime");
                var oEndDateControl = Fragment.byId(this.getView().getId(), "virtualEndDate");
                var oEndTimeControl = Fragment.byId(this.getView().getId(), "virtualEndTime");

                var oStartDate = oStartDateControl ? oStartDateControl.getDateValue() : null;
                var oStartTime = oStartTimeControl ? oStartTimeControl.getDateValue() : null;
                var oEndDate = oEndDateControl ? oEndDateControl.getDateValue() : null;
                var oEndTime = oEndTimeControl ? oEndTimeControl.getDateValue() : null;

                var bAllDay = Fragment.byId(this.getView().getId(), "virtualAllDay").getSelected();
                var sLocation = Fragment.byId(this.getView().getId(), "virtualLocation").getValue();
                var sPresenterOptions = Fragment.byId(this.getView().getId(), "presenterOptions").getSelectedKey();
                var bRecordAutomatically = Fragment.byId(this.getView().getId(), "recordAutomatically").getSelected();
                var sMeetingChat = Fragment.byId(this.getView().getId(), "meetingChat").getSelectedKey();
                var sMessage = Fragment.byId(this.getView().getId(), "virtualMessage").getValue();

                // Validate required fields
                if (!sTitle) {
                    MessageToast.show("Please enter a title for the appointment");
                    return;
                }

                if (!sGuestName || !sGuestEmail) {
                    MessageToast.show("Please enter guest name and email");
                    return;
                }

                // Validate date controls exist
                if (!oStartDate || !oEndDate) {
                    MessageToast.show("Please select valid dates");
                    return;
                }

                // Combine date and time
                var oStart = new Date(oStartDate);
                if (!bAllDay && oStartTime) {
                    oStart.setHours(oStartTime.getHours(), oStartTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oStart.setHours(0, 0, 0, 0);
                }

                var oEnd = new Date(oEndDate);
                if (!bAllDay && oEndTime) {
                    oEnd.setHours(oEndTime.getHours(), oEndTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oEnd.setHours(23, 59, 59, 999);
                }

                // Validate that end time is after start time
                if (oEnd <= oStart) {
                    MessageToast.show("End time must be after start time");
                    return;
                }

                // Create the new appointment object
                var newAppointment = {
                    start: oStart,
                    end: oEnd,
                    title: sTitle,
                    info: "Virtual Appointment with " + sGuestName + " (" + sGuestEmail + ")",
                    type: "Type01",
                    pic: "sap-icon://video",
                    internalAttendees: sInternalAttendees,
                    location: sLocation,
                    presenterOptions: sPresenterOptions,
                    recordAutomatically: bRecordAutomatically,
                    meetingChat: sMeetingChat,
                    message: sMessage,
                    allDay: bAllDay,
                    isVirtual: true,
                    category: "Appointment",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: "Virtual",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted"
                };

                // Get the model and add the new appointment to the first person's calendar
                var oModel = this.getView().getModel();
                var aPeople = oModel.getProperty("/people");

                if (aPeople && aPeople.length > 0) {
                    // Add to the first person's appointments
                    aPeople[0].appointments.push(newAppointment);

                    // Update the model
                    oModel.setProperty("/people", aPeople);

                    // Show success message
                    MessageToast.show("Virtual appointment '" + sTitle + "' has been created");

                    // Close the dialog
                    this._oVirtualAppointmentDialog.close();

                    // Refresh the calendar to show the new appointment
                    this.byId("calendar").getBinding("rows").refresh(true);
                } else {
                    MessageToast.show("Error: Could not find calendar to add appointment");
                }
            } catch (error) {
                console.error("Error saving virtual appointment:", error);
                MessageToast.show("Error creating appointment. Please try again.");
            }
        },

        // Cancel Channel Meeting
        onCancelChannelMeeting: function () {
            // Close the dialog without saving
            if (this._oChannelMeetingDialog) {
                this._oChannelMeetingDialog.close();
            }
            MessageToast.show("Channel meeting creation cancelled");
        },

        // Cancel Virtual Appointment
        onCancelVirtualAppointment: function () {
            // Close the dialog without saving
            if (this._oVirtualAppointmentDialog) {
                this._oVirtualAppointmentDialog.close();
            }
            MessageToast.show("Virtual appointment creation cancelled");
        },

        // Add additional guest
        onAddGuest: function () {
            MessageToast.show("Additional guest feature coming soon");
        },

        // Handle All Day checkbox changes
        onAllDayChange: function (oEvent) {
            var bAllDay = oEvent.getParameter("state");
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent/allDay", bAllDay);

            if (bAllDay) {
                var oStart = new Date(oViewModel.getProperty("/selectedEvent/start"));
                oStart.setHours(0, 0, 0, 0);
                oViewModel.setProperty("/selectedEvent/start", oStart);

                var oEnd = new Date(oViewModel.getProperty("/selectedEvent/end"));
                oEnd.setHours(23, 59, 59, 999);
                oViewModel.setProperty("/selectedEvent/end", oEnd);
            } else {
                var oStart = new Date(oViewModel.getProperty("/selectedEvent/start"));
                if (oStart.getHours() === 0) {
                    oStart.setHours(10, 0, 0, 0);
                }
                oViewModel.setProperty("/selectedEvent/start", oStart);

                var oEnd = new Date(oViewModel.getProperty("/selectedEvent/end"));
                if (oEnd.getHours() === 23) {
                    oEnd.setHours(10, 30, 0, 0);
                }
                oViewModel.setProperty("/selectedEvent/end", oEnd);
            }
        },

        onStartDateChange: function (oEvent) {
            var oDate = oEvent.getSource().getDateValue();
            if (!oDate) return;

            var oViewModel = this.getView().getModel("view");
            var oStart = new Date(oViewModel.getProperty("/selectedEvent/start"));
            oStart.setFullYear(oDate.getFullYear(), oDate.getMonth(), oDate.getDate());
            oViewModel.setProperty("/selectedEvent/start", oStart);
        },

        onStartTimeChange: function (oEvent) {
            var oTime = oEvent.getSource().getDateValue();
            if (!oTime) return;

            var oViewModel = this.getView().getModel("view");
            var oStart = new Date(oViewModel.getProperty("/selectedEvent/start"));
            oStart.setHours(oTime.getHours(), oTime.getMinutes(), 0, 0);
            oViewModel.setProperty("/selectedEvent/start", oStart);
        },

        onEndDateChange: function (oEvent) {
            var oDate = oEvent.getSource().getDateValue();
            if (!oDate) return;

            var oViewModel = this.getView().getModel("view");
            var oEnd = new Date(oViewModel.getProperty("/selectedEvent/end"));
            oEnd.setFullYear(oDate.getFullYear(), oDate.getMonth(), oDate.getDate());
            oViewModel.setProperty("/selectedEvent/end", oEnd);
        },

        onEndTimeChange: function (oEvent) {
            var oTime = oEvent.getSource().getDateValue();
            if (!oTime) return;

            var oViewModel = this.getView().getModel("view");
            var oEnd = new Date(oViewModel.getProperty("/selectedEvent/end"));
            oEnd.setHours(oTime.getHours(), oTime.getMinutes(), 0, 0);
            oViewModel.setProperty("/selectedEvent/end", oEnd);
        },

        onMoreOptionsPress: function () {
            MessageToast.show("More options coming soon");
        },

        // Modified onAppointmentSelect method
        onAppointmentSelect: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment");
            var oBindingContext = oAppointment.getBindingContext();

            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("filterPopover").close();
            this.byId("newEventPopover").close();

            // Get appointment data
            var oAppointmentData = oBindingContext.getObject();

            // Extract attendees from appointment
            var aAttendees = this._extractAttendeesFromAppointment(oAppointmentData);

            var sTitle = oAppointmentData.title;
            if (sTitle === "new appointment") {
                sTitle = "";
            }

            // Update selected event in model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", {
                title: sTitle,
                start: oAppointmentData.start,
                end: oAppointmentData.end,
                location: oAppointmentData.info || "",
                description: oAppointmentData.description || "",
                allDay: oAppointmentData.allDay || false,
                attendees: aAttendees,
                meetingLink: oAppointmentData.meetingLink || ""
            });
            oViewModel.setProperty("/selectedEventPath", oBindingContext.getPath());

            // Open event details popover using the new fragment
            this._openEventDetailsPopover(oEvent.getParameter("domRef"));
        },

        // Modified onIntervalSelect method
        onIntervalSelect: function (oEvent) {
            var oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                oRow = oEvent.getParameter("row"),
                oModel = this.getView().getModel(),
                oAppointment = {
                    start: oStartDate,
                    end: oEndDate,
                    title: "new appointment",
                    info: "",
                    type: "Type01",
                    location: "",
                    description: "",
                    allDay: false,
                    attendees: "",
                    category: "Appointment",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: "In-person",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted"
                };

            var oRowContext = oRow.getBindingContext();
            var sPath = oRowContext.getPath() + "/appointments";
            var aAppointments = oModel.getProperty(sPath) || [];
            aAppointments.push(oAppointment);
            oModel.setProperty(sPath, aAppointments);

            MessageToast.show("New appointment created. Click on it to edit.");
        },

        // Add this method to open the event details popover
        _openEventDetailsPopover: function (oSource) {
            var that = this;

            // Load the fragment if not already loaded
            if (!this._oEventDetailsPopover) {
                Fragment.load({
                    id: this.getView().getId(),
                    name: "com.capexrevex.capexrevex.view.EventDetailsDialog",
                    controller: this
                }).then(function (oPopover) {
                    that._oEventDetailsPopover = oPopover;
                    that.getView().addDependent(that._oEventDetailsPopover);

                    // Set the model for the fragment
                    that._oEventDetailsPopover.setModel(that.getView().getModel("view"), "view");
                    that._oEventDetailsPopover.setModel(that.getView().getModel("attendees"), "attendees");

                    that._oEventDetailsPopover.openBy(oSource);

                    // Set attendees tokens after the fragment is rendered
                    setTimeout(function () {
                        that._setAttendeesTokens();
                    }, 100);
                }).catch(function (error) {
                    console.error("Error loading event details fragment:", error);
                    MessageToast.show("Error loading event details");
                });
            } else {
                // Set the model for the fragment
                this._oEventDetailsPopover.setModel(this.getView().getModel("view"), "view");
                this._oEventDetailsPopover.setModel(this.getView().getModel("attendees"), "attendees");

                // Open the popover
                this._oEventDetailsPopover.openBy(oSource);

                // Set attendees tokens
                this._setAttendeesTokens();
            }
        },

        _setAttendeesTokens: function () {
            var oViewModel = this.getView().getModel("view");
            var sAttendees = oViewModel.getProperty("/selectedEvent/attendees") || "";

            // Get the MultiInput control from the fragment
            var oMultiInput = Fragment.byId(this.getView().getId(), "eventAttendees");
            if (!oMultiInput) {
                console.error("MultiInput control not found in fragment");
                return;
            }

            // Clear existing tokens
            oMultiInput.destroyTokens();

            // Parse attendees and create tokens
            var aAttendees = this._parseAttendees(sAttendees);
            aAttendees.forEach(function (oAttendee) {
                var oToken = new Token({
                    key: oAttendee.email,
                    text: oAttendee.name + " (" + oAttendee.email + ")"
                });
                oMultiInput.addToken(oToken);
            });
        },

        // Extract attendees from appointment data
        _extractAttendeesFromAppointment: function (oAppointment) {
            var aAttendees = [];

            // Handle different appointment types
            if (oAppointment.requiredAttendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.requiredAttendees));
            }

            if (oAppointment.optionalAttendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.optionalAttendees));
            }

            if (oAppointment.internalAttendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.internalAttendees));
            }

            if (oAppointment.guestEmail) {
                aAttendees.push({
                    name: oAppointment.guestName || oAppointment.guestEmail,
                    email: oAppointment.guestEmail,
                    status: "Free"
                });
            }

            if (oAppointment.attendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.attendees));
            }

            return aAttendees;
        },

        // Parse attendees string into objects
        _parseAttendees: function (sAttendees) {
            if (!sAttendees) return [];

            if (typeof sAttendees === 'string') {
                return sAttendees.split(';').map(function (sAttendee) {
                    sAttendee = sAttendee.trim();
                    if (sAttendee) {
                        return {
                            name: sAttendee,
                            email: sAttendee,
                            status: "Free"
                        };
                    }
                    return null;
                }).filter(Boolean);
            } else if (Array.isArray(sAttendees)) {
                return sAttendees;
            }

            return [];
        },

        // Modified onSaveEvent method to handle attendees
        onSaveEvent: function () {
            var oViewModel = this.getView().getModel("view");
            var sPath = oViewModel.getProperty("/selectedEventPath");

            // Get values from the fragment controls
            var oTitleControl = Fragment.byId(this.getView().getId(), "eventTitle");
            var oStartDateControl = Fragment.byId(this.getView().getId(), "eventStartDate");
            var oStartTimeControl = Fragment.byId(this.getView().getId(), "eventStartTime");
            var oEndDateControl = Fragment.byId(this.getView().getId(), "eventEndDate");
            var oEndTimeControl = Fragment.byId(this.getView().getId(), "eventEndTime");
            var oLocationControl = Fragment.byId(this.getView().getId(), "eventLocation");
            var oDescriptionControl = Fragment.byId(this.getView().getId(), "eventDescription");
            var oAllDayControl = Fragment.byId(this.getView().getId(), "allDayCheckbox");
            var oAttendeesControl = Fragment.byId(this.getView().getId(), "eventAttendees");

            // Validate controls exist
            if (!oTitleControl || !oStartDateControl || !oStartTimeControl ||
                !oEndDateControl || !oEndTimeControl || !oLocationControl ||
                !oDescriptionControl || !oAllDayControl || !oAttendeesControl) {
                MessageToast.show("Error: Could not find all form controls");
                return;
            }

            // Get values
            var sTitle = oTitleControl.getValue();
            var oStartDate = oStartDateControl.getDateValue();
            var oStartTime = oStartTimeControl.getDateValue();
            var oEndDate = oEndDateControl.getDateValue();
            var oEndTime = oEndTimeControl.getDateValue();
            var sLocation = oLocationControl.getValue();
            var sDescription = oDescriptionControl.getValue();
            var bAllDay = oAllDayControl.getSelected();

            // Get attendees
            var aTokens = oAttendeesControl.getTokens();
            var sAttendees = aTokens.map(function (oToken) {
                return oToken.getKey();
            }).join("; ");

            // Validate required fields
            if (!sTitle) {
                MessageToast.show("Please enter a title for the event");
                return;
            }

            if (!oStartDate || !oEndDate) {
                MessageToast.show("Please enter valid start and end dates");
                return;
            }

            // Combine date and time
            var oStart = new Date(oStartDate);
            if (!bAllDay && oStartTime) {
                oStart.setHours(oStartTime.getHours(), oStartTime.getMinutes(), 0, 0);
            } else if (bAllDay) {
                oStart.setHours(0, 0, 0, 0);
            }

            var oEnd = new Date(oEndDate);
            if (!bAllDay && oEndTime) {
                oEnd.setHours(oEndTime.getHours(), oEndTime.getMinutes(), 0, 0);
            } else if (bAllDay) {
                oEnd.setHours(23, 59, 59, 999);
            }

            // Validate that end time is after start time
            if (oEnd <= oStart) {
                MessageToast.show("End time must be after start time");
                return;
            }

            // Check if this is a new appointment or editing existing one
            if (sPath) {
                // Update existing appointment
                var oModel = this.getView().getModel();
                oModel.setProperty(sPath + "/title", sTitle);
                oModel.setProperty(sPath + "/start", oStart);
                oModel.setProperty(sPath + "/end", oEnd);
                oModel.setProperty(sPath + "/allDay", bAllDay);
                oModel.setProperty(sPath + "/info", sLocation);
                oModel.setProperty(sPath + "/location", sLocation);
                oModel.setProperty(sPath + "/description", sDescription);
                oModel.setProperty(sPath + "/attendees", sAttendees);

                MessageToast.show("Event updated successfully");
            } else {
                // Create new appointment
                var newAppointment = {
                    start: oStart,
                    end: oEnd,
                    title: sTitle,
                    info: sLocation,
                    type: "Type01",
                    category: "Appointment",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: "In-person",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted",
                    attendees: sAttendees,
                    allDay: bAllDay,
                    description: sDescription
                };

                // Add to the first person's appointments
                var oModel = this.getView().getModel();
                var aPeople = oModel.getProperty("/people");

                if (aPeople && aPeople.length > 0) {
                    aPeople[0].appointments.push(newAppointment);
                    oModel.setProperty("/people", aPeople);

                    MessageToast.show("New event '" + sTitle + "' has been created");
                } else {
                    MessageToast.show("Error: Could not find calendar to add event");
                    return;
                }
            }

            // Close the popover
            if (this._oEventDetailsPopover) {
                this._oEventDetailsPopover.close();
            }

            // Refresh the calendar
            this.byId("calendar").getBinding("rows").refresh(true);
        },

        // Modified onDiscardEvent method
        onDiscardEvent: function () {
            // Close the popover without saving
            if (this._oEventDetailsPopover) {
                this._oEventDetailsPopover.close();
            }
            MessageToast.show("Changes discarded");
        },

        // Fragment handling functions
        // _openRemarksDialog: function () {
        //     if (!this._oRemarksDialog) {
        //         this._oRemarksDialog = sap.ui.xmlfragment(
        //             "com.capexrevex.capexrevex.view.RemarksDialog",
        //             this
        //         );
        //         this.getView().addDependent(this._oRemarksDialog);

        //         // Set the model for the fragment
        //         this._oRemarksDialog.setModel(this.getView().getModel());
        //         this._oRemarksDialog.setModel(this.getView().getModel("attendees"), "attendees");
        //     }

        //     // Set default values for new event (current date from 4:00 PM to 4:30 PM)
        //     var oEventDate = UI5Date.getInstance();
        //     oEventDate.setHours(16, 0, 0, 0); // 4:00 PM
        //     var oEnd = UI5Date.getInstance(oEventDate);
        //     oEnd.setHours(16, 30, 0, 0); // 4:30 PM

        //     var oViewModel = this.getView().getModel("view");
        //     oViewModel.setProperty("/selectedEvent", {
        //         title: "",
        //         start: oEventDate,
        //         end: oEnd,
        //         info: "",
        //         type: "Type01",
        //         icon: "",
        //         attendees: [],
        //         isNew: true // Flag to indicate it's a new appointment
        //     });

        //     this._oRemarksDialog.open();
        // },

        // Modified _openRemarksDialog method to use correct binding
        _openRemarksDialog: function () {
            if (!this._oRemarksDialog) {
                this._oRemarksDialog = sap.ui.xmlfragment(
                    "com.capexrevex.capexrevex.view.RemarksDialog",
                    this
                );
                this.getView().addDependent(this._oRemarksDialog);

                // Set the models for the fragment
                this._oRemarksDialog.setModel(this.getView().getModel());
                this._oRemarksDialog.setModel(this.getView().getModel("attendees"), "attendees");
            }

            // Set default values for new event
            var oEventDate = UI5Date.getInstance();
            oEventDate.setHours(16, 0, 0, 0);
            var oEnd = UI5Date.getInstance(oEventDate);
            oEnd.setHours(16, 30, 0, 0);

            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", {
                title: "",
                start: oEventDate,
                end: oEnd,
                info: "",
                type: "Type01",
                icon: "",
                attendees: [],
                isNew: true
            });

            this._oRemarksDialog.open();
        },

        onSaveEventFromDialog: function () {
            var oViewModel = this.getView().getModel("view");
            var oSelectedEvent = oViewModel.getProperty("/selectedEvent");

            // Get values from the dialog with proper null checks
            var oTitleControl = sap.ui.getCore().byId("eventTitle");
            var oAttendeesControl = sap.ui.getCore().byId("eventAttendees");
            var oMakeRecurringControl = sap.ui.getCore().byId("makeRecurring");
            var oAllDayControl = sap.ui.getCore().byId("allDay");
            var oInPersonControl = sap.ui.getCore().byId("inPerson");
            var oResponseOptionsControl = sap.ui.getCore().byId("responseOptions");
            var oShowAsControl = sap.ui.getCore().byId("showAs");
            var oDescriptionControl = sap.ui.getCore().byId("eventDescription");

            // Get the date and time values with proper null checks
            var oDatePicker = sap.ui.getCore().byId("eventDate");
            var oStartTimePicker = sap.ui.getCore().byId("startTime");
            var oEndTimePicker = sap.ui.getCore().byId("endTime");

            // Validate controls exist
            if (!oDatePicker || !oStartTimePicker || !oEndTimePicker) {
                MessageToast.show("Error: Date or time controls not found");
                return;
            }

            var oDate = oDatePicker.getDateValue();
            var oStartTime = oStartTimePicker.getDateValue();
            var oEndTime = oEndTimePicker.getDateValue();

            // Validate date values
            if (!oDate || !oStartTime || !oEndTime) {
                MessageToast.show("Please enter valid date and time values");
                return;
            }

            // Get other values with null checks
            var sTitle = oTitleControl ? oTitleControl.getValue() : "";
            var sAttendees = oAttendeesControl ? oAttendeesControl.getValue() : "";
            var bMakeRecurring = oMakeRecurringControl ? oMakeRecurringControl.getSelected() : false;
            var bAllDay = oAllDayControl ? oAllDayControl.getSelected() : false;
            var bInPerson = oInPersonControl ? oInPersonControl.getSelected() : "";
            var sResponseOption = oResponseOptionsControl ? oResponseOptionsControl.getSelectedKey() : "";
            var sShowAs = oShowAsControl ? oShowAsControl.getSelectedKey() : "";
            var sDescription = oDescriptionControl ? oDescriptionControl.getValue() : "";

            // Validate required title field
            if (!sTitle) {
                MessageToast.show("Please enter a title for the event");
                return;
            }

            // Combine date and start time
            var oStart = new Date(oDate);
            oStart.setHours(oStartTime.getHours(), oStartTime.getMinutes(), 0, 0);

            var oEnd = new Date(oDate);
            oEnd.setHours(oEndTime.getHours(), oEndTime.getMinutes(), 0, 0);

            // Validate that end time is after start time
            if (oEnd <= oStart) {
                MessageToast.show("End time must be after start time");
                return;
            }

            // Create the new appointment object with the title as the main text
            var newAppointment = {
                start: oStart,
                end: oEnd,
                title: sTitle, // Use the actual title here
                info: bInPerson, // This is secondary info
                type: "Type01",
                attendees: sAttendees,
                description: sDescription,
                recurring: bMakeRecurring,
                allDay: bAllDay,
                responseOption: sResponseOption,
                showAs: sShowAs,
                category: "Appointment",
                recurrence: bMakeRecurring ? "Recurring" : "Non-recurring",
                inPerson: bInPerson,
                organizerStatus: "sent",
                attendeeStatus: "accepted"
            };

            // Get the model and add the new appointment to the first person's calendar
            var oModel = this.getView().getModel();
            var aPeople = oModel.getProperty("/people");

            if (aPeople && aPeople.length > 0) {
                // Add to the first person's appointments
                aPeople[0].appointments.push(newAppointment);

                // Update the model
                oModel.setProperty("/people", aPeople);

                // Close the dialog
                if (this._oRemarksDialog) {
                    this._oRemarksDialog.close();
                }

                // Show success message
                MessageToast.show("Event '" + sTitle + "' has been created");

                // Refresh the calendar to show the new appointment
                this.byId("calendar").getBinding("rows").refresh(true);
            }
        },

        onCancelEventFromDialog: function () {
            // Close the dialog without saving
            if (this._oRemarksDialog) {
                this._oRemarksDialog.close();
            }
        },

        onToggleGroupMode: function () {
            var oViewModel = this.getView().getModel("view");
            var sMode = oViewModel.getProperty("/groupMode");
            oViewModel.setProperty("/groupMode", sMode === "Group" ? "None" : "Group");
            this.byId("calendar").rerender();
        },

        // Meet Now functionality
        onMeetNowPress: function () {
            this._openMeetNowDialog();
        },

        _openMeetNowDialog: function () {
            // Create dialog if it doesn't exist
            if (!this._oMeetNowDialog) {
                // Create meeting name input
                var oMeetingNameInput = new Input({
                    placeholder: "Enter meeting name",
                    value: "Meeting with Nadeem Abbas",
                    liveChange: function (oEvent) {
                        this._sMeetingName = oEvent.getParameter("value");
                    }.bind(this)
                });

                // Create start meeting button
                var oStartButton = new Button({
                    text: "Start meeting",
                    type: "Emphasized",
                    press: function () {
                        this._startMeeting();
                    }.bind(this)
                });

                // Create get link button
                var oGetLinkButton = new Button({
                    text: "Get a link to share",
                    press: function () {
                        this._getMeetingLink();
                    }.bind(this)
                });

                // Create dialog
                this._oMeetNowDialog = new Dialog({
                    title: "Start a meeting now",
                    content: [
                        new Text({ text: "Meeting name" }),
                        oMeetingNameInput
                    ],
                    beginButton: oStartButton,
                    endButton: oGetLinkButton,
                    afterClose: function () {
                        // Reset meeting name when dialog closes
                        oMeetingNameInput.setValue("Meeting with Nadeem Abbas");
                    }
                });

                // Add dialog to view as dependent
                this.getView().addDependent(this._oMeetNowDialog);
            }

            // Open dialog
            this._oMeetNowDialog.open();
        },

        _startMeeting: function () {
            var meetingName = this._sMeetingName || "Meeting with Nadeem Abbas";

            // Create a calendar event for the meeting
            this._createMeetingEvent(meetingName);

            // Close the dialog
            if (this._oMeetNowDialog) {
                this._oMeetNowDialog.close();
            }

            MessageToast.show("Starting meeting: " + meetingName);

            // In a real application, you would integrate with your video conferencing API here
            // For demonstration, we'll just show a message
            sap.m.URLHelper.redirect("https://teams.microsoft.com", false);
        },

        _getMeetingLink: function () {
            // Generate a random meeting ID
            var meetingId = Math.random().toString(36).substring(2, 15) +
                Math.random().toString(36).substring(2, 15);

            // Create the meeting link
            var meetingLink = "https://teams.microsoft.com/l/meetup-join/19:meeting_" +
                meetingId +
                "@thread.v2/0?context=%7B%22Tid%22:%2272f988bf-86f1-41af-91ab-2d7cd011db47%22,%22Oid%22:%22b8b4d3c1-8a4f-4c3e-9c3c-1f2e7d1f3e7a%22%7D";

            // Copy to clipboard
            navigator.clipboard.writeText(meetingLink).then(function () {
                MessageToast.show("Meeting link copied to clipboard");
            }).catch(function (err) {
                console.error('Could not copy text: ', err);
                MessageToast.show("Failed to copy link");
            });

            // Close the dialog
            if (this._oMeetNowDialog) {
                this._oMeetNowDialog.close();
            }
        },

        _createMeetingEvent: function (meetingName) {
            var oNow = UI5Date.getInstance();
            var oStart = UI5Date.getInstance(oNow);
            var oEnd = UI5Date.getInstance(oStart);
            oEnd.setHours(oEnd.getHours() + 1); // 1 hour meeting

            var newAppointment = {
                start: oStart,
                end: oEnd,
                title: meetingName,
                info: "Online Meeting",
                type: "Type01",
                pic: "sap-icon://video",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "Virtual",
                organizerStatus: "sent",
                attendeeStatus: "accepted",
                isOnline: true,
                meetingLink: this._sMeetingLink || ""
            };

            // Get the model and add the new appointment to the first person's calendar
            var oModel = this.getView().getModel();
            var aPeople = oModel.getProperty("/people");

            if (aPeople && aPeople.length > 0) {
                aPeople[0].appointments.push(newAppointment);
                oModel.setProperty("/people", aPeople);

                // Refresh the calendar to show the new appointment
                this.byId("calendar").getBinding("rows").refresh(true);
            }
        },

        // Join meeting functionality with late join detection
        onJoinMeeting: function () {
            var oViewModel = this.getView().getModel("view");
            var oSelectedEvent = oViewModel.getProperty("/selectedEvent");
            var oNow = UI5Date.getInstance();
            var oEventStart = new Date(oSelectedEvent.start);

            // Calculate time difference in minutes
            var iDiffMinutes = (oNow - oEventStart) / (1000 * 60);

            // Check if user is joining 30+ minutes late
            if (iDiffMinutes > 30) {
                // Create a new event starting now and ending 30 minutes later
                var oNewStart = UI5Date.getInstance(oNow);
                var oNewEnd = UI5Date.getInstance(oNow);
                oNewEnd.setMinutes(oNewEnd.getMinutes() + 30);

                var newAppointment = {
                    start: oNewStart,
                    end: oNewEnd,
                    title: "Follow-up: " + oSelectedEvent.title,
                    info: oSelectedEvent.info || "",
                    type: "Type01",
                    category: "Meeting",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: oSelectedEvent.inPerson || "Virtual",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted",
                    meetingLink: oSelectedEvent.meetingLink || ""
                };

                // Add to the first person's appointments
                var oModel = this.getView().getModel();
                var aPeople = oModel.getProperty("/people");

                if (aPeople && aPeople.length > 0) {
                    aPeople[0].appointments.push(newAppointment);
                    oModel.setProperty("/people", aPeople);

                    MessageToast.show("Created a new follow-up meeting for 30 minutes");
                }
            }

            // If the event has a meeting link, open it
            if (oSelectedEvent.meetingLink) {
                sap.m.URLHelper.redirect(oSelectedEvent.meetingLink, true);
            } else {
                MessageToast.show("No meeting link available");
            }
        },

        // Modified onExit method
        onExit: function () {
            // Clean up all fragments when the controller is destroyed
            if (this._oRemarksDialog) {
                this._oRemarksDialog.destroy();
                this._oRemarksDialog = null;
            }

            if (this._oChannelMeetingDialog) {
                this._oChannelMeetingDialog.destroy();
                this._oChannelMeetingDialog = null;
            }

            if (this._oVirtualAppointmentDialog) {
                this._oVirtualAppointmentDialog.destroy();
                this._oVirtualAppointmentDialog = null;
            }

            if (this._oEventDetailsPopover) {
                this._oEventDetailsPopover.destroy();
                this._oEventDetailsPopover = null;
            }

            // Clean up Meet Now dialog
            if (this._oMeetNowDialog) {
                this._oMeetNowDialog.destroy();
                this._oMeetNowDialog = null;
            }

            // Clear the interval for updating current time
            if (this._currentTimeInterval) {
                clearInterval(this._currentTimeInterval);
            }
        }
    });
});

UPDATED CODE 10

sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/ui/core/date/UI5Date",
    "sap/ui/core/Fragment",
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/m/Token",
    "sap/ui/model/odata/v2/ODataModel",
    "sap/m/Dialog",
    "sap/m/Input",
    "sap/m/Button",
    "sap/m/Text",
    "sap/m/SuggestionItem"
], function (Controller, JSONModel, MessageToast, UI5Date, Fragment, Filter, FilterOperator, Token, ODataModel, Dialog, Input, Button, Text, SuggestionItem) {
    "use strict";
    return Controller.extend("com.capexrevex.capexrevex.controller.View1", {
        onInit: function () {

            // Initialize attendees model with value property
            var oAttendeesModel = new JSONModel({
                value: [] // This will hold the attendees array
            });
            this.getView().setModel(oAttendeesModel, "attendees");

            // Set initial view to Work week
            this.byId("viewSelectButton").setText("Work week");
            // Set initial time scale and days to show
            this._updateTimeScale(30);
            this._updateWorkWeekView(5);
            // Get today's date
            var today = UI5Date.getInstance();
            // Set the calendar to start from today
            var startDate = UI5Date.getInstance(
                today.getFullYear(),
                today.getMonth(),
                today.getDate(),
                8, 0 // Start at 8 AM
            );
            // Initialize the view model with data
            var oViewModel = new JSONModel({
                startDate: startDate,
                people: [
                    {
                        name: "John Doe",
                        role: "Developer",
                        appointments: []
                    }
                ],
                selectedEvent: {
                    title: "",
                    start: UI5Date.getInstance(),
                    end: UI5Date.getInstance(),
                    info: "",
                    type: "Type01",
                    isNew: true // Flag to identify new appointments
                },
                filters: {
                    appointments: true,
                    meetings: true,
                    reservations: false,
                    categories: [],
                    showAs: [],
                    recurrence: [],
                    inPerson: [],
                    organizer: {
                        sent: true,
                        draft: true
                    },
                    attendee: {
                        accepted: true,
                        declined: true,
                        followed: true,
                        tentative: true,
                        canceled: true,
                        notResponded: true
                    }
                },
                currentView: "Work week", // Track the current calendar view
                timeScale: "30 minutes", // Track the current time scale
                daysToShow: 5, // Track the number of days to show in work week view
                workWeekMenuOpen: false, // Track if work week submenu is open
                timeScaleMinutes: 30, // Add numeric value for time scale
                groupMode: "Group", // For group appointment mode
                currentTime: UI5Date.getInstance() // Current system time
            });
            // Create additional model with extended data using UI5Date
            var oModel = new JSONModel();
            oModel.setData({
                startDate: startDate,
                people: [
                    {
                        pic: "sap-icon://hr-approval/",
                        name: "John Miller",
                        role: "team member",
                        appointments: []
                    },
                    {
                        pic: "sap-icon://hr-approval",
                        name: "Donna Moore",
                        role: "team member",
                        appointments: []
                    },
                    {
                        pic: "sap-icon://hr-approval",
                        name: "Alex Johnson",
                        role: "team member",
                        appointments: []
                    },
                    {
                        pic: "sap-icon://hr-approval",
                        name: "Sarah Williams",
                        role: "team member",
                        appointments: []
                    }
                ]
            });
            // Set both models to the view
            this.getView().setModel(oViewModel, "view");
            this.getView().setModel(oModel);
            // Initialize filter arrays
            this._aFilters = [];
            // Update date display in filter popover
            this._updateDateDisplay();
            // Initialize OData model for scheduling service
            // Initialize OData v4 model for scheduling service
            var oSchedulingModel = new ODataModel({
                serviceUrl: "/schedulingservice/", // Ensure this matches your backend service
                synchronizationMode: "None",
                autoExpandSelect: true
            });


            // Add metadata error handling
            oSchedulingModel.attachMetadataFailed(function (oEvent) {
                var oParams = oEvent.getParameters();
                console.error("Metadata loading failed:", oParams);
                MessageToast.show("Error loading service metadata. Check service URL.");
            });
            // Add request failed handler
            oSchedulingModel.attachRequestFailed(function (oEvent) {
                var oParams = oEvent.getParameters();
                console.error("OData request failed:", oParams);
                MessageToast.show("OData request failed: " + (oParams.message || "Unknown error"));
            });

            this.getView().setModel(oSchedulingModel, "scheduling");
            this.getView().setModel(oSchedulingModel, "scheduling");
            // Initialize attendees model// Initialize attendees model with mock data as fallback
            var oAttendeesModel = new JSONModel({
                value: [
                    { name: "Portal Admin", email: "donotreply@risedx.com", },
                    { name: "Pushpak Jha", email: "pushpak.jha@risedx.com", }
                ]
            });
            this.getView().setModel(oAttendeesModel, "attendees");
            // Load attendees data
            this._loadAttendees();
            // Set up interval to update current time display every minute
            this._currentTimeInterval = setInterval(this._updateCurrentTime.bind(this), 60000);
            // Initial update of current time
            this._updateCurrentTime();
        },
        // Update current time in the model
        _updateCurrentTime: function () {
            var oNow = UI5Date.getInstance();
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/currentTime", oNow);
        },
        // Load attendees from scheduling service
        // _loadAttendees: function () {
        //     var oSchedulingModel = this.getView().getModel("scheduling");
        //     var oAttendeesModel = this.getView().getModel("attendees");
        //     var that = this;

        //     // Read attendees from OData service
        //     oSchedulingModel.read("/getAttendees", {
        //         success: function (oData) {
        //             if (oData && oData.results) {
        //                 // Transform the data to match our expected structure
        //                 var aAttendees = oData.results.map(function (oAttendee) {
        //                     return {
        //                         name: oAttendee.Name || oAttendee.name || "",
        //                         email: oAttendee.Email || oAttendee.email || "",
        //                         status: oAttendee.Status || oAttendee.status || "Free"
        //                     };
        //                 });

        //                 // Set the value property in the attendees model
        //                 oAttendeesModel.setProperty("/value", aAttendees);

        //                 // Log the loaded attendees for debugging
        //                 console.log("Attendees loaded successfully:", aAttendees.length, "attendees");
        //                 MessageToast.show("Attendees loaded successfully: " + aAttendees.length + " found");
        //             } else {
        //                 MessageToast.show("No attendees found");
        //                 oAttendeesModel.setProperty("/value", []);
        //             }
        //         },
        //         error: function (oError) {
        //             console.error("Error loading attendees:", oError);
        //             MessageToast.show("Error loading attendees from service");
        //             // Fallback to empty array if service fails
        //             oAttendeesModel.setProperty("/value", []);
        //         }
        //     });
        // },

        // Load attendees from scheduling service
        _loadAttendees: function () {
            var oSchedulingModel = this.getView().getModel("scheduling");
            var oAttendeesModel = this.getView().getModel("attendees");
            var that = this;

            // Read attendees from OData service
            oSchedulingModel.read("/getAttendees", {
                success: function (oData) {
                    if (oData && oData.value) { // Use 'value' property as per OData standard
                        // Transform the data to match our expected structure
                        var aAttendees = oData.value.map(function (oAttendee) {
                            return {
                                name: oAttendee.Name || oAttendee.name || "",
                                email: oAttendee.Email || oAttendee.email || "",
                                status: oAttendee.Status || oAttendee.status || "Free"
                            };
                        });

                        // Store in attendees model using /value property
                        oAttendeesModel.setProperty("/value", aAttendees);
                        MessageToast.show("Attendees loaded successfully: " + aAttendees.length + " found");
                    } else {
                        MessageToast.show("No attendees found");
                        oAttendeesModel.setProperty("/value", [
                            { name: "Portal Admin", email: "donotreply@risedx.com", },
                            { name: "Pushpak Jha", email: "pushpak.jha@risedx.com", }
                        ]);
                    }
                },
                error: function (oError) {
                    console.error("Error loading attendees:", oError);
                    MessageToast.show("Error loading attendees from service");
                    // Fallback to empty array if service fails
                    oAttendeesModel.setProperty("/value",);
                }
            });
        },
        // Create a new attendee via OData service
        // _createAttendee: function (oNewAttendee) {
        //     var oSchedulingModel = this.getView().getModel("scheduling");
        //     var oAttendeesModel = this.getView().getModel("attendees");
        //     var that = this;

        //     // Create the attendee via OData service
        //     oSchedulingModel.create("/getAttendees", oNewAttendee, {
        //         success: function (oData, oResponse) {
        //             // Refresh the attendees list from backend
        //             that._loadAttendees();
        //             MessageToast.show("Attendee created successfully");
        //         },
        //         error: function (oError) {
        //             console.error("Error creating attendee:", oError);
        //             MessageToast.show("Error creating attendee");
        //         }
        //     });
        // },

        // Create a new attendee via OData service
        _createAttendee: function (oNewAttendee) {
            var oSchedulingModel = this.getView().getModel("scheduling");
            var oAttendeesModel = this.getView().getModel("attendees");
            var that = this;

            // Create the attendee via OData service
            oSchedulingModel.create("/getAttendees", oNewAttendee, {
                success: function (oData, oResponse) {
                    // Refresh the attendees list from backend
                    that._loadAttendees();

                    // Also update local model immediately so UI updates
                    var aAttendees = oAttendeesModel.getProperty("/value") || [];
                    aAttendees.push({
                        name: oNewAttendee.Name || oNewAttendee.name || "",
                        email: oNewAttendee.Email || oNewAttendee.email || "",
                        status: oNewAttendee.Status || oNewAttendee.status || "Free"
                    });
                    oAttendeesModel.setProperty("/value", aAttendees);

                    MessageToast.show("Attendee created successfully");
                },
                error: function (oError) {
                    console.error("Error creating attendee:", oError);
                    MessageToast.show("Error creating attendee");
                }
            });
        },

        // Handle attendee suggestions in MultiInput
        // onAttendeeSuggest: function (oEvent) {
        //     var sTerm = oEvent.getParameter("suggestValue");
        //     var oMultiInput = oEvent.getSource();
        //     var oAttendeesModel = this.getView().getModel("attendees");

        //     if (!oAttendeesModel) {
        //         return;
        //     }

        //     // Get attendees from the model's value property
        //     var aAttendees = oAttendeesModel.getProperty("/value") || [];
        //     var aFilteredAttendees = [];

        //     if (sTerm) {
        //         // Filter attendees based on search term
        //         aFilteredAttendees = aAttendees.filter(function (oAttendee) {
        //             return oAttendee.name.toLowerCase().includes(sTerm.toLowerCase()) ||
        //                    oAttendee.email.toLowerCase().includes(sTerm.toLowerCase());
        //         });
        //     } else {
        //         aFilteredAttendees = aAttendees;
        //     }

        //     // Update suggestion items
        //     oMultiInput.destroySuggestionItems();
        //     aFilteredAttendees.forEach(function (oAttendee) {
        //         // Create a custom suggestion item with name, email, and status
        //         var oSuggestionItem = new SuggestionItem({
        //             key: oAttendee.email,
        //             text: oAttendee.name + " (" + oAttendee.email + ")",
        //             description: oAttendee.status
        //         });

        //         // Set different icons based on status
        //         switch (oAttendee.status.toLowerCase()) {
        //             case "free":
        //                 oSuggestionItem.setIcon("sap-icon://accept");
        //                 break;
        //             case "busy":
        //                 oSuggestionItem.setIcon("sap-icon://busy");
        //                 break;
        //             case "tentative":
        //                 oSuggestionItem.setIcon("sap-icon://question-mark");
        //                 break;
        //             default:
        //                 oSuggestionItem.setIcon("sap-icon://employee");
        //         }

        //         oMultiInput.addSuggestionItem(oSuggestionItem);
        //     });
        // },

        // Handle attendee suggestions in MultiInput
        onAttendeeSuggest: function (oEvent) {
            var sTerm = oEvent.getParameter("suggestValue");
            var oMultiInput = oEvent.getSource();
            var oAttendeesModel = this.getView().getModel("attendees");

            if (!oAttendeesModel) {
                return;
            }

            // Get attendees from the model's value property
            var aAttendees = oAttendeesModel.getProperty("/value") || [];
            var aFilteredAttendees = [];

            if (sTerm) {
                // Filter attendees based on search term
                aFilteredAttendees = aAttendees.filter(function (oAttendee) {
                    return oAttendee.name.toLowerCase().includes(sTerm.toLowerCase()) ||
                        oAttendee.email.toLowerCase().includes(sTerm.toLowerCase());
                });
            } else {
                aFilteredAttendees = aAttendees;
            }

            // Update suggestion items
            oMultiInput.destroySuggestionItems();
            aFilteredAttendees.forEach(function (oAttendee) {
                var oSuggestionItem = new SuggestionItem({
                    key: oAttendee.email,
                    text: oAttendee.name + " (" + oAttendee.email + ")",
                    description: oAttendee.status
                });

                // Set different icons based on status
                switch (oAttendee.status.toLowerCase()) {
                    case "free":
                        oSuggestionItem.setIcon("sap-icon://accept");
                        break;
                    case "busy":
                        oSuggestionItem.setIcon("sap-icon://busy");
                        break;
                    case "tentative":
                        oSuggestionItem.setIcon("sap-icon://question-mark");
                        break;
                    default:
                        oSuggestionItem.setIcon("sap-icon://employee");
                }

                oMultiInput.addSuggestionItem(oSuggestionItem);
            });
        },
        // Handle token addition in MultiInput
        // onAttendeeTokenChange: function (oEvent) {
        //     var oMultiInput = oEvent.getSource();
        //     var sInputValue = oMultiInput.getValue().trim();

        //     if (!sInputValue) {
        //         return;
        //     }

        //     // Check if input is an email or should be treated as search
        //     if (this._isEmailValid(sInputValue)) {
        //         // Check if this email already exists in the attendees model
        //         var oAttendeesModel = this.getView().getModel("attendees");
        //         var aAttendees = oAttendeesModel.getProperty("/value") || [];
        //         var bExists = aAttendees.some(function (oAttendee) {
        //             return oAttendee.email === sInputValue;
        //         });

        //         if (!bExists) {
        //             // Create a new attendee
        //             var oNewAttendee = {
        //                 name: sInputValue.split('@')[0], // Use the part before @ as name
        //                 email: sInputValue,
        //                 status: "Free" // Default status
        //             };
        //             // Create the attendee via OData
        //             this._createAttendee(oNewAttendee);
        //         }

        //         // Create token for the email
        //         var oToken = new Token({
        //             key: sInputValue,
        //             text: sInputValue.split('@')[0] + " (" + sInputValue + ")"
        //         });
        //         oMultiInput.addToken(oToken);
        //         oMultiInput.setValue("");
        //     } else {
        //         // Trigger suggestion for non-email input
        //         this.onAttendeeSuggest(oEvent);
        //     }
        // },

        // Handle token addition in MultiInput
        onAttendeeTokenChange: function (oEvent) {
            var oMultiInput = oEvent.getSource();
            var sInputValue = oMultiInput.getValue().trim();

            if (!sInputValue) {
                return;
            }

            // Check if input is an email or should be treated as search
            if (this._isEmailValid(sInputValue)) {
                // Check if this email already exists in the attendees model
                var oAttendeesModel = this.getView().getModel("attendees");
                var aAttendees = oAttendeesModel.getProperty("/value") || [];
                var bExists = aAttendees.some(function (oAttendee) {
                    return oAttendee.email === sInputValue;
                });

                if (!bExists) {
                    // Create a new attendee
                    var oNewAttendee = {
                        name: sInputValue.split('@')[0],
                        email: sInputValue,
                        status: "Free"
                    };
                    // Create the attendee via OData
                    this._createAttendee(oNewAttendee);
                }

                // Create token for the email
                var oToken = new Token({
                    key: sInputValue,
                    text: sInputValue.split('@')[0] + " (" + sInputValue + ")"
                });
                oMultiInput.addToken(oToken);
                oMultiInput.setValue("");
            } else {
                // Trigger suggestion for non-email input
                this.onAttendeeSuggest(oEvent);
            }
        },
        // Validate email format
        _isEmailValid: function (sEmail) {
            var re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            return re.test(sEmail);
        },
        // Create meeting scheduling
        createMeetingScheduling: function (oMeetingData) {
            var oSchedulingModel = this.getView().getModel("scheduling");
            var that = this;

            oSchedulingModel.create("/meetingScheduling", oMeetingData, {
                success: function (oData) {
                    MessageToast.show("Meeting scheduled successfully!");
                    // Refresh attendees after creating meeting
                    that._loadAttendees();
                    // Add the meeting to the calendar
                    that._addMeetingToCalendar(oData);
                },
                error: function (oError) {
                    console.error("Error scheduling meeting:", oError);
                    MessageToast.show("Failed to schedule meeting");
                    // Fallback: Add to local calendar
                    that._addMeetingToCalendar(oMeetingData);
                }
            });
        },
        // Helper method to add meeting to calendar
        _addMeetingToCalendar: function (oMeetingData) {
            var oModel = this.getView().getModel();
            var aPeople = oModel.getProperty("/people");

            if (aPeople && aPeople.length > 0) {
                var newAppointment = {
                    start: new Date(oMeetingData.StartDateTime),
                    end: new Date(oMeetingData.EndDateTime),
                    title: oMeetingData.MeetingTitle,
                    info: oMeetingData.Location || "Online Meeting",
                    type: "Type01",
                    pic: "sap-icon://group",
                    category: "Meeting",
                    showAs: "Busy",
                    recurrence: oMeetingData.IsRecurring ? "Recurring" : "Non-recurring",
                    inPerson: oMeetingData.IsVirtual ? "Virtual" : "In-person",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted",
                    attendees: oMeetingData.Attendees || []
                };

                aPeople[0].appointments.push(newAppointment);
                oModel.setProperty("/people", aPeople);

                // Refresh calendar
                this.byId("calendar").getBinding("rows").refresh(true);
            }
        },
        // Update date display in filter popover
        _updateDateDisplay: function () {
            var oDateDisplay = this.byId("dateDisplay");
            if (oDateDisplay) {
                var today = UI5Date.getInstance();
                var options = { weekday: 'long', day: 'numeric' };
                var dateText = today.toLocaleDateString('en-US', options);
                oDateDisplay.setText(dateText);
            }
        },
        // Role-based functionality
        roles: {
            donna: "Donna Moore",
            manager: "manager",
            admin: "admin"
        },

        handleRoleChange: function () {
            this.getView().getModel().refresh(true);
        },

        getUserRole: function () {
            return this.roles[this.byId("userRole").getSelectedKey()];
        },

        canModifyAppointments: function (sRole) {
            var sUserRole = this.getUserRole();
            if (sUserRole === this.roles.manager || sUserRole === this.roles.admin || sUserRole === sRole) {
                return true;
            }
            return false;
        },

        // Filter functionality
        onFilterChange: function (oEvent) {
            var sFilterType = oEvent.getSource().getId().replace("Checkbox", "");
            var bSelected = oEvent.getParameter("selected");

            // Update filter model
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            oFilters[sFilterType.toLowerCase()] = bSelected;
            oViewModel.setProperty("/filters", oFilters);

            // Apply filters
            this.applyFilters();
        },

        applyFilters: function () {
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");

            // Clear existing filters
            this._aFilters = [];

            // Apply category filters
            if (!oFilters.appointments) {
                this._aFilters.push(new Filter("category", FilterOperator.NE, "Appointment"));
            }
            if (!oFilters.meetings) {
                this._aFilters.push(new Filter("category", FilterOperator.NE, "Meeting"));
            }
            if (!oFilters.reservations) {
                this._aFilters.push(new Filter("category", FilterOperator.NE, "Reservation"));
            }

            // Apply additional filters based on selected options
            if (oFilters.categories && oFilters.categories.length > 0) {
                this._aFilters.push(new Filter("category", FilterOperator.Contains, oFilters.categories.join("|")));
            }
            if (oFilters.showAs && oFilters.showAs.length > 0) {
                this._aFilters.push(new Filter("showAs", FilterOperator.Contains, oFilters.showAs.join("|")));
            }
            if (oFilters.recurrence && oFilters.recurrence.length > 0) {
                this._aFilters.push(new Filter("recurrence", FilterOperator.Contains, oFilters.recurrence.join("|")));
            }
            if (oFilters.inPerson && oFilters.inPerson.length > 0) {
                this._aFilters.push(new Filter("inPerson", FilterOperator.Contains, oFilters.inPerson.join("|")));
            }

            // Apply organizer filters
            var aOrganizerFilters = [];
            if (oFilters.organizer.sent) {
                aOrganizerFilters.push(new Filter("organizerStatus", FilterOperator.EQ, "sent"));
            }
            if (oFilters.organizer.draft) {
                aOrganizerFilters.push(new Filter("organizerStatus", FilterOperator.EQ, "draft"));
            }
            if (aOrganizerFilters.length > 0) {
                this._aFilters.push(new Filter({
                    filters: aOrganizerFilters,
                    and: false
                }));
            }

            // Apply attendee filters
            var aAttendeeFilters = [];
            if (oFilters.attendee.accepted) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "accepted"));
            }
            if (oFilters.attendee.declined) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "declined"));
            }
            if (oFilters.attendee.followed) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "followed"));
            }
            if (oFilters.attendee.tentative) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "tentative"));
            }
            if (oFilters.attendee.canceled) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "canceled"));
            }
            if (oFilters.attendee.notResponded) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "notResponded"));
            }
            if (aAttendeeFilters.length > 0) {
                this._aFilters.push(new Filter({
                    filters: aAttendeeFilters,
                    and: false
                }));
            }

            // Apply filters to the calendar
            var oCalendar = this.byId("calendar");
            var oBinding = oCalendar.getBinding("rows");
            if (this._aFilters.length > 0) {
                oBinding.filter(this._aFilters);
            } else {
                oBinding.filter([]);
            }

            // Update filter button text
            var oFilterButton = this.byId("_IDGenButton7");
            var iFilterCount = this._aFilters.length;
            oFilterButton.setText(iFilterCount > 0 ? "Filter applied (" + iFilterCount + ")" : "Filter applied");
        },

        // Filter popover handlers
        onAppointmentsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("appointmentsFilterPopover").openBy(oButton);
        },

        onMeetingsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("meetingsFilterPopover").openBy(oButton);
        },

        onReservationsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("reservationsFilterPopover").openBy(oButton);
        },

        onCategoriesFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("categoriesFilterPopover").openBy(oButton);
        },

        onShowAsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("showAsFilterPopover").openBy(oButton);
        },

        onRecurrenceFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("recurrenceFilterPopover").openBy(oButton);
        },

        onInPersonFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("inPersonFilterPopover").openBy(oButton);
        },

        // Organizer and Attendee filter handlers
        onOrganizerFilterPress: function (oEvent) {
            var oOptionsBox = this.byId("organizerOptions");
            oOptionsBox.setVisible(!oOptionsBox.getVisible());
        },

        onAttendeeFilterPress: function (oEvent) {
            var oOptionsBox = this.byId("attendeeOptions");
            oOptionsBox.setVisible(!oOptionsBox.getVisible());
        },

        onOrganizerFilterChange: function (oEvent) {
            var sId = oEvent.getSource().getId();
            var bSelected = oEvent.getParameter("selected");
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");

            // Update the corresponding filter property
            if (sId === "sentCheckbox") {
                oFilters.organizer.sent = bSelected;
            } else if (sId === "draftCheckbox") {
                oFilters.organizer.draft = bSelected;
            }

            oViewModel.setProperty("/filters", oFilters);
            this.applyFilters();
        },

        onAttendeeFilterChange: function (oEvent) {
            var sId = oEvent.getSource().getId();
            var bSelected = oEvent.getParameter("selected");
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");

            // Update the corresponding filter property
            if (sId === "acceptedCheckbox") {
                oFilters.attendee.accepted = bSelected;
            } else if (sId === "declinedCheckbox") {
                oFilters.attendee.declined = bSelected;
            } else if (sId === "followedCheckbox") {
                oFilters.attendee.followed = bSelected;
            } else if (sId === "tentativeCheckbox") {
                oFilters.attendee.tentative = bSelected;
            } else if (sId === "canceledCheckbox") {
                oFilters.attendee.canceled = bSelected;
            } else if (sId === "notRespondedCheckbox") {
                oFilters.attendee.notResponded = bSelected;
            }

            oViewModel.setProperty("/filters", oFilters);
            this.applyFilters();
        },

        onUnselectAllRight: function () {
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");

            // Reset organizer filters
            oFilters.organizer.sent = false;
            oFilters.organizer.draft = false;

            // Reset attendee filters
            oFilters.attendee.accepted = false;
            oFilters.attendee.declined = false;
            oFilters.attendee.followed = false;
            oFilters.attendee.tentative = false;
            oFilters.attendee.canceled = false;
            oFilters.attendee.notResponded = false;

            oViewModel.setProperty("/filters", oFilters);

            // Update the checkboxes
            this.byId("sentCheckbox").setSelected(false);
            this.byId("draftCheckbox").setSelected(false);
            this.byId("acceptedCheckbox").setSelected(false);
            this.byId("declinedCheckbox").setSelected(false);
            this.byId("followedCheckbox").setSelected(false);
            this.byId("tentativeCheckbox").setSelected(false);
            this.byId("canceledCheckbox").setSelected(false);
            this.byId("notRespondedCheckbox").setSelected(false);

            this.applyFilters();
        },

        // Unselect all handlers
        onAppointmentsUnselectAll: function () {
            this._unselectAllCheckboxes("appointmentsFilterList");
        },

        onMeetingsUnselectAll: function () {
            this._unselectAllCheckboxes("meetingsFilterList");
        },

        onReservationsUnselectAll: function () {
            this._unselectAllCheckboxes("reservationsFilterList");
        },

        onCategoriesUnselectAll: function () {
            this._unselectAllCheckboxes("categoriesFilterList");
        },

        onShowAsUnselectAll: function () {
            this._unselectAllCheckboxes("showAsFilterList");
        },

        onRecurrenceUnselectAll: function () {
            this._unselectAllCheckboxes("recurrenceFilterList");
        },

        onInPersonUnselectAll: function () {
            this._unselectAllCheckboxes("inPersonFilterList");
        },

        _unselectAllCheckboxes: function (sListId) {
            var oList = this.byId(sListId);
            var aItems = oList.getItems();

            aItems.forEach(function (oItem) {
                if (oItem.isA("sap.m.CheckBox")) {
                    oItem.setSelected(false);
                }
            });
        },

        // Filter selection handlers
        onAppointmentsFilterSelect: function (oEvent) {
            this._updateFilterArray("appointments", oEvent);
        },

        onMeetingsFilterSelect: function (oEvent) {
            this._updateFilterArray("meetings", oEvent);
        },

        onReservationsFilterSelect: function (oEvent) {
            this._updateFilterArray("reservations", oEvent);
        },

        onCategoriesFilterSelect: function (oEvent) {
            this._updateFilterArray("categories", oEvent);
        },

        onShowAsFilterSelect: function (oEvent) {
            this._updateFilterArray("showAs", oEvent);
        },

        onRecurrenceFilterSelect: function (oEvent) {
            this._updateFilterArray("recurrence", oEvent);
        },

        onInPersonFilterSelect: function (oEvent) {
            this._updateFilterArray("inPerson", oEvent);
        },

        _updateFilterArray: function (sFilterType, oEvent) {
            var sValue = oEvent.getSource().getText();
            var bSelected = oEvent.getParameter("selected");
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");

            if (!oFilters[sFilterType]) {
                oFilters[sFilterType] = [];
            }

            if (bSelected) {
                if (oFilters[sFilterType].indexOf(sValue) === -1) {
                    oFilters[sFilterType].push(sValue);
                }
            } else {
                var iIndex = oFilters[sFilterType].indexOf(sValue);
                if (iIndex !== -1) {
                    oFilters[sFilterType].splice(iIndex, 1);
                }
            }

            oViewModel.setProperty("/filters", oFilters);
            this.applyFilters();
        },

        onClearFilters: function () {
            // Reset all filter checkboxes
            var aCheckBoxIds = [
                "appointmentsCheckbox", "meetingsCheckbox", "reservationsCheckbox"
            ];

            aCheckBoxIds.forEach(function (sId) {
                var oCheckBox = this.byId(sId);
                if (oCheckBox) {
                    oCheckBox.setSelected(sId === "appointmentsCheckbox" || sId === "meetingsCheckbox");
                }
            }.bind(this));

            // Reset organizer and attendee filters
            this.byId("sentCheckbox").setSelected(true);
            this.byId("draftCheckbox").setSelected(true);
            this.byId("acceptedCheckbox").setSelected(true);
            this.byId("declinedCheckbox").setSelected(true);
            this.byId("followedCheckbox").setSelected(true);
            this.byId("tentativeCheckbox").setSelected(true);
            this.byId("canceledCheckbox").setSelected(true);
            this.byId("notRespondedCheckbox").setSelected(true);

            // Reset filter arrays in model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/filters", {
                appointments: true,
                meetings: true,
                reservations: false,
                categories: [],
                showAs: [],
                recurrence: [],
                inPerson: [],
                organizer: {
                    sent: true,
                    draft: true
                },
                attendee: {
                    accepted: true,
                    declined: true,
                    followed: true,
                    tentative: true,
                    canceled: true,
                    notResponded: true
                }
            });

            // Apply empty filters
            this._aFilters = [];
            var oCalendar = this.byId("calendar");
            oCalendar.getBinding("rows").filter([]);

            // Update filter button text
            this.byId("_IDGenButton7").setText("Filter applied");
            MessageToast.show("All filters cleared");
        },

        // Drag and Drop functionality
        handleAppointmentDragEnter: function (oEvent) {
            if (this.isAppointmentOverlap(oEvent, oEvent.getParameter("calendarRow"))) {
                oEvent.preventDefault();
            }
        },

        handleAppointmentDrop: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                oCalendarRow = oEvent.getParameter("calendarRow"),
                bCopy = oEvent.getParameter("copy"),
                sTitle = oAppointment.getTitle(),
                oModel = this.getView().getModel(),
                oAppBindingContext = oAppointment.getBindingContext(),
                oRowBindingContext = oCalendarRow.getBindingContext(),
                handleAppointmentDropBetweenRows = function () {
                    var aPath = oAppBindingContext.getPath().split("/");
                    var iIndex = aPath.pop();
                    var sRowAppointmentsPath = aPath.join("/");
                    oRowBindingContext.getObject().appointments.push(
                        oModel.getProperty(oAppBindingContext.getPath())
                    );
                    oModel.getProperty(sRowAppointmentsPath).splice(iIndex, 1);
                };

            if (bCopy) { // "copy" appointment
                var oProps = Object.assign({}, oModel.getProperty(oAppointment.getBindingContext().getPath()));
                oProps.start = oStartDate;
                oProps.end = oEndDate;
                oRowBindingContext.getObject().appointments.push(oProps);
            } else { // "move" appointment
                oModel.setProperty("start", oStartDate, oAppBindingContext);
                oModel.setProperty("end", oEndDate, oAppBindingContext);
                if (oAppointment.getParent() !== oCalendarRow) {
                    handleAppointmentDropBetweenRows();
                }
            }
            oModel.refresh(true);
        },

        handleAppointmentResize: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate");

            if (!this.isAppointmentOverlap(oEvent, oAppointment.getParent())) {
                oAppointment
                    .setStartDate(oStartDate)
                    .setEndDate(oEndDate);
            } else {
                MessageToast.show("As a manager you can not resize events if they overlap with another events");
            }
        },

        // Modified handleAppointmentCreate to open event details fragment
        handleAppointmentCreate: function (oEvent) {
            var oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                oPlanningCalendarRow = oEvent.getParameter("calendarRow"),
                oModel = this.getView().getModel(),
                sPath = oPlanningCalendarRow.getBindingContext().getPath();

            // Create a new appointment object
            var newAppointment = {
                title: "New Appointment",
                start: oStartDate,
                end: oEndDate,
                info: "",
                type: "Type01",
                category: "Appointment",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "In-person",
                organizerStatus: "sent",
                attendeeStatus: "accepted",
                isNew: true // Flag to indicate it's a new appointment
            };

            // Set the selected event in the view model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", newAppointment);

            // Open the event details fragment
            this._openEventDetailsPopover(oEvent.getParameter("domRef"));
            MessageToast.show("New Appointment is created at \n" + oStartDate + "\n and end at \n" + oEndDate + ".");
        },

        isAppointmentOverlap: function (oEvent, oCalendarRow) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                bAppointmentOverlapped;

            if (this.getUserRole() === this.roles.manager) {
                bAppointmentOverlapped = oCalendarRow.getAppointments().some(function (oCurrentAppointment) {
                    if (oCurrentAppointment === oAppointment) {
                        return;
                    }

                    var oAppStartTime = oCurrentAppointment.getStartDate().getTime(),
                        oAppEndTime = oCurrentAppointment.getEndDate().getTime();

                    if (oAppStartTime <= oStartDate.getTime() && oStartDate.getTime() < oAppEndTime) {
                        return true;
                    }

                    if (oAppStartTime < oEndDate.getTime() && oEndDate.getTime() <= oAppEndTime) {
                        return true;
                    }

                    if (oStartDate.getTime() <= oAppStartTime && oAppStartTime < oEndDate.getTime()) {
                        return true;
                    }
                });
            }

            return bAppointmentOverlapped;
        },

        // Toolbar and UI functionality
        onTodayPress: function () {
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/startDate", UI5Date.getInstance());
            MessageToast.show("Navigated to today");
        },

        onViewSelectPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oViewPopover = this.byId("viewPopover");

            // Close other popovers
            this.byId("filterPopover").close();
            this.byId("newEventPopover").close();
            this.byId("eventDetailsPopover").close();

            // Toggle view popover
            if (!oViewPopover.isOpen()) {
                oViewPopover.openBy(oButton);
            } else {
                oViewPopover.close();
            }
        },

        onFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oFilterPopover = this.byId("filterPopover");

            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("newEventPopover").close();
            this.byId("eventDetailsPopover").close();

            // Toggle filter popover
            if (!oFilterPopover.isOpen()) {
                oFilterPopover.openBy(oButton);
            } else {
                oFilterPopover.close();
            }
        },

        onNewEventPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oNewEventPopover = this.byId("newEventPopover");

            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("filterPopover").close();
            this.byId("eventDetailsPopover").close();

            // Toggle new event popover
            if (!oNewEventPopover.isOpen()) {
                oNewEventPopover.openBy(oButton);
            } else {
                oNewEventPopover.close();
            }
        },

        onNotificationPress: function () {
            MessageToast.show("No new notifications");
        },

        // Work week menu functionality
        onWorkWeekMenuPress: function (oEvent) {
            var oViewModel = this.getView().getModel("view");
            var bMenuOpen = oViewModel.getProperty("/workWeekMenuOpen");

            // Toggle the menu visibility
            oViewModel.setProperty("/workWeekMenuOpen", !bMenuOpen);

            // Update the arrow icon direction
            var oButton = this.byId("_IDGenWorkWeekButton");
            oButton.setIcon(!bMenuOpen ? "sap-icon://slim-arrow-down" : "sap-icon://slim-arrow-right");
        },

        // Time scale dropdown change handler
        onTimeScaleChange: function (oEvent) {
            var oViewModel = this.getView().getModel("view");
            var oSource = oEvent.getSource();
            var sSelectedKey = oSource.getSelectedKey();

            // Extract the number of minutes from the selected key
            var iMinutes = parseInt(sSelectedKey);

            // Update the model
            oViewModel.setProperty("/timeScale", iMinutes + " minutes");
            oViewModel.setProperty("/timeScaleMinutes", iMinutes);

            // Get current days to show
            var iDays = oViewModel.getProperty("/daysToShow");

            // Update the button text to show both days and time scale
            var oButton = this.byId("viewSelectButton");
            oButton.setText("Work week (" + iDays + " days, " + iMinutes + " min)");

            // Update the calendar's time scale
            this._updateTimeScale(iMinutes);

            // Make sure we're in Work week view
            var oCalendar = this.byId("calendar");
            oCalendar.setViewKey("Workweek");
            oViewModel.setProperty("/currentView", "Work week");

            MessageToast.show("Time scale changed to: " + iMinutes + " minutes");
        },

        // Days to show dropdown change handler
        onDaysToShowChange: function (oEvent) {
            var oViewModel = this.getView().getModel("view");
            var oSource = oEvent.getSource();
            var iDays = parseInt(oSource.getSelectedKey());

            // Update the model
            oViewModel.setProperty("/daysToShow", iDays);

            // Get current time scale
            var sTimeScale = oViewModel.getProperty("/timeScale");
            var iMinutes = parseInt(sTimeScale.match(/\d+/)[0]);

            // Update the button text to show both days and time scale
            var oButton = this.byId("viewSelectButton");
            oButton.setText("Work week (" + iDays + " days, " + iMinutes + " min)");

            // Update the work week view
            this._updateWorkWeekView(iDays);

            // Make sure we're in Work week view
            var oCalendar = this.byId("calendar");
            oCalendar.setViewKey("Workweek");
            oViewModel.setProperty("/currentView", "Work week");

            MessageToast.show("Work week now shows " + iDays + " days");
        },

        // Days dropdown change handler (main view selection)
        onDaysChange: function (oEvent) {
            var oSource = oEvent.getSource();
            var iDays = parseInt(oSource.getSelectedKey());

            // Update the model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/daysToShow", iDays);

            // Set the current view to Work week
            oViewModel.setProperty("/currentView", "Work week");

            // Update the button text
            var oButton = this.byId("viewSelectButton");
            var sTimeScale = oViewModel.getProperty("/timeScale");
            var iMinutes = parseInt(sTimeScale.match(/\d+/)[0]);
            oButton.setText("Work week (" + iDays + " days, " + iMinutes + " min)");

            // Update the calendar
            var oCalendar = this.byId("calendar");
            oCalendar.setViewKey("Workweek");

            // Update the work week view
            this._updateWorkWeekView(iDays);

            // Close the popover
            this.byId("viewPopover").close();

            MessageToast.show("Work week now shows " + iDays + " days");
        },

        onViewSelected: function (oEvent) {
            var sSelectedView = oEvent.getParameter("listItem").getTitle();
            var oButton = this.byId("viewSelectButton");
            var oCalendar = this.byId("calendar");
            var oViewModel = this.getView().getModel("view");

            // Close the popover first
            this.byId("viewPopover").close();

            // Handle regular view selection
            if (sSelectedView === "Work week") {
                oButton.setText(sSelectedView);
                oViewModel.setProperty("/currentView", sSelectedView);

                // Update calendar view
                oCalendar.setViewKey("Workweek");

                // Get current settings
                var iDaysToShow = oViewModel.getProperty("/daysToShow");
                var sTimeScale = oViewModel.getProperty("/timeScale");
                var iMinutes = parseInt(sTimeScale.match(/\d+/)[0]);

                // Update button text to show both days and time scale
                oButton.setText("Work week (" + iDaysToShow + " days, " + iMinutes + " min)");

                // Update the work week view and time scale
                this._updateWorkWeekView(iDaysToShow);
                this._updateTimeScale(iMinutes);

                MessageToast.show("View changed to: " + sSelectedView);
            } else if (sSelectedView === "Week") {
                oButton.setText(sSelectedView);
                oViewModel.setProperty("/currentView", sSelectedView);

                // Update calendar view
                oCalendar.setViewKey("Week");

                // Force refresh to ensure proper rendering
                oCalendar.rerender();

                MessageToast.show("View changed to: " + sSelectedView);
            } else if (sSelectedView === "Month") {
                oButton.setText(sSelectedView);
                oViewModel.setProperty("/currentView", sSelectedView);

                // Update calendar view
                oCalendar.setViewKey("Month");

                // Force refresh to ensure proper rendering
                oCalendar.rerender();

                MessageToast.show("View changed to: " + sSelectedView);
            } else if (sSelectedView === "Split view") {
                MessageToast.show("Split view feature coming soon");
            }
        },

        _switchCalendarView: function (sViewKey) {
            var oCalendar = this.byId("calendar");
            var oViewModel = this.getView().getModel("view");

            // Set the view key
            oCalendar.setViewKey(sViewKey);

            // Update the current view in the model
            oViewModel.setProperty("/currentView", sViewKey);

            // Force a rerender to ensure proper display
            oCalendar.rerender();
        },

        _updateTimeScale: function (iMinutes) {
            var oCalendar = this.byId("calendar");
            var oViewModel = this.getView().getModel("view");
            var sCurrentView = oViewModel;

            // Only update time scale for Day and Work week views
            if (sCurrentView === "Day" || sCurrentView === "Work week") {
                var oView = oCalendar.getViews().find(function (view) {
                    return view.getKey() === (sCurrentView === "Work week" ? "Workweek" : sCurrentView);
                });

                if (oView) {
                    // Calculate the number of intervals based on the selected minutes
                    var iTotalMinutes = 24 * 60; // 24 hours in minutes
                    var iIntervals = iTotalMinutes / iMinutes;

                    // Update the view settings
                    oView.setIntervalsS(iIntervals);
                    oView.setIntervalsM(iIntervals);
                    oView.setIntervalsL(iIntervals);
                    oView.setIntervalType("Minute"); // Use string value directly

                    // Refresh the calendar
                    oCalendar.rerender();
                }
            }
        },

        _updateWorkWeekView: function (iDays) {
            var oCalendar = this.byId("calendar");
            var oView = oCalendar.getViews().find(function (view) {
                return view.getKey() === "Workweek";
            });

            if (oView) {
                // Update the number of days to show
                oView.setIntervalsS(iDays);
                oView.setIntervalsM(iDays);
                oView.setIntervalsL(iDays);

                // Refresh the calendar
                oCalendar.rerender();
            }
        },

        onSavedViewsPress: function () {
            MessageToast.show("Saved views feature coming soon");
        },

        onNewEventTypeSelected: function (oEvent) {
            var sEventType = oEvent.getSource().getTitle();
            this.byId("newEventPopover").close();

            if (sEventType === "Channel meeting") {
                this._openChannelMeetingDialog();
            } else if (sEventType === "Event") {
                this._openRemarksDialog();
            } else if (sEventType === "Virtual appointment") {
                this._openVirtualAppointmentDialog();
            } else {
                MessageToast.show("Creating new: " + sEventType);
            }
        },

        // Open the Channel Meeting Dialog
        _openChannelMeetingDialog: function () {
            var that = this;

            if (!this._oChannelMeetingDialog) {
                Fragment.load({
                    id: this.getView().getId(),
                    name: "com.capexrevex.capexrevex.view.ChannelMeetingDialog",
                    controller: this
                }).then(function (oDialog) {
                    that._oChannelMeetingDialog = oDialog;
                    that.getView().addDependent(that._oChannelMeetingDialog);

                    // Set default values for new channel meeting
                    that._setDefaultChannelMeetingValues();

                    // Set the model for the fragment
                    that._oChannelMeetingDialog.setModel(that.getView().getModel());
                    that._oChannelMeetingDialog.setModel(that.getView().getModel("attendees"), "attendees");

                    that._oChannelMeetingDialog.open();
                }).catch(function (error) {
                    console.error("Error loading channel meeting dialog:", error);
                    MessageToast.show("Error loading meeting dialog");
                });
            } else {
                // Set default values for the meeting
                this._setDefaultChannelMeetingValues();

                // Set the model for the fragment
                this._oChannelMeetingDialog.setModel(this.getView().getModel());
                this._oChannelMeetingDialog.setModel(this.getView().getModel("attendees"), "attendees");

                this._oChannelMeetingDialog.open();
            }
        },

        // Open the Virtual Appointment Dialog
        _openVirtualAppointmentDialog: function () {
            var that = this;

            if (!this._oVirtualAppointmentDialog) {
                Fragment.load({
                    id: this.getView().getId(),
                    name: "com.capexrevex.capexrevex.view.VirtualAppointmentDialog",
                    controller: this
                }).then(function (oDialog) {
                    that._oVirtualAppointmentDialog = oDialog;
                    that.getView().addDependent(that._oVirtualAppointmentDialog);

                    // Set default values for virtual appointment
                    that._setDefaultVirtualAppointmentValues();

                    // Set the model for the fragment
                    that._oVirtualAppointmentDialog.setModel(that.getView().getModel());
                    that._oVirtualAppointmentDialog.setModel(that.getView().getModel("attendees"), "attendees");

                    that._oVirtualAppointmentDialog.open();
                }).catch(function (error) {
                    console.error("Error loading virtual appointment dialog:", error);
                    MessageToast.show("Error loading virtual appointment dialog");
                });
            } else {
                // Set default values for the appointment
                this._setDefaultVirtualAppointmentValues();

                // Set the model for the fragment
                this._oVirtualAppointmentDialog.setModel(this.getView().getModel());
                this._oVirtualAppointmentDialog.setModel(this.getView().getModel("attendees"), "attendees");

                this._oVirtualAppointmentDialog.open();
            }
        },

        _setDefaultChannelMeetingValues: function () {
            // Set default date and time to current time
            var oNow = UI5Date.getInstance();
            var oStart = UI5Date.getInstance(oNow);

            // Round to nearest 30 minutes
            var minutes = oStart.getMinutes();
            if (minutes < 15) {
                oStart.setMinutes(0);
            } else if (minutes < 45) {
                oStart.setMinutes(30);
            } else {
                oStart.setHours(oStart.getHours() + 1);
                oStart.setMinutes(0);
            }

            var oEnd = UI5Date.getInstance(oStart);
            oEnd.setMinutes(oEnd.getMinutes() + 30);

            // Set values in the dialog if it exists
            if (this._oChannelMeetingDialog) {
                var oStartDate = Fragment.byId(this.getView().getId(), "startDate");
                var oStartTime = Fragment.byId(this.getView().getId(), "startTime");
                var oEndDate = Fragment.byId(this.getView().getId(), "endDate");
                var oEndTime = Fragment.byId(this.getView().getId(), "endTime");

                if (oStartDate) oStartDate.setDateValue(oStart);
                if (oStartTime) oStartTime.setDateValue(oStart);
                if (oEndDate) oEndDate.setDateValue(oEnd);
                if (oEndTime) oEndTime.setDateValue(oEnd);
            }
        },

        _setDefaultVirtualAppointmentValues: function () {
            // Set default date and time to current time
            var oNow = UI5Date.getInstance();
            var oStart = UI5Date.getInstance(oNow);

            // Round to nearest 30 minutes
            var minutes = oStart.getMinutes();
            if (minutes < 15) {
                oStart.setMinutes(0);
            } else if (minutes < 45) {
                oStart.setMinutes(30);
            } else {
                oStart.setHours(oStart.getHours() + 1);
                oStart.setMinutes(0);
            }

            var oEnd = UI5Date.getInstance(oStart);
            oEnd.setMinutes(oEnd.getMinutes() + 30);

            // Set values in the dialog if it exists
            if (this._oVirtualAppointmentDialog) {
                var oStartDate = Fragment.byId(this.getView().getId(), "virtualStartDate");
                var oStartTime = Fragment.byId(this.getView().getId(), "virtualStartTime");
                var oEndDate = Fragment.byId(this.getView().getId(), "virtualEndDate");
                var oEndTime = Fragment.byId(this.getView().getId(), "virtualEndTime");

                if (oStartDate) oStartDate.setDateValue(oStart);
                if (oStartTime) {
                    oStartTime.setDateValue(oStart);
                    // Set minutes step based on current time scale
                    var oViewModel = this.getView().getModel("view");
                    var iMinutes = oViewModel.getProperty("/timeScaleMinutes");
                    oStartTime.setMinutesStep(iMinutes);
                }
                if (oEndDate) oEndDate.setDateValue(oEnd);
                if (oEndTime) {
                    oEndTime.setDateValue(oEnd);
                    // Set minutes step based on current time scale
                    var oViewModel = this.getView().getModel("view");
                    var iMinutes = oViewModel.getProperty("/timeScaleMinutes");
                    oEndTime.setMinutesStep(iMinutes);
                }

                // Set default recurrence to "none"
                var oRecurrenceSelect = Fragment.byId(this.getView().getId(), "virtualRecurrence");
                if (oRecurrenceSelect) {
                    oRecurrenceSelect.setSelectedKey("none");
                }
            }
        },

        // Save Channel Meeting
        onSaveChannelMeeting: function () {
            try {
                // Get values from the dialog
                var sTitle = Fragment.byId(this.getView().getId(), "meetingTitle").getValue();

                // Get required attendees
                var oRequiredAttendees = Fragment.byId(this.getView().getId(), "requiredAttendees");
                var aRequiredTokens = oRequiredAttendees.getTokens();
                var sRequiredAttendees = aRequiredTokens.map(function (oToken) {
                    return oToken.getKey();
                }).join("; ");

                // Get optional attendees
                var oOptionalAttendees = Fragment.byId(this.getView().getId(), "optionalAttendees");
                var aOptionalTokens = oOptionalAttendees.getTokens();
                var sOptionalAttendees = aOptionalTokens.map(function (oToken) {
                    return oToken.getKey();
                }).join("; ");

                // Get date and time values properly
                var oStartDateControl = Fragment.byId(this.getView().getId(), "startDate");
                var oStartTimeControl = Fragment.byId(this.getView().getId(), "startTime");
                var oEndDateControl = Fragment.byId(this.getView().getId(), "endDate");
                var oEndTimeControl = Fragment.byId(this.getView().getId(), "endTime");

                var oStartDate = oStartDateControl ? oStartDateControl.getDateValue() : null;
                var oStartTime = oStartTimeControl ? oStartTimeControl.getDateValue() : null;
                var oEndDate = oEndDateControl ? oEndDateControl.getDateValue() : null;
                var oEndTime = oEndTimeControl ? oEndTimeControl.getDateValue() : null;

                var bAllDay = Fragment.byId(this.getView().getId(), "allDayCheckbox").getSelected();
                var sChannel = Fragment.byId(this.getView().getId(), "channelInput").getValue();
                var sLocation = Fragment.byId(this.getView().getId(), "locationInput").getValue();
                var bOnlineMeeting = Fragment.byId(this.getView().getId(), "onlineMeetingCheckbox").getSelected();
                var sDetails = Fragment.byId(this.getView().getId(), "meetingDetails").getValue();
                var sAgenda = Fragment.byId(this.getView().getId(), "meetingAgenda").getValue();

                // Validate required fields
                if (!sTitle) {
                    MessageToast.show("Please enter a title for the meeting");
                    return;
                }

                // Validate date controls exist
                if (!oStartDate || !oEndDate) {
                    MessageToast.show("Please select valid dates");
                    return;
                }

                // Combine date and time
                var oStart = new Date(oStartDate);
                if (!bAllDay && oStartTime) {
                    oStart.setHours(oStartTime.getHours(), oStartTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oStart.setHours(0, 0, 0, 0);
                }

                var oEnd = new Date(oEndDate);
                if (!bAllDay && oEndTime) {
                    oEnd.setHours(oEndTime.getHours(), oEndTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oEnd.setHours(23, 59, 59, 999);
                }

                // Validate that end time is after start time
                if (oEnd <= oStart) {
                    MessageToast.show("End time must be after start time");
                    return;
                }

                // Create the new appointment object
                var newAppointment = {
                    start: oStart,
                    end: oEnd,
                    title: sTitle,
                    info: "Channel: " + sChannel + (sLocation ? " | Location: " + sLocation : ""),
                    type: "Type01",
                    pic: "sap-icon://group",
                    requiredAttendees: sRequiredAttendees,
                    optionalAttendees: sOptionalAttendees,
                    details: sDetails,
                    agenda: sAgenda,
                    allDay: bAllDay,
                    onlineMeeting: bOnlineMeeting,
                    category: "Meeting",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: bOnlineMeeting ? "Virtual" : "In-person",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted"
                };

                // Get the model and add the new appointment to the first person's calendar
                var oModel = this.getView().getModel();
                var aPeople = oModel.getProperty("/people");

                if (aPeople && aPeople.length > 0) {
                    // Add to the first person's appointments
                    aPeople[0].appointments.push(newAppointment);

                    // Update the model
                    oModel.setProperty("/people", aPeople);

                    // Show success message
                    MessageToast.show("Channel meeting '" + sTitle + "' has been created");

                    // Close the dialog
                    this._oChannelMeetingDialog.close();

                    // Refresh the calendar to show the new appointment
                    this.byId("calendar").getBinding("rows").refresh(true);
                } else {
                    MessageToast.show("Error: Could not find calendar to add meeting");
                }
            } catch (error) {
                console.error("Error saving channel meeting:", error);
                MessageToast.show("Error creating meeting. Please try again.");
            }
        },

        // Save Virtual Appointment
        onSaveVirtualAppointment: function () {
            try {
                // Get values from the dialog
                var sTitle = Fragment.byId(this.getView().getId(), "virtualTitle").getValue();
                var sGuestName = Fragment.byId(this.getView().getId(), "guestName").getValue();
                var sGuestEmail = Fragment.byId(this.getView().getId(), "guestEmail").getValue();

                // Get internal attendees
                var oInternalAttendees = Fragment.byId(this.getView().getId(), "internalAttendees");
                var aInternalTokens = oInternalAttendees.getTokens();
                var sInternalAttendees = aInternalTokens.map(function (oToken) {
                    return oToken.getKey();
                }).join("; ");

                // Get date and time values properly
                var oStartDateControl = Fragment.byId(this.getView().getId(), "virtualStartDate");
                var oStartTimeControl = Fragment.byId(this.getView().getId(), "virtualStartTime");
                var oEndDateControl = Fragment.byId(this.getView().getId(), "virtualEndDate");
                var oEndTimeControl = Fragment.byId(this.getView().getId(), "virtualEndTime");

                var oStartDate = oStartDateControl ? oStartDateControl.getDateValue() : null;
                var oStartTime = oStartTimeControl ? oStartTimeControl.getDateValue() : null;
                var oEndDate = oEndDateControl ? oEndDateControl.getDateValue() : null;
                var oEndTime = oEndTimeControl ? oEndTimeControl.getDateValue() : null;

                var bAllDay = Fragment.byId(this.getView().getId(), "virtualAllDay").getSelected();
                var sLocation = Fragment.byId(this.getView().getId(), "virtualLocation").getValue();
                var sPresenterOptions = Fragment.byId(this.getView().getId(), "presenterOptions").getSelectedKey();
                var bRecordAutomatically = Fragment.byId(this.getView().getId(), "recordAutomatically").getSelected();
                var sMeetingChat = Fragment.byId(this.getView().getId(), "meetingChat").getSelectedKey();
                var sMessage = Fragment.byId(this.getView().getId(), "virtualMessage").getValue();

                // Validate required fields
                if (!sTitle) {
                    MessageToast.show("Please enter a title for the appointment");
                    return;
                }

                if (!sGuestName || !sGuestEmail) {
                    MessageToast.show("Please enter guest name and email");
                    return;
                }

                // Validate date controls exist
                if (!oStartDate || !oEndDate) {
                    MessageToast.show("Please select valid dates");
                    return;
                }

                // Combine date and time
                var oStart = new Date(oStartDate);
                if (!bAllDay && oStartTime) {
                    oStart.setHours(oStartTime.getHours(), oStartTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oStart.setHours(0, 0, 0, 0);
                }

                var oEnd = new Date(oEndDate);
                if (!bAllDay && oEndTime) {
                    oEnd.setHours(oEndTime.getHours(), oEndTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oEnd.setHours(23, 59, 59, 999);
                }

                // Validate that end time is after start time
                if (oEnd <= oStart) {
                    MessageToast.show("End time must be after start time");
                    return;
                }

                // Create the new appointment object
                var newAppointment = {
                    start: oStart,
                    end: oEnd,
                    title: sTitle,
                    info: "Virtual Appointment with " + sGuestName + " (" + sGuestEmail + ")",
                    type: "Type01",
                    pic: "sap-icon://video",
                    internalAttendees: sInternalAttendees,
                    location: sLocation,
                    presenterOptions: sPresenterOptions,
                    recordAutomatically: bRecordAutomatically,
                    meetingChat: sMeetingChat,
                    message: sMessage,
                    allDay: bAllDay,
                    isVirtual: true,
                    category: "Appointment",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: "Virtual",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted"
                };

                // Get the model and add the new appointment to the first person's calendar
                var oModel = this.getView().getModel();
                var aPeople = oModel.getProperty("/people");

                if (aPeople && aPeople.length > 0) {
                    // Add to the first person's appointments
                    aPeople[0].appointments.push(newAppointment);

                    // Update the model
                    oModel.setProperty("/people", aPeople);

                    // Show success message
                    MessageToast.show("Virtual appointment '" + sTitle + "' has been created");

                    // Close the dialog
                    this._oVirtualAppointmentDialog.close();

                    // Refresh the calendar to show the new appointment
                    this.byId("calendar").getBinding("rows").refresh(true);
                } else {
                    MessageToast.show("Error: Could not find calendar to add appointment");
                }
            } catch (error) {
                console.error("Error saving virtual appointment:", error);
                MessageToast.show("Error creating appointment. Please try again.");
            }
        },

        // Cancel Channel Meeting
        onCancelChannelMeeting: function () {
            // Close the dialog without saving
            if (this._oChannelMeetingDialog) {
                this._oChannelMeetingDialog.close();
            }
            MessageToast.show("Channel meeting creation cancelled");
        },

        // Cancel Virtual Appointment
        onCancelVirtualAppointment: function () {
            // Close the dialog without saving
            if (this._oVirtualAppointmentDialog) {
                this._oVirtualAppointmentDialog.close();
            }
            MessageToast.show("Virtual appointment creation cancelled");
        },

        // Add additional guest
        onAddGuest: function () {
            MessageToast.show("Additional guest feature coming soon");
        },

        // Handle All Day checkbox changes
        onAllDayChange: function (oEvent) {
            var bAllDay = oEvent.getParameter("state");
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent/allDay", bAllDay);

            if (bAllDay) {
                var oStart = new Date(oViewModel.getProperty("/selectedEvent/start"));
                oStart.setHours(0, 0, 0, 0);
                oViewModel.setProperty("/selectedEvent/start", oStart);

                var oEnd = new Date(oViewModel.getProperty("/selectedEvent/end"));
                oEnd.setHours(23, 59, 59, 999);
                oViewModel.setProperty("/selectedEvent/end", oEnd);
            } else {
                var oStart = new Date(oViewModel.getProperty("/selectedEvent/start"));
                if (oStart.getHours() === 0) {
                    oStart.setHours(10, 0, 0, 0);
                }
                oViewModel.setProperty("/selectedEvent/start", oStart);

                var oEnd = new Date(oViewModel.getProperty("/selectedEvent/end"));
                if (oEnd.getHours() === 23) {
                    oEnd.setHours(10, 30, 0, 0);
                }
                oViewModel.setProperty("/selectedEvent/end", oEnd);
            }
        },

        onStartDateChange: function (oEvent) {
            var oDate = oEvent.getSource().getDateValue();
            if (!oDate) return;

            var oViewModel = this.getView().getModel("view");
            var oStart = new Date(oViewModel.getProperty("/selectedEvent/start"));
            oStart.setFullYear(oDate.getFullYear(), oDate.getMonth(), oDate.getDate());
            oViewModel.setProperty("/selectedEvent/start", oStart);
        },

        onStartTimeChange: function (oEvent) {
            var oTime = oEvent.getSource().getDateValue();
            if (!oTime) return;

            var oViewModel = this.getView().getModel("view");
            var oStart = new Date(oViewModel.getProperty("/selectedEvent/start"));
            oStart.setHours(oTime.getHours(), oTime.getMinutes(), 0, 0);
            oViewModel.setProperty("/selectedEvent/start", oStart);
        },

        onEndDateChange: function (oEvent) {
            var oDate = oEvent.getSource().getDateValue();
            if (!oDate) return;

            var oViewModel = this.getView().getModel("view");
            var oEnd = new Date(oViewModel.getProperty("/selectedEvent/end"));
            oEnd.setFullYear(oDate.getFullYear(), oDate.getMonth(), oDate.getDate());
            oViewModel.setProperty("/selectedEvent/end", oEnd);
        },

        onEndTimeChange: function (oEvent) {
            var oTime = oEvent.getSource().getDateValue();
            if (!oTime) return;

            var oViewModel = this.getView().getModel("view");
            var oEnd = new Date(oViewModel.getProperty("/selectedEvent/end"));
            oEnd.setHours(oTime.getHours(), oTime.getMinutes(), 0, 0);
            oViewModel.setProperty("/selectedEvent/end", oEnd);
        },

        onMoreOptionsPress: function () {
            MessageToast.show("More options coming soon");
        },

        // Modified onAppointmentSelect method
        onAppointmentSelect: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment");
            var oBindingContext = oAppointment.getBindingContext();

            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("filterPopover").close();
            this.byId("newEventPopover").close();

            // Get appointment data
            var oAppointmentData = oBindingContext.getObject();

            // Extract attendees from appointment
            var aAttendees = this._extractAttendeesFromAppointment(oAppointmentData);

            var sTitle = oAppointmentData.title;
            if (sTitle === "new appointment") {
                sTitle = "";
            }

            // Update selected event in model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", {
                title: sTitle,
                start: oAppointmentData.start,
                end: oAppointmentData.end,
                location: oAppointmentData.info || "",
                description: oAppointmentData.description || "",
                allDay: oAppointmentData.allDay || false,
                attendees: aAttendees,
                meetingLink: oAppointmentData.meetingLink || ""
            });
            oViewModel.setProperty("/selectedEventPath", oBindingContext.getPath());

            // Open event details popover using the new fragment
            this._openEventDetailsPopover(oEvent.getParameter("domRef"));
        },

        // Modified onIntervalSelect method
        onIntervalSelect: function (oEvent) {
            var oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                oRow = oEvent.getParameter("row"),
                oModel = this.getView().getModel(),
                oAppointment = {
                    start: oStartDate,
                    end: oEndDate,
                    title: "new appointment",
                    info: "",
                    type: "Type01",
                    location: "",
                    description: "",
                    allDay: false,
                    attendees: "",
                    category: "Appointment",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: "In-person",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted"
                };

            var oRowContext = oRow.getBindingContext();
            var sPath = oRowContext.getPath() + "/appointments";
            var aAppointments = oModel.getProperty(sPath) || [];
            aAppointments.push(oAppointment);
            oModel.setProperty(sPath, aAppointments);

            MessageToast.show("New appointment created. Click on it to edit.");
        },

        // Add this method to open the event details popover
        _openEventDetailsPopover: function (oSource) {
            var that = this;

            // Load the fragment if not already loaded
            if (!this._oEventDetailsPopover) {
                Fragment.load({
                    id: this.getView().getId(),
                    name: "com.capexrevex.capexrevex.view.EventDetailsDialog",
                    controller: this
                }).then(function (oPopover) {
                    that._oEventDetailsPopover = oPopover;
                    that.getView().addDependent(that._oEventDetailsPopover);

                    // Set the model for the fragment
                    that._oEventDetailsPopover.setModel(that.getView().getModel("view"), "view");
                    that._oEventDetailsPopover.setModel(that.getView().getModel("attendees"), "attendees");

                    that._oEventDetailsPopover.openBy(oSource);

                    // Set attendees tokens after the fragment is rendered
                    setTimeout(function () {
                        that._setAttendeesTokens();
                    }, 100);
                }).catch(function (error) {
                    console.error("Error loading event details fragment:", error);
                    MessageToast.show("Error loading event details");
                });
            } else {
                // Set the model for the fragment
                this._oEventDetailsPopover.setModel(this.getView().getModel("view"), "view");
                this._oEventDetailsPopover.setModel(this.getView().getModel("attendees"), "attendees");

                // Open the popover
                this._oEventDetailsPopover.openBy(oSource);

                // Set attendees tokens
                this._setAttendeesTokens();
            }
        },

        _setAttendeesTokens: function () {
            var oViewModel = this.getView().getModel("view");
            var sAttendees = oViewModel.getProperty("/selectedEvent/attendees") || "";

            // Get the MultiInput control from the fragment
            var oMultiInput = Fragment.byId(this.getView().getId(), "eventAttendees");
            if (!oMultiInput) {
                console.error("MultiInput control not found in fragment");
                return;
            }

            // Clear existing tokens
            oMultiInput.destroyTokens();

            // Parse attendees and create tokens
            var aAttendees = this._parseAttendees(sAttendees);
            aAttendees.forEach(function (oAttendee) {
                var oToken = new Token({
                    key: oAttendee.email,
                    text: oAttendee.name + " (" + oAttendee.email + ")"
                });
                oMultiInput.addToken(oToken);
            });
        },

        // Extract attendees from appointment data
        _extractAttendeesFromAppointment: function (oAppointment) {
            var aAttendees = [];

            // Handle different appointment types
            if (oAppointment.requiredAttendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.requiredAttendees));
            }

            if (oAppointment.optionalAttendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.optionalAttendees));
            }

            if (oAppointment.internalAttendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.internalAttendees));
            }

            if (oAppointment.guestEmail) {
                aAttendees.push({
                    name: oAppointment.guestName || oAppointment.guestEmail,
                    email: oAppointment.guestEmail,
                    status: "Free"
                });
            }

            if (oAppointment.attendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.attendees));
            }

            return aAttendees;
        },

        // Parse attendees string into objects
        _parseAttendees: function (sAttendees) {
            if (!sAttendees) return [];

            if (typeof sAttendees === 'string') {
                return sAttendees.split(';').map(function (sAttendee) {
                    sAttendee = sAttendee.trim();
                    if (sAttendee) {
                        return {
                            name: sAttendee,
                            email: sAttendee,
                            status: "Free"
                        };
                    }
                    return null;
                }).filter(Boolean);
            } else if (Array.isArray(sAttendees)) {
                return sAttendees;
            }

            return [];
        },

        // Modified onSaveEvent method to handle attendees
        onSaveEvent: function () {
            var oViewModel = this.getView().getModel("view");
            var sPath = oViewModel.getProperty("/selectedEventPath");

            // Get values from the fragment controls
            var oTitleControl = Fragment.byId(this.getView().getId(), "eventTitle");
            var oStartDateControl = Fragment.byId(this.getView().getId(), "eventStartDate");
            var oStartTimeControl = Fragment.byId(this.getView().getId(), "eventStartTime");
            var oEndDateControl = Fragment.byId(this.getView().getId(), "eventEndDate");
            var oEndTimeControl = Fragment.byId(this.getView().getId(), "eventEndTime");
            var oLocationControl = Fragment.byId(this.getView().getId(), "eventLocation");
            var oDescriptionControl = Fragment.byId(this.getView().getId(), "eventDescription");
            var oAllDayControl = Fragment.byId(this.getView().getId(), "allDayCheckbox");
            var oAttendeesControl = Fragment.byId(this.getView().getId(), "eventAttendees");

            // Validate controls exist
            if (!oTitleControl || !oStartDateControl || !oStartTimeControl ||
                !oEndDateControl || !oEndTimeControl || !oLocationControl ||
                !oDescriptionControl || !oAllDayControl || !oAttendeesControl) {
                MessageToast.show("Error: Could not find all form controls");
                return;
            }

            // Get values
            var sTitle = oTitleControl.getValue();
            var oStartDate = oStartDateControl.getDateValue();
            var oStartTime = oStartTimeControl.getDateValue();
            var oEndDate = oEndDateControl.getDateValue();
            var oEndTime = oEndTimeControl.getDateValue();
            var sLocation = oLocationControl.getValue();
            var sDescription = oDescriptionControl.getValue();
            var bAllDay = oAllDayControl.getSelected();

            // Get attendees
            var aTokens = oAttendeesControl.getTokens();
            var sAttendees = aTokens.map(function (oToken) {
                return oToken.getKey();
            }).join("; ");

            // Validate required fields
            if (!sTitle) {
                MessageToast.show("Please enter a title for the event");
                return;
            }

            if (!oStartDate || !oEndDate) {
                MessageToast.show("Please enter valid start and end dates");
                return;
            }

            // Combine date and time
            var oStart = new Date(oStartDate);
            if (!bAllDay && oStartTime) {
                oStart.setHours(oStartTime.getHours(), oStartTime.getMinutes(), 0, 0);
            } else if (bAllDay) {
                oStart.setHours(0, 0, 0, 0);
            }

            var oEnd = new Date(oEndDate);
            if (!bAllDay && oEndTime) {
                oEnd.setHours(oEndTime.getHours(), oEndTime.getMinutes(), 0, 0);
            } else if (bAllDay) {
                oEnd.setHours(23, 59, 59, 999);
            }

            // Validate that end time is after start time
            if (oEnd <= oStart) {
                MessageToast.show("End time must be after start time");
                return;
            }

            // Check if this is a new appointment or editing existing one
            if (sPath) {
                // Update existing appointment
                var oModel = this.getView().getModel();
                oModel.setProperty(sPath + "/title", sTitle);
                oModel.setProperty(sPath + "/start", oStart);
                oModel.setProperty(sPath + "/end", oEnd);
                oModel.setProperty(sPath + "/allDay", bAllDay);
                oModel.setProperty(sPath + "/info", sLocation);
                oModel.setProperty(sPath + "/location", sLocation);
                oModel.setProperty(sPath + "/description", sDescription);
                oModel.setProperty(sPath + "/attendees", sAttendees);

                MessageToast.show("Event updated successfully");
            } else {
                // Create new appointment
                var newAppointment = {
                    start: oStart,
                    end: oEnd,
                    title: sTitle,
                    info: sLocation,
                    type: "Type01",
                    category: "Appointment",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: "In-person",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted",
                    attendees: sAttendees,
                    allDay: bAllDay,
                    description: sDescription
                };

                // Add to the first person's appointments
                var oModel = this.getView().getModel();
                var aPeople = oModel.getProperty("/people");

                if (aPeople && aPeople.length > 0) {
                    aPeople[0].appointments.push(newAppointment);
                    oModel.setProperty("/people", aPeople);

                    MessageToast.show("New event '" + sTitle + "' has been created");
                } else {
                    MessageToast.show("Error: Could not find calendar to add event");
                    return;
                }
            }

            // Close the popover
            if (this._oEventDetailsPopover) {
                this._oEventDetailsPopover.close();
            }

            // Refresh the calendar
            this.byId("calendar").getBinding("rows").refresh(true);
        },

        // Modified onDiscardEvent method
        onDiscardEvent: function () {
            // Close the popover without saving
            if (this._oEventDetailsPopover) {
                this._oEventDetailsPopover.close();
            }
            MessageToast.show("Changes discarded");
        },

        // Fragment handling functions
        // _openRemarksDialog: function () {
        //     if (!this._oRemarksDialog) {
        //         this._oRemarksDialog = sap.ui.xmlfragment(
        //             "com.capexrevex.capexrevex.view.RemarksDialog",
        //             this
        //         );
        //         this.getView().addDependent(this._oRemarksDialog);

        //         // Set the model for the fragment
        //         this._oRemarksDialog.setModel(this.getView().getModel());
        //         this._oRemarksDialog.setModel(this.getView().getModel("attendees"), "attendees");
        //     }

        //     // Set default values for new event (current date from 4:00 PM to 4:30 PM)
        //     var oEventDate = UI5Date.getInstance();
        //     oEventDate.setHours(16, 0, 0, 0); // 4:00 PM
        //     var oEnd = UI5Date.getInstance(oEventDate);
        //     oEnd.setHours(16, 30, 0, 0); // 4:30 PM

        //     var oViewModel = this.getView().getModel("view");
        //     oViewModel.setProperty("/selectedEvent", {
        //         title: "",
        //         start: oEventDate,
        //         end: oEnd,
        //         info: "",
        //         type: "Type01",
        //         icon: "",
        //         attendees: [],
        //         isNew: true // Flag to indicate it's a new appointment
        //     });

        //     this._oRemarksDialog.open();
        // },

        // Modified _openRemarksDialog method to use correct binding
        _openRemarksDialog: function () {
            if (!this._oRemarksDialog) {
                this._oRemarksDialog = sap.ui.xmlfragment(
                    "com.capexrevex.capexrevex.view.RemarksDialog",
                    this
                );
                this.getView().addDependent(this._oRemarksDialog);

                // Set the models for the fragment
                this._oRemarksDialog.setModel(this.getView().getModel());
                this._oRemarksDialog.setModel(this.getView().getModel("attendees"), "attendees");
            }

            // Set default values for new event
            var oEventDate = UI5Date.getInstance();
            oEventDate.setHours(16, 0, 0, 0);
            var oEnd = UI5Date.getInstance(oEventDate);
            oEnd.setHours(16, 30, 0, 0);

            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", {
                title: "",
                start: oEventDate,
                end: oEnd,
                info: "",
                type: "Type01",
                icon: "",
                attendees: [],
                isNew: true
            });

            this._oRemarksDialog.open();
        },

        onSaveEventFromDialog: function () {
            var oViewModel = this.getView().getModel("view");
            var oSelectedEvent = oViewModel.getProperty("/selectedEvent");

            // Get values from the dialog with proper null checks
            var oTitleControl = sap.ui.getCore().byId("eventTitle");
            var oAttendeesControl = sap.ui.getCore().byId("eventAttendees");
            var oMakeRecurringControl = sap.ui.getCore().byId("makeRecurring");
            var oAllDayControl = sap.ui.getCore().byId("allDay");
            var oInPersonControl = sap.ui.getCore().byId("inPerson");
            var oResponseOptionsControl = sap.ui.getCore().byId("responseOptions");
            var oShowAsControl = sap.ui.getCore().byId("showAs");
            var oDescriptionControl = sap.ui.getCore().byId("eventDescription");

            // Get the date and time values with proper null checks
            var oDatePicker = sap.ui.getCore().byId("eventDate");
            var oStartTimePicker = sap.ui.getCore().byId("startTime");
            var oEndTimePicker = sap.ui.getCore().byId("endTime");

            // Validate controls exist
            if (!oDatePicker || !oStartTimePicker || !oEndTimePicker) {
                MessageToast.show("Error: Date or time controls not found");
                return;
            }

            var oDate = oDatePicker.getDateValue();
            var oStartTime = oStartTimePicker.getDateValue();
            var oEndTime = oEndTimePicker.getDateValue();

            // Validate date values
            if (!oDate || !oStartTime || !oEndTime) {
                MessageToast.show("Please enter valid date and time values");
                return;
            }

            // Get other values with null checks
            var sTitle = oTitleControl ? oTitleControl.getValue() : "";
            var sAttendees = oAttendeesControl ? oAttendeesControl.getValue() : "";
            var bMakeRecurring = oMakeRecurringControl ? oMakeRecurringControl.getSelected() : false;
            var bAllDay = oAllDayControl ? oAllDayControl.getSelected() : false;
            var bInPerson = oInPersonControl ? oInPersonControl.getSelected() : "";
            var sResponseOption = oResponseOptionsControl ? oResponseOptionsControl.getSelectedKey() : "";
            var sShowAs = oShowAsControl ? oShowAsControl.getSelectedKey() : "";
            var sDescription = oDescriptionControl ? oDescriptionControl.getValue() : "";

            // Validate required title field
            if (!sTitle) {
                MessageToast.show("Please enter a title for the event");
                return;
            }

            // Combine date and start time
            var oStart = new Date(oDate);
            oStart.setHours(oStartTime.getHours(), oStartTime.getMinutes(), 0, 0);

            var oEnd = new Date(oDate);
            oEnd.setHours(oEndTime.getHours(), oEndTime.getMinutes(), 0, 0);

            // Validate that end time is after start time
            if (oEnd <= oStart) {
                MessageToast.show("End time must be after start time");
                return;
            }

            // Create the new appointment object with the title as the main text
            var newAppointment = {
                start: oStart,
                end: oEnd,
                title: sTitle, // Use the actual title here
                info: bInPerson, // This is secondary info
                type: "Type01",
                attendees: sAttendees,
                description: sDescription,
                recurring: bMakeRecurring,
                allDay: bAllDay,
                responseOption: sResponseOption,
                showAs: sShowAs,
                category: "Appointment",
                recurrence: bMakeRecurring ? "Recurring" : "Non-recurring",
                inPerson: bInPerson,
                organizerStatus: "sent",
                attendeeStatus: "accepted"
            };

            // Get the model and add the new appointment to the first person's calendar
            var oModel = this.getView().getModel();
            var aPeople = oModel.getProperty("/people");

            if (aPeople && aPeople.length > 0) {
                // Add to the first person's appointments
                aPeople[0].appointments.push(newAppointment);

                // Update the model
                oModel.setProperty("/people", aPeople);

                // Close the dialog
                if (this._oRemarksDialog) {
                    this._oRemarksDialog.close();
                }

                // Show success message
                MessageToast.show("Event '" + sTitle + "' has been created");

                // Refresh the calendar to show the new appointment
                this.byId("calendar").getBinding("rows").refresh(true);
            }
        },

        onCancelEventFromDialog: function () {
            // Close the dialog without saving
            if (this._oRemarksDialog) {
                this._oRemarksDialog.close();
            }
        },

        onToggleGroupMode: function () {
            var oViewModel = this.getView().getModel("view");
            var sMode = oViewModel.getProperty("/groupMode");
            oViewModel.setProperty("/groupMode", sMode === "Group" ? "None" : "Group");
            this.byId("calendar").rerender();
        },

        // Meet Now functionality
        onMeetNowPress: function () {
            this._openMeetNowDialog();
        },

        _openMeetNowDialog: function () {
            // Create dialog if it doesn't exist
            if (!this._oMeetNowDialog) {
                // Create meeting name input
                var oMeetingNameInput = new Input({
                    placeholder: "Enter meeting name",
                    value: "Meeting with Nadeem Abbas",
                    liveChange: function (oEvent) {
                        this._sMeetingName = oEvent.getParameter("value");
                    }.bind(this)
                });

                // Create start meeting button
                var oStartButton = new Button({
                    text: "Start meeting",
                    type: "Emphasized",
                    press: function () {
                        this._startMeeting();
                    }.bind(this)
                });

                // Create get link button
                var oGetLinkButton = new Button({
                    text: "Get a link to share",
                    press: function () {
                        this._getMeetingLink();
                    }.bind(this)
                });

                // Create dialog
                this._oMeetNowDialog = new Dialog({
                    title: "Start a meeting now",
                    content: [
                        new Text({ text: "Meeting name" }),
                        oMeetingNameInput
                    ],
                    beginButton: oStartButton,
                    endButton: oGetLinkButton,
                    afterClose: function () {
                        // Reset meeting name when dialog closes
                        oMeetingNameInput.setValue("Meeting with Nadeem Abbas");
                    }
                });

                // Add dialog to view as dependent
                this.getView().addDependent(this._oMeetNowDialog);
            }

            // Open dialog
            this._oMeetNowDialog.open();
        },

        _startMeeting: function () {
            var meetingName = this._sMeetingName || "Meeting with Nadeem Abbas";

            // Create a calendar event for the meeting
            this._createMeetingEvent(meetingName);

            // Close the dialog
            if (this._oMeetNowDialog) {
                this._oMeetNowDialog.close();
            }

            MessageToast.show("Starting meeting: " + meetingName);

            // In a real application, you would integrate with your video conferencing API here
            // For demonstration, we'll just show a message
            sap.m.URLHelper.redirect("https://teams.microsoft.com", false);
        },

        _getMeetingLink: function () {
            // Generate a random meeting ID
            var meetingId = Math.random().toString(36).substring(2, 15) +
                Math.random().toString(36).substring(2, 15);

            // Create the meeting link
            var meetingLink = "https://teams.microsoft.com/l/meetup-join/19:meeting_" +
                meetingId +
                "@thread.v2/0?context=%7B%22Tid%22:%2272f988bf-86f1-41af-91ab-2d7cd011db47%22,%22Oid%22:%22b8b4d3c1-8a4f-4c3e-9c3c-1f2e7d1f3e7a%22%7D";

            // Copy to clipboard
            navigator.clipboard.writeText(meetingLink).then(function () {
                MessageToast.show("Meeting link copied to clipboard");
            }).catch(function (err) {
                console.error('Could not copy text: ', err);
                MessageToast.show("Failed to copy link");
            });

            // Close the dialog
            if (this._oMeetNowDialog) {
                this._oMeetNowDialog.close();
            }
        },

        _createMeetingEvent: function (meetingName) {
            var oNow = UI5Date.getInstance();
            var oStart = UI5Date.getInstance(oNow);
            var oEnd = UI5Date.getInstance(oStart);
            oEnd.setHours(oEnd.getHours() + 1); // 1 hour meeting

            var newAppointment = {
                start: oStart,
                end: oEnd,
                title: meetingName,
                info: "Online Meeting",
                type: "Type01",
                pic: "sap-icon://video",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "Virtual",
                organizerStatus: "sent",
                attendeeStatus: "accepted",
                isOnline: true,
                meetingLink: this._sMeetingLink || ""
            };

            // Get the model and add the new appointment to the first person's calendar
            var oModel = this.getView().getModel();
            var aPeople = oModel.getProperty("/people");

            if (aPeople && aPeople.length > 0) {
                aPeople[0].appointments.push(newAppointment);
                oModel.setProperty("/people", aPeople);

                // Refresh the calendar to show the new appointment
                this.byId("calendar").getBinding("rows").refresh(true);
            }
        },

        // Join meeting functionality with late join detection
        onJoinMeeting: function () {
            var oViewModel = this.getView().getModel("view");
            var oSelectedEvent = oViewModel.getProperty("/selectedEvent");
            var oNow = UI5Date.getInstance();
            var oEventStart = new Date(oSelectedEvent.start);

            // Calculate time difference in minutes
            var iDiffMinutes = (oNow - oEventStart) / (1000 * 60);

            // Check if user is joining 30+ minutes late
            if (iDiffMinutes > 30) {
                // Create a new event starting now and ending 30 minutes later
                var oNewStart = UI5Date.getInstance(oNow);
                var oNewEnd = UI5Date.getInstance(oNow);
                oNewEnd.setMinutes(oNewEnd.getMinutes() + 30);

                var newAppointment = {
                    start: oNewStart,
                    end: oNewEnd,
                    title: "Follow-up: " + oSelectedEvent.title,
                    info: oSelectedEvent.info || "",
                    type: "Type01",
                    category: "Meeting",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: oSelectedEvent.inPerson || "Virtual",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted",
                    meetingLink: oSelectedEvent.meetingLink || ""
                };

                // Add to the first person's appointments
                var oModel = this.getView().getModel();
                var aPeople = oModel.getProperty("/people");

                if (aPeople && aPeople.length > 0) {
                    aPeople[0].appointments.push(newAppointment);
                    oModel.setProperty("/people", aPeople);

                    MessageToast.show("Created a new follow-up meeting for 30 minutes");
                }
            }

            // If the event has a meeting link, open it
            if (oSelectedEvent.meetingLink) {
                sap.m.URLHelper.redirect(oSelectedEvent.meetingLink, true);
            } else {
                MessageToast.show("No meeting link available");
            }
        },

        // Modified onExit method
        onExit: function () {
            // Clean up all fragments when the controller is destroyed
            if (this._oRemarksDialog) {
                this._oRemarksDialog.destroy();
                this._oRemarksDialog = null;
            }

            if (this._oChannelMeetingDialog) {
                this._oChannelMeetingDialog.destroy();
                this._oChannelMeetingDialog = null;
            }

            if (this._oVirtualAppointmentDialog) {
                this._oVirtualAppointmentDialog.destroy();
                this._oVirtualAppointmentDialog = null;
            }

            if (this._oEventDetailsPopover) {
                this._oEventDetailsPopover.destroy();
                this._oEventDetailsPopover = null;
            }

            // Clean up Meet Now dialog
            if (this._oMeetNowDialog) {
                this._oMeetNowDialog.destroy();
                this._oMeetNowDialog = null;
            }

            // Clear the interval for updating current time
            if (this._currentTimeInterval) {
                clearInterval(this._currentTimeInterval);
            }
        }
    });
});

UPDATED CODE 9

sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/ui/core/date/UI5Date",
    "sap/ui/core/Fragment",
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/m/Token",
    "sap/ui/model/odata/v2/ODataModel",
    "sap/m/Dialog",
    "sap/m/Input",
    "sap/m/Button",
    "sap/m/Text"
], function (Controller, JSONModel, MessageToast, UI5Date, Fragment, Filter, FilterOperator, Token, ODataModel, Dialog, Input, Button, Text) {
    "use strict";
    return Controller.extend("com.capexrevex.capexrevex.controller.View1", {
        onInit: function () {
            // Set initial view to Work week
            this.byId("viewSelectButton").setText("Work week");
            // Set initial time scale and days to show
            this._updateTimeScale(30);
            this._updateWorkWeekView(5);
            // Get today's date
            var today = UI5Date.getInstance();
            // Set the calendar to start from today
            var startDate = UI5Date.getInstance(
                today.getFullYear(),
                today.getMonth(),
                today.getDate(),
                8, 0 // Start at 8 AM
            );
            // Create appointments starting from today
            var appointments = [];
            // Today's appointments
            appointments.push({
                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 9, 0),
                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 10, 0),
                title: "Team sync",
                info: "Canteen",
                type: "Type07",
                pic: "sap-icon://family-care",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "In-person",
                organizerStatus: "sent",
                attendeeStatus: "accepted"
            });
            appointments.push({
                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 11, 0),
                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 12, 0),
                title: "Client Meeting",
                info: "Conference Room",
                type: "Type01",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "In-person",
                organizerStatus: "sent",
                attendeeStatus: "tentative"
            });
            // Tomorrow's appointments
            var tomorrow = UI5Date.getInstance(today);
            tomorrow.setDate(tomorrow.getDate() + 1);
            appointments.push({
                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 10, 0),
                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 11, 30),
                title: "Project Review",
                info: "In Progress",
                type: "Type01",
                pic: "sap-icon://business-objects-experience",
                category: "Appointment",
                showAs: "Busy",
                recurrence: "Recurring",
                inPerson: "Virtual",
                organizerStatus: "draft",
                attendeeStatus: "notResponded"
            });
            appointments.push({
                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 14, 0),
                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 15, 0),
                title: "Training Session",
                info: "Online",
                type: "Type03",
                pic: "sap-icon://learning-assistant",
                category: "Appointment",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "Virtual",
                organizerStatus: "sent",
                attendeeStatus: "accepted"
            });
            // Day after tomorrow
            var dayAfter = UI5Date.getInstance(tomorrow);
            dayAfter.setDate(dayAfter.getDate() + 1);
            appointments.push({
                start: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 9, 0),
                end: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 10, 0),
                title: "Team Standup",
                info: "Daily meeting",
                type: "Type07",
                pic: "sap-icon://group",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Recurring",
                inPerson: "Hybrid",
                organizerStatus: "sent",
                attendeeStatus: "accepted"
            });
            appointments.push({
                start: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 13, 0),
                end: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 14, 30),
                title: "Lunch with Client",
                info: "Restaurant",
                type: "Type02",
                pic: "sap-icon://food",
                category: "Appointment",
                showAs: "Free",
                recurrence: "Non-recurring",
                inPerson: "In-person",
                organizerStatus: "sent",
                attendeeStatus: "declined"
            });
            // Fourth day
            var fourthDay = UI5Date.getInstance(dayAfter);
            fourthDay.setDate(fourthDay.getDate() + 1);
            appointments.push({
                start: UI5Date.getInstance(fourthDay.getFullYear(), fourthDay.getMonth(), fourthDay.getDate(), 11, 0),
                end: UI5Date.getInstance(fourthDay.getFullYear(), fourthDay.getMonth(), fourthDay.getDate(), 12, 0),
                title: "Product Demo",
                info: "Showcase new features",
                type: "Type04",
                pic: "sap-icon://presentation",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "In-person",
                organizerStatus: "sent",
                attendeeStatus: "followed"
            });
            // Fifth day
            var fifthDay = UI5Date.getInstance(fourthDay);
            fifthDay.setDate(fifthDay.getDate() + 1);
            appointments.push({
                start: UI5Date.getInstance(fifthDay.getFullYear(), fifthDay.getMonth(), fifthDay.getDate(), 10, 0),
                end: UI5Date.getInstance(fifthDay.getFullYear(), fifthDay.getMonth(), fifthDay.getDate(), 11, 30),
                title: "Planning Session",
                info: "Quarterly planning",
                type: "Type05",
                pic: "sap-icon://calendar",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Recurring",
                inPerson: "Virtual",
                organizerStatus: "sent",
                attendeeStatus: "canceled"
            });
            // Initialize the view model with data
            var oViewModel = new JSONModel({
                startDate: startDate,
                people: [
                    {
                        name: "John Doe",
                        role: "Developer",
                        appointments: appointments
                    }
                ],
                selectedEvent: {
                    title: "",
                    start: UI5Date.getInstance(),
                    end: UI5Date.getInstance(),
                    info: "",
                    type: "Type01",
                    isNew: true // Flag to identify new appointments
                },
                filters: {
                    appointments: true,
                    meetings: true,
                    reservations: false,
                    categories: [],
                    showAs: [],
                    recurrence: [],
                    inPerson: [],
                    organizer: {
                        sent: true,
                        draft: true
                    },
                    attendee: {
                        accepted: true,
                        declined: true,
                        followed: true,
                        tentative: true,
                        canceled: true,
                        notResponded: true
                    }
                },
                currentView: "Work week", // Track the current calendar view
                timeScale: "30 minutes", // Track the current time scale
                daysToShow: 5, // Track the number of days to show in work week view
                workWeekMenuOpen: false, // Track if work week submenu is open
                timeScaleMinutes: 30, // Add numeric value for time scale
                groupMode: "Group" // For group appointment mode
            });
            // Create additional model with extended data using UI5Date
            var oModel = new JSONModel();
            oModel.setData({
                startDate: startDate,
                people: [
                    {
                        pic: "sap-icon://hr-approval/",
                        name: "John Miller",
                        role: "team member",
                        appointments: [
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 8, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 9, 0),
                                title: "Team sync",
                                info: "Canteen",
                                type: "Type07",
                                pic: "sap-icon://family-care",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "accepted"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 9, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 11, 0),
                                title: "Morning Sync",
                                info: "I call you",
                                type: "Type01",
                                pic: "sap-icon://call",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Recurring",
                                inPerson: "Virtual",
                                organizerStatus: "sent",
                                attendeeStatus: "tentative"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 10, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 12, 0),
                                title: "Sync Bill",
                                info: "Online",
                                type: "Type03",
                                category: "Appointment",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "Virtual",
                                organizerStatus: "draft",
                                attendeeStatus: "notResponded"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 10, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 13, 0),
                                title: "Check Flights",
                                info: "no room",
                                type: "Type09",
                                pic: "sap-icon://flight",
                                category: "Appointment",
                                showAs: "Free",
                                recurrence: "Non-recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "declined"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 13, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 14, 0),
                                title: "Lunch",
                                info: "canteen",
                                type: "Type05",
                                pic: "sap-icon://private",
                                category: "Appointment",
                                showAs: "Free",
                                recurrence: "Non-recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "accepted"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 18, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 20, 0),
                                title: "Discussion of the plan",
                                info: "Online meeting",
                                type: "Type04",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "Virtual",
                                organizerStatus: "sent",
                                attendeeStatus: "followed"
                            }
                        ]
                    },
                    {
                        pic: "sap-icon://hr-approval",
                        name: "Donna Moore",
                        role: "team member",
                        appointments: [
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 8, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 9, 26),
                                title: "Team sync",
                                info: "Canteen",
                                type: "Type07",
                                pic: "sap-icon://family-care",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "accepted"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 10, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 12, 0),
                                title: "Sync John",
                                info: "Online",
                                type: "Type03",
                                category: "Appointment",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "Virtual",
                                organizerStatus: "draft",
                                attendeeStatus: "notResponded"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 11, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 12, 0),
                                title: "Prep for planning",
                                info: "room 5",
                                type: "Type01",
                                pic: "sap-icon://family-care",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "canceled"
                            }
                        ]
                    },
                    {
                        pic: "sap-icon://hr-approval",
                        name: "Alex Johnson",
                        role: "team member",
                        appointments: [
                            {
                                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 9, 0),
                                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 10, 0),
                                title: "Team sync",
                                info: "Canteen",
                                type: "Type07",
                                pic: "sap-icon://family-care",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "accepted"
                            },
                            {
                                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 10, 0),
                                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 12, 0),
                                title: "Project Planning",
                                info: "Conference Room",
                                type: "Type01",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "tentative"
                            },
                            {
                                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 14, 0),
                                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 15, 0),
                                title: "Client Call",
                                info: "Online",
                                type: "Type03",
                                category: "Appointment",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "Virtual",
                                organizerStatus: "draft",
                                attendeeStatus: "notResponded"
                            }
                        ]
                    },
                    {
                        pic: "sap-icon://hr-approval",
                        name: "Sarah Williams",
                        role: "team member",
                        appointments: [
                            {
                                start: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 9, 0),
                                end: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 10, 0),
                                title: "Team sync",
                                info: "Canteen",
                                type: "Type07",
                                pic: "sap-icon://family-care",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "accepted"
                            },
                            {
                                start: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 11, 0),
                                end: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 12, 30),
                                title: "Design Review",
                                info: "Conference Room",
                                type: "Type01",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "declined"
                            }
                        ]
                    }
                ]
            });
            // Set both models to the view
            this.getView().setModel(oViewModel, "view");
            this.getView().setModel(oModel);
            // Initialize filter arrays
            this._aFilters = [];
            // Update date display in filter popover
            this._updateDateDisplay();
            // Set initial view to Work week
            this.byId("viewSelectButton").setText("Work week");
            // Set initial time scale and days to show
            this._updateTimeScale(30);
            this._updateWorkWeekView(5);
            // Create attendees model with proper structure
            var oAttendeesModel = new JSONModel({
                attendees: [
                    { name: "Ankit Jha", email: "ankit.jha@sumodigitech.com", status: "Free" },
                    { name: "Vikrant Raj", email: "vikrant.raj@sumodigitech.com", status: "Free" },
                    { name: "Pushpak Jha", email: "pushpak.jha@sumodigitech.com", status: "Busy" },
                    { name: "Pushkar Kumar Jha", email: "pushkar.jha@sumodigitech.com", status: "Tentative" },
                    { name: "Sumit Jhaldiyal", email: "sumit.jhaldiyal@sumodigitech.com", status: "Free" },
                    { name: "Mohd Aakib", email: "mohd.aakib@sumodigitech.com", status: "Free" },
                    { name: "Vikash Ojha", email: "vikash.ojha@sumodigitech.com", status: "Free" },
                    { name: "Yugal Kishore", email: "yugal.kishore@sumodigitech.com", status: "Busy" },
                ]
            });
            this.getView().setModel(oAttendeesModel, "attendees");
            // Initialize OData model for scheduling service
            var oSchedulingModel = new ODataModel({
                serviceUrl: "/schedulingservice/",
                useBatch: false
            });
            this.getView().setModel(oSchedulingModel, "scheduling");
            // Load attendees data
            this._loadAttendees();
        },
        
        // Meet Now functionality
        onMeetNowPress: function() {
            this._openMeetNowDialog();
        },
        
        _openMeetNowDialog: function() {
            // Create dialog if it doesn't exist
            if (!this._oMeetNowDialog) {
                // Create meeting name input
                var oMeetingNameInput = new Input({
                    placeholder: "Enter meeting name",
                    value: "Meeting with Nadeem Abbas",
                    liveChange: function(oEvent) {
                        this._sMeetingName = oEvent.getParameter("value");
                    }.bind(this)
                });
                
                // Create start meeting button
                var oStartButton = new Button({
                    text: "Start meeting",
                    type: "Emphasized",
                    press: function() {
                        this._startMeeting();
                    }.bind(this)
                });
                
                // Create get link button
                var oGetLinkButton = new Button({
                    text: "Get a link to share",
                    press: function() {
                        this._getMeetingLink();
                    }.bind(this)
                });
                
                // Create dialog
                this._oMeetNowDialog = new Dialog({
                    title: "Start a meeting now",
                    content: [
                        new Text({text: "Meeting name"}),
                        oMeetingNameInput
                    ],
                    beginButton: oStartButton,
                    endButton: oGetLinkButton,
                    afterClose: function() {
                        // Reset meeting name when dialog closes
                        oMeetingNameInput.setValue("Meeting with Nadeem Abbas");
                    }
                });
                
                // Add dialog to view as dependent
                this.getView().addDependent(this._oMeetNowDialog);
            }
            
            // Open dialog
            this._oMeetNowDialog.open();
        },
        
        _startMeeting: function() {
            var meetingName = this._sMeetingName || "Meeting with Nadeem Abbas";
            
            // Create a calendar event for the meeting
            this._createMeetingEvent(meetingName);
            
            // Close the dialog
            if (this._oMeetNowDialog) {
                this._oMeetNowDialog.close();
            }
            
            MessageToast.show("Starting meeting: " + meetingName);
            
            // In a real application, you would integrate with your video conferencing API here
            // For demonstration, we'll just show a message
            sap.m.URLHelper.redirect("https://teams.microsoft.com", false);
        },
        
        _getMeetingLink: function() {
            // Generate a random meeting ID
            var meetingId = Math.random().toString(36).substring(2, 15) + 
                            Math.random().toString(36).substring(2, 15);
            
            // Create the meeting link
            var meetingLink = "https://teams.microsoft.com/l/meetup-join/19:meeting_" + 
                              meetingId + 
                              "@thread.v2/0?context=%7B%22Tid%22:%2272f988bf-86f1-41af-91ab-2d7cd011db47%22,%22Oid%22:%22b8b4d3c1-8a4f-4c3e-9c3c-1f2e7d1f3e7a%22%7D";
            
            // Copy to clipboard
            navigator.clipboard.writeText(meetingLink).then(function() {
                MessageToast.show("Meeting link copied to clipboard");
            }).catch(function(err) {
                console.error('Could not copy text: ', err);
                MessageToast.show("Failed to copy link");
            });
            
            // Close the dialog
            if (this._oMeetNowDialog) {
                this._oMeetNowDialog.close();
            }
        },
        
        _createMeetingEvent: function(meetingName) {
            var oNow = UI5Date.getInstance();
            var oStart = UI5Date.getInstance(oNow);
            var oEnd = UI5Date.getInstance(oStart);
            oEnd.setHours(oEnd.getHours() + 1); // 1 hour meeting
            
            var newAppointment = {
                start: oStart,
                end: oEnd,
                title: meetingName,
                info: "Online Meeting",
                type: "Type01",
                pic: "sap-icon://video",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "Virtual",
                organizerStatus: "sent",
                attendeeStatus: "accepted",
                isOnline: true,
                meetingLink: this._sMeetingLink || ""
            };
            
            // Get the model and add the new appointment to the first person's calendar
            var oModel = this.getView().getModel();
            var aPeople = oModel.getProperty("/people");
            
            if (aPeople && aPeople.length > 0) {
                aPeople[0].appointments.push(newAppointment);
                oModel.setProperty("/people", aPeople);
                
                // Refresh the calendar to show the new appointment
                this.byId("calendar").getBinding("rows").refresh(true);
            }
        },
        
        // Load attendees from scheduling service
        _loadAttendees: function () {
            var oSchedulingModel = this.getView().getModel("scheduling");
            var oAttendeesModel = this.getView().getModel("attendees");
            var that = this;
            oSchedulingModel.read("/MeetingSchedulingSet", {
                success: function (oData) {
                    var aAttendees = [];
                    if (oData && oData.results) {
                        oData.results.forEach(function (oAttendee) {
                            aAttendees.push({
                                id: oAttendee.AttendeeID,
                                name: oAttendee.AttendeeName,
                                email: oAttendee.AttendeeEmail,
                                role: oAttendee.Role || "Attendee",
                                status: oAttendee.Status || "Free"
                            });
                        });
                    }
                    oAttendeesModel.setProperty("/attendees", aAttendees);
                    MessageToast.show("Attendees loaded successfully: " + aAttendees.length + " found");
                },
                error: function (oError) {
                    console.error("Error loading attendees:", oError);
                    MessageToast.show("Error loading attendees from service");
                }
            });
        },
        // Handle attendee suggestions in MultiInput
        onAttendeeSuggest: function (oEvent) {
            var sTerm = oEvent.getParameter("suggestValue");
            var oMultiInput = oEvent.getSource();
            var oAttendeesModel = this.getView().getModel("attendees");
            if (!oAttendeesModel) {
                return;
            }
            var aAttendees = oAttendeesModel.getProperty("/attendees") || [];
            var aFilteredAttendees = [];
            if (sTerm) {
                // Filter attendees based on search term
                aFilteredAttendees = aAttendees.filter(function (oAttendee) {
                    return oAttendee.name.toLowerCase().includes(sTerm.toLowerCase()) ||
                        oAttendee.email.toLowerCase().includes(sTerm.toLowerCase());
                });
            } else {
                aFilteredAttendees = aAttendees;
            }
            // Update suggestion items
            oMultiInput.destroySuggestionItems();
            aFilteredAttendees.forEach(function (oAttendee) {
                // Create a custom suggestion item with name, email, and status
                var oSuggestionItem = new sap.m.SuggestionItem({
                    key: oAttendee.email,
                    text: oAttendee.name,
                    description: oAttendee.email,
                    additionalText: oAttendee.status
                });
                // Set different icons based on status
                switch (oAttendee.status.toLowerCase()) {
                    case "free":
                        oSuggestionItem.setIcon("sap-icon://accept");
                        break;
                    case "busy":
                        oSuggestionItem.setIcon("sap-icon://busy");
                        break;
                    case "tentative":
                        oSuggestionItem.setIcon("sap-icon://question-mark");
                        break;
                    default:
                        oSuggestionItem.setIcon("sap-icon://employee");
                }
                oMultiInput.addSuggestionItem(oSuggestionItem);
            });
        },
        // Handle token addition in MultiInput
        onAttendeeTokenChange: function (oEvent) {
            var oMultiInput = oEvent.getSource();
            var sInputValue = oMultiInput.getValue().trim();
            if (!sInputValue) {
                return;
            }
            // Check if input is an email or should be treated as search
            if (this._isEmailValid(sInputValue)) {
                // Create token for manually entered email
                var oToken = new Token({
                    key: sInputValue,
                    text: sInputValue
                });
                oMultiInput.addToken(oToken);
                oMultiInput.setValue("");
            } else {
                // Trigger suggestion for non-email input
                this.onAttendeeSuggest(oEvent);
            }
        },
        // Validate email format
        _isEmailValid: function (sEmail) {
            var re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            return re.test(sEmail);
        },
        // Create meeting scheduling
        createMeetingScheduling: function (oMeetingData) {
            var oSchedulingModel = this.getView().getModel("scheduling");
            var that = this;
            oSchedulingModel.create("/MeetingSchedulingSet", oMeetingData, {
                success: function (oData) {
                    MessageToast.show("Meeting scheduled successfully!");
                    // Refresh attendees after creating meeting
                    that._loadAttendees();
                    // Add the meeting to the calendar
                    that._addMeetingToCalendar(oData);
                },
                error: function (oError) {
                    console.error("Error scheduling meeting:", oError);
                    MessageToast.show("Failed to schedule meeting");
                    // Fallback: Add to local calendar
                    that._addMeetingToCalendar(oMeetingData);
                }
            });
        },
        // Helper method to add meeting to calendar
        _addMeetingToCalendar: function (oMeetingData) {
            var oModel = this.getView().getModel();
            var aPeople = oModel.getProperty("/people");
            if (aPeople && aPeople.length > 0) {
                var newAppointment = {
                    start: new Date(oMeetingData.StartDateTime),
                    end: new Date(oMeetingData.EndDateTime),
                    title: oMeetingData.MeetingTitle,
                    info: oMeetingData.Location || "Online Meeting",
                    type: "Type01",
                    pic: "sap-icon://group",
                    category: "Meeting",
                    showAs: "Busy",
                    recurrence: oMeetingData.IsRecurring ? "Recurring" : "Non-recurring",
                    inPerson: oMeetingData.IsVirtual ? "Virtual" : "In-person",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted",
                    attendees: oMeetingData.Attendees || []
                };
                aPeople[0].appointments.push(newAppointment);
                oModel.setProperty("/people", aPeople);
                // Refresh calendar
                this.byId("calendar").getBinding("rows").refresh(true);
            }
        },
        // Update date display in filter popover
        _updateDateDisplay: function () {
            var oDateDisplay = this.byId("dateDisplay");
            if (oDateDisplay) {
                var today = UI5Date.getInstance();
                var options = { weekday: 'long', day: 'numeric' };
                var dateText = today.toLocaleDateString('en-US', options);
                oDateDisplay.setText(dateText);
            }
        },
        // Role-based functionality
        roles: {
            donna: "Donna Moore",
            manager: "manager",
            admin: "admin"
        },
        handleRoleChange: function () {
            this.getView().getModel().refresh(true);
        },
        getUserRole: function () {
            return this.roles[this.byId("userRole").getSelectedKey()];
        },
        canModifyAppointments: function (sRole) {
            var sUserRole = this.getUserRole();
            if (sUserRole === this.roles.manager || sUserRole === this.roles.admin || sUserRole === sRole) {
                return true;
            }
            return false;
        },
        // Filter functionality
        onFilterChange: function (oEvent) {
            var sFilterType = oEvent.getSource().getId().replace("Checkbox", "");
            var bSelected = oEvent.getParameter("selected");
            // Update filter model
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            oFilters[sFilterType.toLowerCase()] = bSelected;
            oViewModel.setProperty("/filters", oFilters);
            // Apply filters
            this.applyFilters();
        },
        applyFilters: function () {
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            // Clear existing filters
            this._aFilters = [];
            // Apply category filters
            if (!oFilters.appointments) {
                this._aFilters.push(new Filter("category", FilterOperator.NE, "Appointment"));
            }
            if (!oFilters.meetings) {
                this._aFilters.push(new Filter("category", FilterOperator.NE, "Meeting"));
            }
            if (!oFilters.reservations) {
                this._aFilters.push(new Filter("category", FilterOperator.NE, "Reservation"));
            }
            // Apply additional filters based on selected options
            if (oFilters.categories && oFilters.categories.length > 0) {
                this._aFilters.push(new Filter("category", FilterOperator.Contains, oFilters.categories.join("|")));
            }
            if (oFilters.showAs && oFilters.showAs.length > 0) {
                this._aFilters.push(new Filter("showAs", FilterOperator.Contains, oFilters.showAs.join("|")));
            }
            if (oFilters.recurrence && oFilters.recurrence.length > 0) {
                this._aFilters.push(new Filter("recurrence", FilterOperator.Contains, oFilters.recurrence.join("|")));
            }
            if (oFilters.inPerson && oFilters.inPerson.length > 0) {
                this._aFilters.push(new Filter("inPerson", FilterOperator.Contains, oFilters.inPerson.join("|")));
            }
            // Apply organizer filters
            var aOrganizerFilters = [];
            if (oFilters.organizer.sent) {
                aOrganizerFilters.push(new Filter("organizerStatus", FilterOperator.EQ, "sent"));
            }
            if (oFilters.organizer.draft) {
                aOrganizerFilters.push(new Filter("organizerStatus", FilterOperator.EQ, "draft"));
            }
            if (aOrganizerFilters.length > 0) {
                this._aFilters.push(new Filter({
                    filters: aOrganizerFilters,
                    and: false
                }));
            }
            // Apply attendee filters
            var aAttendeeFilters = [];
            if (oFilters.attendee.accepted) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "accepted"));
            }
            if (oFilters.attendee.declined) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "declined"));
            }
            if (oFilters.attendee.followed) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "followed"));
            }
            if (oFilters.attendee.tentative) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "tentative"));
            }
            if (oFilters.attendee.canceled) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "canceled"));
            }
            if (oFilters.attendee.notResponded) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "notResponded"));
            }
            if (aAttendeeFilters.length > 0) {
                this._aFilters.push(new Filter({
                    filters: aAttendeeFilters,
                    and: false
                }));
            }
            // Apply filters to the calendar
            var oCalendar = this.byId("calendar");
            var oBinding = oCalendar.getBinding("rows");
            if (this._aFilters.length > 0) {
                oBinding.filter(this._aFilters);
            } else {
                oBinding.filter([]);
            }
            // Update filter button text
            var oFilterButton = this.byId("_IDGenButton7");
            var iFilterCount = this._aFilters.length;
            oFilterButton.setText(iFilterCount > 0 ? "Filter applied (" + iFilterCount + ")" : "Filter applied");
        },
        // Filter popover handlers
        onAppointmentsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("appointmentsFilterPopover").openBy(oButton);
        },
        onMeetingsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("meetingsFilterPopover").openBy(oButton);
        },
        onReservationsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("reservationsFilterPopover").openBy(oButton);
        },
        onCategoriesFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("categoriesFilterPopover").openBy(oButton);
        },
        onShowAsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("showAsFilterPopover").openBy(oButton);
        },
        onRecurrenceFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("recurrenceFilterPopover").openBy(oButton);
        },
        onInPersonFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("inPersonFilterPopover").openBy(oButton);
        },
        // Organizer and Attendee filter handlers
        onOrganizerFilterPress: function (oEvent) {
            var oOptionsBox = this.byId("organizerOptions");
            oOptionsBox.setVisible(!oOptionsBox.getVisible());
        },
        onAttendeeFilterPress: function (oEvent) {
            var oOptionsBox = this.byId("attendeeOptions");
            oOptionsBox.setVisible(!oOptionsBox.getVisible());
        },
        onOrganizerFilterChange: function (oEvent) {
            var sId = oEvent.getSource().getId();
            var bSelected = oEvent.getParameter("selected");
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            // Update the corresponding filter property
            if (sId === "sentCheckbox") {
                oFilters.organizer.sent = bSelected;
            } else if (sId === "draftCheckbox") {
                oFilters.organizer.draft = bSelected;
            }
            oViewModel.setProperty("/filters", oFilters);
            this.applyFilters();
        },
        onAttendeeFilterChange: function (oEvent) {
            var sId = oEvent.getSource().getId();
            var bSelected = oEvent.getParameter("selected");
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            // Update the corresponding filter property
            if (sId === "acceptedCheckbox") {
                oFilters.attendee.accepted = bSelected;
            } else if (sId === "declinedCheckbox") {
                oFilters.attendee.declined = bSelected;
            } else if (sId === "followedCheckbox") {
                oFilters.attendee.followed = bSelected;
            } else if (sId === "tentativeCheckbox") {
                oFilters.attendee.tentative = bSelected;
            } else if (sId === "canceledCheckbox") {
                oFilters.attendee.canceled = bSelected;
            } else if (sId === "notRespondedCheckbox") {
                oFilters.attendee.notResponded = bSelected;
            }
            oViewModel.setProperty("/filters", oFilters);
            this.applyFilters();
        },
        onUnselectAllRight: function () {
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            // Reset organizer filters
            oFilters.organizer.sent = false;
            oFilters.organizer.draft = false;
            // Reset attendee filters
            oFilters.attendee.accepted = false;
            oFilters.attendee.declined = false;
            oFilters.attendee.followed = false;
            oFilters.attendee.tentative = false;
            oFilters.attendee.canceled = false;
            oFilters.attendee.notResponded = false;
            oViewModel.setProperty("/filters", oFilters);
            // Update the checkboxes
            this.byId("sentCheckbox").setSelected(false);
            this.byId("draftCheckbox").setSelected(false);
            this.byId("acceptedCheckbox").setSelected(false);
            this.byId("declinedCheckbox").setSelected(false);
            this.byId("followedCheckbox").setSelected(false);
            this.byId("tentativeCheckbox").setSelected(false);
            this.byId("canceledCheckbox").setSelected(false);
            this.byId("notRespondedCheckbox").setSelected(false);
            this.applyFilters();
        },
        // Unselect all handlers
        onAppointmentsUnselectAll: function () {
            this._unselectAllCheckboxes("appointmentsFilterList");
        },
        onMeetingsUnselectAll: function () {
            this._unselectAllCheckboxes("meetingsFilterList");
        },
        onReservationsUnselectAll: function () {
            this._unselectAllCheckboxes("reservationsFilterList");
        },
        onCategoriesUnselectAll: function () {
            this._unselectAllCheckboxes("categoriesFilterList");
        },
        onShowAsUnselectAll: function () {
            this._unselectAllCheckboxes("showAsFilterList");
        },
        onRecurrenceUnselectAll: function () {
            this._unselectAllCheckboxes("recurrenceFilterList");
        },
        onInPersonUnselectAll: function () {
            this._unselectAllCheckboxes("inPersonFilterList");
        },
        _unselectAllCheckboxes: function (sListId) {
            var oList = this.byId(sListId);
            var aItems = oList.getItems();
            aItems.forEach(function (oItem) {
                if (oItem.isA("sap.m.CheckBox")) {
                    oItem.setSelected(false);
                }
            });
        },
        // Filter selection handlers
        onAppointmentsFilterSelect: function (oEvent) {
            this._updateFilterArray("appointments", oEvent);
        },
        onMeetingsFilterSelect: function (oEvent) {
            this._updateFilterArray("meetings", oEvent);
        },
        onReservationsFilterSelect: function (oEvent) {
            this._updateFilterArray("reservations", oEvent);
        },
        onCategoriesFilterSelect: function (oEvent) {
            this._updateFilterArray("categories", oEvent);
        },
        onShowAsFilterSelect: function (oEvent) {
            this._updateFilterArray("showAs", oEvent);
        },
        onRecurrenceFilterSelect: function (oEvent) {
            this._updateFilterArray("recurrence", oEvent);
        },
        onInPersonFilterSelect: function (oEvent) {
            this._updateFilterArray("inPerson", oEvent);
        },
        _updateFilterArray: function (sFilterType, oEvent) {
            var sValue = oEvent.getSource().getText();
            var bSelected = oEvent.getParameter("selected");
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            if (!oFilters[sFilterType]) {
                oFilters[sFilterType] = [];
            }
            if (bSelected) {
                if (oFilters[sFilterType].indexOf(sValue) === -1) {
                    oFilters[sFilterType].push(sValue);
                }
            } else {
                var iIndex = oFilters[sFilterType].indexOf(sValue);
                if (iIndex !== -1) {
                    oFilters[sFilterType].splice(iIndex, 1);
                }
            }
            oViewModel.setProperty("/filters", oFilters);
            this.applyFilters();
        },
        onClearFilters: function () {
            // Reset all filter checkboxes
            var aCheckBoxIds = [
                "appointmentsCheckbox", "meetingsCheckbox", "reservationsCheckbox"
            ];
            aCheckBoxIds.forEach(function (sId) {
                var oCheckBox = this.byId(sId);
                if (oCheckBox) {
                    oCheckBox.setSelected(sId === "appointmentsCheckbox" || sId === "meetingsCheckbox");
                }
            }.bind(this));
            // Reset organizer and attendee filters
            this.byId("sentCheckbox").setSelected(true);
            this.byId("draftCheckbox").setSelected(true);
            this.byId("acceptedCheckbox").setSelected(true);
            this.byId("declinedCheckbox").setSelected(true);
            this.byId("followedCheckbox").setSelected(true);
            this.byId("tentativeCheckbox").setSelected(true);
            this.byId("canceledCheckbox").setSelected(true);
            this.byId("notRespondedCheckbox").setSelected(true);
            // Reset filter arrays in model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/filters", {
                appointments: true,
                meetings: true,
                reservations: false,
                categories: [],
                showAs: [],
                recurrence: [],
                inPerson: [],
                organizer: {
                    sent: true,
                    draft: true
                },
                attendee: {
                    accepted: true,
                    declined: true,
                    followed: true,
                    tentative: true,
                    canceled: true,
                    notResponded: true
                }
            });
            // Apply empty filters
            this._aFilters = [];
            var oCalendar = this.byId("calendar");
            oCalendar.getBinding("rows").filter([]);
            // Update filter button text
            this.byId("_IDGenButton7").setText("Filter applied");
            MessageToast.show("All filters cleared");
        },
        // Drag and Drop functionality
        handleAppointmentDragEnter: function (oEvent) {
            if (this.isAppointmentOverlap(oEvent, oEvent.getParameter("calendarRow"))) {
                oEvent.preventDefault();
            }
        },
        handleAppointmentDrop: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                oCalendarRow = oEvent.getParameter("calendarRow"),
                bCopy = oEvent.getParameter("copy"),
                sTitle = oAppointment.getTitle(),
                oModel = this.getView().getModel(),
                oAppBindingContext = oAppointment.getBindingContext(),
                oRowBindingContext = oCalendarRow.getBindingContext(),
                handleAppointmentDropBetweenRows = function () {
                    var aPath = oAppBindingContext.getPath().split("/");
                    var iIndex = aPath.pop();
                    var sRowAppointmentsPath = aPath.join("/");
                    oRowBindingContext.getObject().appointments.push(
                        oModel.getProperty(oAppBindingContext.getPath())
                    );
                    oModel.getProperty(sRowAppointmentsPath).splice(iIndex, 1);
                };
            if (bCopy) { // "copy" appointment
                var oProps = Object.assign({}, oModel.getProperty(oAppointment.getBindingContext().getPath()));
                oProps.start = oStartDate;
                oProps.end = oEndDate;
                oRowBindingContext.getObject().appointments.push(oProps);
            } else { // "move" appointment
                oModel.setProperty("start", oStartDate, oAppBindingContext);
                oModel.setProperty("end", oEndDate, oAppBindingContext);
                if (oAppointment.getParent() !== oCalendarRow) {
                    handleAppointmentDropBetweenRows();
                }
            }
            oModel.refresh(true);
        },
        handleAppointmentResize: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate");
            if (!this.isAppointmentOverlap(oEvent, oAppointment.getParent())) {
                oAppointment
                    .setStartDate(oStartDate)
                    .setEndDate(oEndDate);
            } else {
                MessageToast.show("As a manager you can not resize events if they overlap with another events");
            }
        },
        // Modified handleAppointmentCreate to open event details fragment
        handleAppointmentCreate: function (oEvent) {
            var oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                oPlanningCalendarRow = oEvent.getParameter("calendarRow"),
                oModel = this.getView().getModel(),
                sPath = oPlanningCalendarRow.getBindingContext().getPath();
            // Create a new appointment object
            var newAppointment = {
                title: "New Appointment",
                start: oStartDate,
                end: oEndDate,
                info: "",
                type: "Type01",
                category: "Appointment",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "In-person",
                organizerStatus: "sent",
                attendeeStatus: "accepted",
                isNew: true // Flag to indicate it's a new appointment
            };
            // Set the selected event in the view model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", newAppointment);
            // Open the event details fragment
            this._openEventDetailsPopover(oEvent.getParameter("domRef"));
            MessageToast.show("New Appointment is created at \n" + oStartDate + "\n and end at \n" + oEndDate + ".");
        },
        isAppointmentOverlap: function (oEvent, oCalendarRow) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                bAppointmentOverlapped;
            if (this.getUserRole() === this.roles.manager) {
                bAppointmentOverlapped = oCalendarRow.getAppointments().some(function (oCurrentAppointment) {
                    if (oCurrentAppointment === oAppointment) {
                        return;
                    }
                    var oAppStartTime = oCurrentAppointment.getStartDate().getTime(),
                        oAppEndTime = oCurrentAppointment.getEndDate().getTime();
                    if (oAppStartTime <= oStartDate.getTime() && oStartDate.getTime() < oAppEndTime) {
                        return true;
                    }
                    if (oAppStartTime < oEndDate.getTime() && oEndDate.getTime() <= oAppEndTime) {
                        return true;
                    }
                    if (oStartDate.getTime() <= oAppStartTime && oAppStartTime < oEndDate.getTime()) {
                        return true;
                    }
                });
            }
            return bAppointmentOverlapped;
        },
        // Toolbar and UI functionality
        onTodayPress: function () {
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/startDate", UI5Date.getInstance());
            MessageToast.show("Navigated to today");
        },
        onViewSelectPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oViewPopover = this.byId("viewPopover");
            // Close other popovers
            this.byId("filterPopover").close();
            this.byId("newEventPopover").close();
            this.byId("eventDetailsPopover").close();
            // Toggle view popover
            if (!oViewPopover.isOpen()) {
                oViewPopover.openBy(oButton);
            } else {
                oViewPopover.close();
            }
        },
        onFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oFilterPopover = this.byId("filterPopover");
            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("newEventPopover").close();
            this.byId("eventDetailsPopover").close();
            // Toggle filter popover
            if (!oFilterPopover.isOpen()) {
                oFilterPopover.openBy(oButton);
            } else {
                oFilterPopover.close();
            }
        },
        onNewEventPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oNewEventPopover = this.byId("newEventPopover");
            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("filterPopover").close();
            this.byId("eventDetailsPopover").close();
            // Toggle new event popover
            if (!oNewEventPopover.isOpen()) {
                oNewEventPopover.openBy(oButton);
            } else {
                oNewEventPopover.close();
            }
        },
        onNotificationPress: function () {
            MessageToast.show("No new notifications");
        },
        // Work week menu functionality
        onWorkWeekMenuPress: function (oEvent) {
            var oViewModel = this.getView().getModel("view");
            var bMenuOpen = oViewModel.getProperty("/workWeekMenuOpen");
            // Toggle the menu visibility
            oViewModel.setProperty("/workWeekMenuOpen", !bMenuOpen);
            // Update the arrow icon direction
            var oButton = this.byId("_IDGenWorkWeekButton");
            oButton.setIcon(!bMenuOpen ? "sap-icon://slim-arrow-down" : "sap-icon://slim-arrow-right");
        },
        // Time scale dropdown change handler
        onTimeScaleChange: function (oEvent) {
            var oViewModel = this.getView().getModel("view");
            var oSource = oEvent.getSource();
            var sSelectedKey = oSource.getSelectedKey();
            // Extract the number of minutes from the selected key
            var iMinutes = parseInt(sSelectedKey);
            // Update the model
            oViewModel.setProperty("/timeScale", iMinutes + " minutes");
            oViewModel.setProperty("/timeScaleMinutes", iMinutes);
            // Get current days to show
            var iDays = oViewModel.getProperty("/daysToShow");
            // Update the button text to show both days and time scale
            var oButton = this.byId("viewSelectButton");
            oButton.setText("Work week (" + iDays + " days, " + iMinutes + " min)");
            // Update the calendar's time scale
            this._updateTimeScale(iMinutes);
            // Make sure we're in Work week view
            var oCalendar = this.byId("calendar");
            oCalendar.setViewKey("Workweek");
            oViewModel.setProperty("/currentView", "Work week");
            MessageToast.show("Time scale changed to: " + iMinutes + " minutes");
        },
        // Days to show dropdown change handler
        onDaysToShowChange: function (oEvent) {
            var oViewModel = this.getView().getModel("view");
            var oSource = oEvent.getSource();
            var iDays = parseInt(oSource.getSelectedKey());
            // Update the model
            oViewModel.setProperty("/daysToShow", iDays);
            // Get current time scale
            var sTimeScale = oViewModel.getProperty("/timeScale");
            var iMinutes = parseInt(sTimeScale.match(/\d+/)[0]);
            // Update the button text to show both days and time scale
            var oButton = this.byId("viewSelectButton");
            oButton.setText("Work week (" + iDays + " days, " + iMinutes + " min)");
            // Update the work week view
            this._updateWorkWeekView(iDays);
            // Make sure we're in Work week view
            var oCalendar = this.byId("calendar");
            oCalendar.setViewKey("Workweek");
            oViewModel.setProperty("/currentView", "Work week");
            MessageToast.show("Work week now shows " + iDays + " days");
        },
        // Days dropdown change handler (main view selection)
        onDaysChange: function (oEvent) {
            var oSource = oEvent.getSource();
            var iDays = parseInt(oSource.getSelectedKey());
            // Update the model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/daysToShow", iDays);
            // Set the current view to Work week
            oViewModel.setProperty("/currentView", "Work week");
            // Update the button text
            var oButton = this.byId("viewSelectButton");
            var sTimeScale = oViewModel.getProperty("/timeScale");
            var iMinutes = parseInt(sTimeScale.match(/\d+/)[0]);
            oButton.setText("Work week (" + iDays + " days, " + iMinutes + " min)");
            // Update the calendar
            var oCalendar = this.byId("calendar");
            oCalendar.setViewKey("Workweek");
            // Update the work week view
            this._updateWorkWeekView(iDays);
            // Close the popover
            this.byId("viewPopover").close();
            MessageToast.show("Work week now shows " + iDays + " days");
        },
        onViewSelected: function (oEvent) {
            var sSelectedView = oEvent.getParameter("listItem").getTitle();
            var oButton = this.byId("viewSelectButton");
            var oCalendar = this.byId("calendar");
            var oViewModel = this.getView().getModel("view");
            // Close the popover first
            this.byId("viewPopover").close();
            // Handle regular view selection
            if (sSelectedView === "Work week") {
                oButton.setText(sSelectedView);
                oViewModel.setProperty("/currentView", sSelectedView);
                // Update calendar view
                oCalendar.setViewKey("Workweek");
                // Get current settings
                var iDaysToShow = oViewModel.getProperty("/daysToShow");
                var sTimeScale = oViewModel.getProperty("/timeScale");
                var iMinutes = parseInt(sTimeScale.match(/\d+/)[0]);
                // Update button text to show both days and time scale
                oButton.setText("Work week (" + iDaysToShow + " days, " + iMinutes + " min)");
                // Update the work week view and time scale
                this._updateWorkWeekView(iDaysToShow);
                this._updateTimeScale(iMinutes);
                MessageToast.show("View changed to: " + sSelectedView);
            } else if (sSelectedView === "Week") {
                oButton.setText(sSelectedView);
                oViewModel.setProperty("/currentView", sSelectedView);
                // Update calendar view
                oCalendar.setViewKey("Week");
                // Force refresh to ensure proper rendering
                oCalendar.rerender();
                MessageToast.show("View changed to: " + sSelectedView);
            } else if (sSelectedView === "Month") {
                oButton.setText(sSelectedView);
                oViewModel.setProperty("/currentView", sSelectedView);
                // Update calendar view
                oCalendar.setViewKey("Month");
                // Force refresh to ensure proper rendering
                oCalendar.rerender();
                MessageToast.show("View changed to: " + sSelectedView);
            } else if (sSelectedView === "Split view") {
                MessageToast.show("Split view feature coming soon");
            }
        },
        _switchCalendarView: function (sViewKey) {
            var oCalendar = this.byId("calendar");
            var oViewModel = this.getView().getModel("view");
            // Set the view key
            oCalendar.setViewKey(sViewKey);
            // Update the current view in the model
            oViewModel.setProperty("/currentView", sViewKey);
            // Force a rerender to ensure proper display
            oCalendar.rerender();
        },
        _updateTimeScale: function (iMinutes) {
            var oCalendar = this.byId("calendar");
            var oViewModel = this.getView().getModel("view");
            var sCurrentView = oViewModel;
            // Only update time scale for Day and Work week views
            if (sCurrentView === "Day" || sCurrentView === "Work week") {
                var oView = oCalendar.getViews().find(function (view) {
                    return view.getKey() === (sCurrentView === "Work week" ? "Workweek" : sCurrentView);
                });
                if (oView) {
                    // Calculate the number of intervals based on the selected minutes
                    var iTotalMinutes = 24 * 60; // 24 hours in minutes
                    var iIntervals = iTotalMinutes / iMinutes;
                    // Update the view settings
                    oView.setIntervalsS(iIntervals);
                    oView.setIntervalsM(iIntervals);
                    oView.setIntervalsL(iIntervals);
                    oView.setIntervalType("Minute"); // Use string value directly
                    // Refresh the calendar
                    oCalendar.rerender();
                }
            }
        },
        _updateWorkWeekView: function (iDays) {
            var oCalendar = this.byId("calendar");
            var oView = oCalendar.getViews().find(function (view) {
                return view.getKey() === "Workweek";
            });
            if (oView) {
                // Update the number of days to show
                oView.setIntervalsS(iDays);
                oView.setIntervalsM(iDays);
                oView.setIntervalsL(iDays);
                // Refresh the calendar
                oCalendar.rerender();
            }
        },
        onSavedViewsPress: function () {
            // MessageToast.show("Saved views feature coming soon");
        },
        onNewEventTypeSelected: function (oEvent) {
            var sEventType = oEvent.getSource().getTitle();
            this.byId("newEventPopover").close();
            if (sEventType === "Channel meeting") {
                this._openChannelMeetingDialog();
            } else if (sEventType === "Event") {
                this._openRemarksDialog();
            } else if (sEventType === "Virtual appointment") {
                this._openVirtualAppointmentDialog();
            } else {
                MessageToast.show("Creating new: " + sEventType);
            }
        },
        // Open the Channel Meeting Dialog
        _openChannelMeetingDialog: function () {
            var that = this;
            if (!this._oChannelMeetingDialog) {
                Fragment.load({
                    id: this.getView().getId(),
                    name: "com.capexrevex.capexrevex.view.ChannelMeetingDialog",
                    controller: this
                }).then(function (oDialog) {
                    that._oChannelMeetingDialog = oDialog;
                    that.getView().addDependent(that._oChannelMeetingDialog);
                    // Set default values for new channel meeting
                    that._setDefaultChannelMeetingValues();
                    // Set the model for the fragment
                    that._oChannelMeetingDialog.setModel(that.getView().getModel());
                    that._oChannelMeetingDialog.setModel(that.getView().getModel("attendees"), "attendees");
                    that._oChannelMeetingDialog.open();
                }).catch(function (error) {
                    console.error("Error loading channel meeting dialog:", error);
                    MessageToast.show("Error loading meeting dialog");
                });
            } else {
                // Set default values for the meeting
                this._setDefaultChannelMeetingValues();
                // Set the model for the fragment
                this._oChannelMeetingDialog.setModel(this.getView().getModel());
                this._oChannelMeetingDialog.setModel(this.getView().getModel("attendees"), "attendees");
                this._oChannelMeetingDialog.open();
            }
        },
        // Open the Virtual Appointment Dialog
        _openVirtualAppointmentDialog: function () {
            var that = this;
            if (!this._oVirtualAppointmentDialog) {
                Fragment.load({
                    id: this.getView().getId(),
                    name: "com.capexrevex.capexrevex.view.VirtualAppointmentDialog",
                    controller: this
                }).then(function (oDialog) {
                    that._oVirtualAppointmentDialog = oDialog;
                    that.getView().addDependent(that._oVirtualAppointmentDialog);
                    // Set default values for virtual appointment
                    that._setDefaultVirtualAppointmentValues();
                    // Set the model for the fragment
                    that._oVirtualAppointmentDialog.setModel(that.getView().getModel());
                    that._oVirtualAppointmentDialog.setModel(that.getView().getModel("attendees"), "attendees");
                    that._oVirtualAppointmentDialog.open();
                }).catch(function (error) {
                    console.error("Error loading virtual appointment dialog:", error);
                    MessageToast.show("Error loading virtual appointment dialog");
                });
            } else {
                // Set default values for the appointment
                this._setDefaultVirtualAppointmentValues();
                // Set the model for the fragment
                this._oVirtualAppointmentDialog.setModel(this.getView().getModel());
                this._oVirtualAppointmentDialog.setModel(this.getView().getModel("attendees"), "attendees");
                this._oVirtualAppointmentDialog.open();
            }
        },
        _setDefaultChannelMeetingValues: function () {
            // Set default date and time (current date, 3:00 PM to 3:30 PM)
            var oNow = UI5Date.getInstance();
            var oStart = UI5Date.getInstance(oNow);
            oStart.setHours(15, 0, 0, 0); // 3:00 PM
            var oEnd = UI5Date.getInstance(oStart);
            oEnd.setHours(15, 30, 0, 0); // 3:30 PM
            // Set values in the dialog if it exists
            if (this._oChannelMeetingDialog) {
                var oStartDate = Fragment.byId(this.getView().getId(), "startDate");
                var oStartTime = Fragment.byId(this.getView().getId(), "startTime");
                var oEndDate = Fragment.byId(this.getView().getId(), "endDate");
                var oEndTime = Fragment.byId(this.getView().getId(), "endTime");
                if (oStartDate) oStartDate.setDateValue(oStart);
                if (oStartTime) oStartTime.setDateValue(oStart);
                if (oEndDate) oEndDate.setDateValue(oEnd);
                if (oEndTime) oEndTime.setDateValue(oEnd);
            }
        },
        _setDefaultVirtualAppointmentValues: function () {
            // Set default date and time (current date, 4:30 PM to 5:00 PM)
            var oNow = UI5Date.getInstance();
            var oStart = UI5Date.getInstance(oNow);
            oStart.setHours(16, 30, 0, 0); // 4:30 PM
            var oEnd = UI5Date.getInstance(oStart);
            oEnd.setHours(17, 0, 0, 0); // 5:00 PM
            // Set values in the dialog if it exists
            if (this._oVirtualAppointmentDialog) {
                var oStartDate = Fragment.byId(this.getView().getId(), "virtualStartDate");
                var oStartTime = Fragment.byId(this.getView().getId(), "virtualStartTime");
                var oEndDate = Fragment.byId(this.getView().getId(), "virtualEndDate");
                var oEndTime = Fragment.byId(this.getView().getId(), "virtualEndTime");
                if (oStartDate) oStartDate.setDateValue(oStart);
                if (oStartTime) {
                    oStartTime.setDateValue(oStart);
                    // Set minutes step based on current time scale
                    var oViewModel = this.getView().getModel("view");
                    var iMinutes = oViewModel.getProperty("/timeScaleMinutes");
                    oStartTime.setMinutesStep(iMinutes);
                }
                if (oEndDate) oEndDate.setDateValue(oEnd);
                if (oEndTime) {
                    oEndTime.setDateValue(oEnd);
                    // Set minutes step based on current time scale
                    var oViewModel = this.getView().getModel("view");
                    var iMinutes = oViewModel.getProperty("/timeScaleMinutes");
                    oEndTime.setMinutesStep(iMinutes);
                }
                // Set default recurrence to "none"
                var oRecurrenceSelect = Fragment.byId(this.getView().getId(), "virtualRecurrence");
                if (oRecurrenceSelect) {
                    oRecurrenceSelect.setSelectedKey("none");
                }
            }
        },
        // Save Channel Meeting
        onSaveChannelMeeting: function () {
            try {
                // Get values from the dialog
                var sTitle = Fragment.byId(this.getView().getId(), "meetingTitle").getValue();
                // Get required attendees
                var oRequiredAttendees = Fragment.byId(this.getView().getId(), "requiredAttendees");
                var aRequiredTokens = oRequiredAttendees.getTokens();
                var sRequiredAttendees = aRequiredTokens.map(function (oToken) {
                    return oToken.getKey();
                }).join("; ");
                // Get optional attendees
                var oOptionalAttendees = Fragment.byId(this.getView().getId(), "optionalAttendees");
                var aOptionalTokens = oOptionalAttendees.getTokens();
                var sOptionalAttendees = aOptionalTokens.map(function (oToken) {
                    return oToken.getKey();
                }).join("; ");
                // Get date and time values properly
                var oStartDateControl = Fragment.byId(this.getView().getId(), "startDate");
                var oStartTimeControl = Fragment.byId(this.getView().getId(), "startTime");
                var oEndDateControl = Fragment.byId(this.getView().getId(), "endDate");
                var oEndTimeControl = Fragment.byId(this.getView().getId(), "endTime");
                var oStartDate = oStartDateControl ? oStartDateControl.getDateValue() : null;
                var oStartTime = oStartTimeControl ? oStartTimeControl.getDateValue() : null;
                var oEndDate = oEndDateControl ? oEndDateControl.getDateValue() : null;
                var oEndTime = oEndTimeControl ? oEndTimeControl.getDateValue() : null;
                var bAllDay = Fragment.byId(this.getView().getId(), "allDayCheckbox").getSelected();
                var sChannel = Fragment.byId(this.getView().getId(), "channelInput").getValue();
                var sLocation = Fragment.byId(this.getView().getId(), "locationInput").getValue();
                var bOnlineMeeting = Fragment.byId(this.getView().getId(), "onlineMeetingCheckbox").getSelected();
                var sDetails = Fragment.byId(this.getView().getId(), "meetingDetails").getValue();
                var sAgenda = Fragment.byId(this.getView().getId(), "meetingAgenda").getValue();
                // Validate required fields
                if (!sTitle) {
                    MessageToast.show("Please enter a title for the meeting");
                    return;
                }
                // Validate date controls exist
                if (!oStartDate || !oEndDate) {
                    MessageToast.show("Please select valid dates");
                    return;
                }
                // Combine date and time
                var oStart = new Date(oStartDate);
                if (!bAllDay && oStartTime) {
                    oStart.setHours(oStartTime.getHours(), oStartTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oStart.setHours(0, 0, 0, 0);
                }
                var oEnd = new Date(oEndDate);
                if (!bAllDay && oEndTime) {
                    oEnd.setHours(oEndTime.getHours(), oEndTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oEnd.setHours(23, 59, 59, 999);
                }
                // Validate that end time is after start time
                if (oEnd <= oStart) {
                    MessageToast.show("End time must be after start time");
                    return;
                }
                // Create the new appointment object
                var newAppointment = {
                    start: oStart,
                    end: oEnd,
                    title: sTitle,
                    info: "Channel: " + sChannel + (sLocation ? " | Location: " + sLocation : ""),
                    type: "Type01",
                    pic: "sap-icon://group",
                    requiredAttendees: sRequiredAttendees,
                    optionalAttendees: sOptionalAttendees,
                    details: sDetails,
                    agenda: sAgenda,
                    allDay: bAllDay,
                    onlineMeeting: bOnlineMeeting,
                    category: "Meeting",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: bOnlineMeeting ? "Virtual" : "In-person",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted"
                };
                // Get the model and add the new appointment to the first person's calendar
                var oModel = this.getView().getModel();
                var aPeople = oModel.getProperty("/people");
                if (aPeople && aPeople.length > 0) {
                    // Add to the first person's appointments
                    aPeople[0].appointments.push(newAppointment);
                    // Update the model
                    oModel.setProperty("/people", aPeople);
                    // Show success message
                    MessageToast.show("Channel meeting '" + sTitle + "' has been created");
                    // Close the dialog
                    this._oChannelMeetingDialog.close();
                    // Refresh the calendar to show the new appointment
                    this.byId("calendar").getBinding("rows").refresh(true);
                } else {
                    MessageToast.show("Error: Could not find calendar to add meeting");
                }
            } catch (error) {
                console.error("Error saving channel meeting:", error);
                MessageToast.show("Error creating meeting. Please try again.");
            }
        },
        // Save Virtual Appointment
        onSaveVirtualAppointment: function () {
            try {
                // Get values from the dialog
                var sTitle = Fragment.byId(this.getView().getId(), "virtualTitle").getValue();
                var sGuestName = Fragment.byId(this.getView().getId(), "guestName").getValue();
                var sGuestEmail = Fragment.byId(this.getView().getId(), "guestEmail").getValue();
                // Get internal attendees
                var oInternalAttendees = Fragment.byId(this.getView().getId(), "internalAttendees");
                var aInternalTokens = oInternalAttendees.getTokens();
                var sInternalAttendees = aInternalTokens.map(function (oToken) {
                    return oToken.getKey();
                }).join("; ");
                // Get date and time values properly
                var oStartDateControl = Fragment.byId(this.getView().getId(), "virtualStartDate");
                var oStartTimeControl = Fragment.byId(this.getView().getId(), "virtualStartTime");
                var oEndDateControl = Fragment.byId(this.getView().getId(), "virtualEndDate");
                var oEndTimeControl = Fragment.byId(this.getView().getId(), "virtualEndTime");
                var oStartDate = oStartDateControl ? oStartDateControl.getDateValue() : null;
                var oStartTime = oStartTimeControl ? oStartTimeControl.getDateValue() : null;
                var oEndDate = oEndDateControl ? oEndDateControl.getDateValue() : null;
                var oEndTime = oEndTimeControl ? oEndTimeControl.getDateValue() : null;
                var bAllDay = Fragment.byId(this.getView().getId(), "virtualAllDay").getSelected();
                var sLocation = Fragment.byId(this.getView().getId(), "virtualLocation").getValue();
                var sPresenterOptions = Fragment.byId(this.getView().getId(), "presenterOptions").getSelectedKey();
                var bRecordAutomatically = Fragment.byId(this.getView().getId(), "recordAutomatically").getSelected();
                var sMeetingChat = Fragment.byId(this.getView().getId(), "meetingChat").getSelectedKey();
                var sMessage = Fragment.byId(this.getView().getId(), "virtualMessage").getValue();
                // Validate required fields
                if (!sTitle) {
                    MessageToast.show("Please enter a title for the appointment");
                    return;
                }
                if (!sGuestName || !sGuestEmail) {
                    MessageToast.show("Please enter guest name and email");
                    return;
                }
                // Validate date controls exist
                if (!oStartDate || !oEndDate) {
                    MessageToast.show("Please select valid dates");
                    return;
                }
                // Combine date and time
                var oStart = new Date(oStartDate);
                if (!bAllDay && oStartTime) {
                    oStart.setHours(oStartTime.getHours(), oStartTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oStart.setHours(0, 0, 0, 0);
                }
                var oEnd = new Date(oEndDate);
                if (!bAllDay && oEndTime) {
                    oEnd.setHours(oEndTime.getHours(), oEndTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oEnd.setHours(23, 59, 59, 999);
                }
                // Validate that end time is after start time
                if (oEnd <= oStart) {
                    MessageToast.show("End time must be after start time");
                    return;
                }
                // Create the new appointment object
                var newAppointment = {
                    start: oStart,
                    end: oEnd,
                    title: sTitle,
                    info: "Virtual Appointment with " + sGuestName + " (" + sGuestEmail + ")",
                    type: "Type01",
                    pic: "sap-icon://video",
                    internalAttendees: sInternalAttendees,
                    location: sLocation,
                    presenterOptions: sPresenterOptions,
                    recordAutomatically: bRecordAutomatically,
                    meetingChat: sMeetingChat,
                    message: sMessage,
                    allDay: bAllDay,
                    isVirtual: true,
                    category: "Appointment",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: "Virtual",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted"
                };
                // Get the model and add the new appointment to the first person's calendar
                var oModel = this.getView().getModel();
                var aPeople = oModel.getProperty("/people");
                if (aPeople && aPeople.length > 0) {
                    // Add to the first person's appointments
                    aPeople[0].appointments.push(newAppointment);
                    // Update the model
                    oModel.setProperty("/people", aPeople);
                    // Show success message
                    MessageToast.show("Virtual appointment '" + sTitle + "' has been created");
                    // Close the dialog
                    this._oVirtualAppointmentDialog.close();
                    // Refresh the calendar to show the new appointment
                    this.byId("calendar").getBinding("rows").refresh(true);
                } else {
                    MessageToast.show("Error: Could not find calendar to add appointment");
                }
            } catch (error) {
                console.error("Error saving virtual appointment:", error);
                MessageToast.show("Error creating appointment. Please try again.");
            }
        },
        // Cancel Channel Meeting
        onCancelChannelMeeting: function () {
            // Close the dialog without saving
            if (this._oChannelMeetingDialog) {
                this._oChannelMeetingDialog.close();
            }
            MessageToast.show("Channel meeting creation cancelled");
        },
        // Cancel Virtual Appointment
        onCancelVirtualAppointment: function () {
            // Close the dialog without saving
            if (this._oVirtualAppointmentDialog) {
                this._oVirtualAppointmentDialog.close();
            }
            MessageToast.show("Virtual appointment creation cancelled");
        },
        // Add additional guest
        onAddGuest: function () {
            MessageToast.show("Additional guest feature coming soon");
        },
        // Handle All Day checkbox changes
        onAllDayChange: function (oEvent) {
            var bAllDay = oEvent.getParameter("state");
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent/allDay", bAllDay);
            if (bAllDay) {
                var oStart = new Date(oViewModel.getProperty("/selectedEvent/start"));
                oStart.setHours(0, 0, 0, 0);
                oViewModel.setProperty("/selectedEvent/start", oStart);
                var oEnd = new Date(oViewModel.getProperty("/selectedEvent/end"));
                oEnd.setHours(23, 59, 59, 999);
                oViewModel.setProperty("/selectedEvent/end", oEnd);
            } else {
                var oStart = new Date(oViewModel.getProperty("/selectedEvent/start"));
                if (oStart.getHours() === 0) {
                    oStart.setHours(10, 0, 0, 0);
                }
                oViewModel.setProperty("/selectedEvent/start", oStart);
                var oEnd = new Date(oViewModel.getProperty("/selectedEvent/end"));
                if (oEnd.getHours() === 23) {
                    oEnd.setHours(10, 30, 0, 0);
                }
                oViewModel.setProperty("/selectedEvent/end", oEnd);
            }
        },
        onStartDateChange: function (oEvent) {
            var oDate = oEvent.getSource().getDateValue();
            if (!oDate) return;
            var oViewModel = this.getView().getModel("view");
            var oStart = new Date(oViewModel.getProperty("/selectedEvent/start"));
            oStart.setFullYear(oDate.getFullYear(), oDate.getMonth(), oDate.getDate());
            oViewModel.setProperty("/selectedEvent/start", oStart);
        },
        onStartTimeChange: function (oEvent) {
            var oTime = oEvent.getSource().getDateValue();
            if (!oTime) return;
            var oViewModel = this.getView().getModel("view");
            var oStart = new Date(oViewModel.getProperty("/selectedEvent/start"));
            oStart.setHours(oTime.getHours(), oTime.getMinutes(), 0, 0);
            oViewModel.setProperty("/selectedEvent/start", oStart);
        },
        onEndDateChange: function (oEvent) {
            var oDate = oEvent.getSource().getDateValue();
            if (!oDate) return;
            var oViewModel = this.getView().getModel("view");
            var oEnd = new Date(oViewModel.getProperty("/selectedEvent/end"));
            oEnd.setFullYear(oDate.getFullYear(), oDate.getMonth(), oDate.getDate());
            oViewModel.setProperty("/selectedEvent/end", oEnd);
        },
        onEndTimeChange: function (oEvent) {
            var oTime = oEvent.getSource().getDateValue();
            if (!oTime) return;
            var oViewModel = this.getView().getModel("view");
            var oEnd = new Date(oViewModel.getProperty("/selectedEvent/end"));
            oEnd.setHours(oTime.getHours(), oTime.getMinutes(), 0, 0);
            oViewModel.setProperty("/selectedEvent/end", oEnd);
        },
        onMoreOptionsPress: function () {
            MessageToast.show("More options coming soon");
        },
        // Modified onAppointmentSelect method
        onAppointmentSelect: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment");
            var oBindingContext = oAppointment.getBindingContext();
            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("filterPopover").close();
            this.byId("newEventPopover").close();
            // Get appointment data
            var oAppointmentData = oBindingContext.getObject();
            // Extract attendees from appointment
            var aAttendees = this._extractAttendeesFromAppointment(oAppointmentData);
            var sTitle = oAppointmentData.title;
            if (sTitle === "new appointment") {
                sTitle = "";
            }
            // Update selected event in model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", {
                title: sTitle,
                start: oAppointmentData.start,
                end: oAppointmentData.end,
                location: oAppointmentData.info || "",
                description: oAppointmentData.description || "",
                allDay: oAppointmentData.allDay || false,
                attendees: aAttendees
            });
            oViewModel.setProperty("/selectedEventPath", oBindingContext.getPath());
            // Open event details popover using the new fragment
            this._openEventDetailsPopover(oEvent.getParameter("domRef"));
        },
        // Modified onIntervalSelect method
        onIntervalSelect: function (oEvent) {
            var oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                oRow = oEvent.getParameter("row"),
                oModel = this.getView().getModel(),
                oAppointment = {
                    start: oStartDate,
                    end: oEndDate,
                    title: "new appointment",
                    info: "",
                    type: "Type01",
                    location: "",
                    description: "",
                    allDay: false,
                    attendees: "",
                    category: "Appointment",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: "In-person",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted"
                };
            var oRowContext = oRow.getBindingContext();
            var sPath = oRowContext.getPath() + "/appointments";
            var aAppointments = oModel.getProperty(sPath) || [];
            aAppointments.push(oAppointment);
            oModel.setProperty(sPath, aAppointments);
            MessageToast.show("New appointment created. Click on it to edit.");
        },
        // Add this method to open the event details popover
        _openEventDetailsPopover: function (oSource) {
            var that = this;
            // Load the fragment if not already loaded
            if (!this._oEventDetailsPopover) {
                Fragment.load({
                    id: this.getView().getId(),
                    name: "com.capexrevex.capexrevex.view.EventDetailsDialog",
                    controller: this
                }).then(function (oPopover) {
                    that._oEventDetailsPopover = oPopover;
                    that.getView().addDependent(that._oEventDetailsPopover);
                    // Set the model for the fragment
                    that._oEventDetailsPopover.setModel(that.getView().getModel("view"), "view");
                    that._oEventDetailsPopover.setModel(that.getView().getModel("attendees"), "attendees");
                    that._oEventDetailsPopover.openBy(oSource);
                    // Set attendees tokens after the fragment is rendered
                    setTimeout(function() {
                        that._setAttendeesTokens();
                    }, 100);
                }).catch(function (error) {
                    console.error("Error loading event details fragment:", error);
                    MessageToast.show("Error loading event details");
                });
            } else {
                // Set the model for the fragment
                this._oEventDetailsPopover.setModel(this.getView().getModel("view"), "view");
                this._oEventDetailsPopover.setModel(this.getView().getModel("attendees"), "attendees");
                
                // Open the popover
                this._oEventDetailsPopover.openBy(oSource);
                
                // Set attendees tokens
                this._setAttendeesTokens();
            }
        },
        _setAttendeesTokens: function () {
            var oViewModel = this.getView().getModel("view");
            var sAttendees = oViewModel.getProperty("/selectedEvent/attendees") || "";
            
            // Get the MultiInput control from the fragment
            var oMultiInput = sap.ui.getCore().byId(this.getView().getId() + "--eventAttendees");
            
            if (!oMultiInput) {
                console.error("MultiInput control not found in fragment");
                return;
            }
            
            // Clear existing tokens
            oMultiInput.destroyTokens();
            
            // Parse attendees and create tokens
            var aAttendees = this._parseAttendees(sAttendees);
            aAttendees.forEach(function (oAttendee) {
                var oToken = new Token({
                    key: oAttendee.email,
                    text: oAttendee.name
                });
                oMultiInput.addToken(oToken);
            });
        },
        // Extract attendees from appointment data
        _extractAttendeesFromAppointment: function (oAppointment) {
            var aAttendees = [];
            // Handle different appointment types
            if (oAppointment.requiredAttendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.requiredAttendees));
            }
            if (oAppointment.optionalAttendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.optionalAttendees));
            }
            if (oAppointment.internalAttendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.internalAttendees));
            }
            if (oAppointment.guestEmail) {
                aAttendees.push({
                    name: oAppointment.guestName || oAppointment.guestEmail,
                    email: oAppointment.guestEmail,
                    status: "Free"
                });
            }
            if (oAppointment.attendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.attendees));
            }
            return aAttendees;
        },
        // Parse attendees string into objects
        _parseAttendees: function (sAttendees) {
            if (!sAttendees) return [];
            if (typeof sAttendees === 'string') {
                return sAttendees.split(';').map(function (sAttendee) {
                    sAttendee = sAttendee.trim();
                    if (sAttendee) {
                        return {
                            name: sAttendee,
                            email: sAttendee,
                            status: "Free"
                        };
                    }
                    return null;
                }).filter(Boolean);
            } else if (Array.isArray(sAttendees)) {
                return sAttendees;
            }
            return [];
        },
        // Modified onSaveEvent method to handle attendees
        onSaveEvent: function () {
            var oViewModel = this.getView().getModel("view");
            var sPath = oViewModel.getProperty("/selectedEventPath");
            
            // Get values from the fragment controls
            var oTitleControl = sap.ui.getCore().byId(this.getView().getId() + "--eventTitle");
            var oStartDateControl = sap.ui.getCore().byId(this.getView().getId() + "--eventStartDate");
            var oStartTimeControl = sap.ui.getCore().byId(this.getView().getId() + "--eventStartTime");
            var oEndDateControl = sap.ui.getCore().byId(this.getView().getId() + "--eventEndDate");
            var oEndTimeControl = sap.ui.getCore().byId(this.getView().getId() + "--eventEndTime");
            var oLocationControl = sap.ui.getCore().byId(this.getView().getId() + "--eventLocation");
            var oDescriptionControl = sap.ui.getCore().byId(this.getView().getId() + "--eventDescription");
            var oAllDayControl = sap.ui.getCore().byId(this.getView().getId() + "--allDayCheckbox");
            var oAttendeesControl = sap.ui.getCore().byId(this.getView().getId() + "--eventAttendees");
            
            // Validate controls exist
            if (!oTitleControl || !oStartDateControl || !oStartTimeControl || 
                !oEndDateControl || !oEndTimeControl || !oLocationControl || 
                !oDescriptionControl || !oAllDayControl || !oAttendeesControl) {
                MessageToast.show("Error: Could not find all form controls");
                return;
            }
            
            // Get values
            var sTitle = oTitleControl.getValue();
            var oStartDate = oStartDateControl.getDateValue();
            var oStartTime = oStartTimeControl.getDateValue();
            var oEndDate = oEndDateControl.getDateValue();
            var oEndTime = oEndTimeControl.getDateValue();
            var sLocation = oLocationControl.getValue();
            var sDescription = oDescriptionControl.getValue();
            var bAllDay = oAllDayControl.getSelected();
            
            // Get attendees
            var aTokens = oAttendeesControl.getTokens();
            var sAttendees = aTokens.map(function (oToken) {
                return oToken.getKey();
            }).join("; ");
            
            // Validate required fields
            if (!sTitle) {
                MessageToast.show("Please enter a title for the event");
                return;
            }
            
            if (!oStartDate || !oEndDate) {
                MessageToast.show("Please enter valid start and end dates");
                return;
            }
            
            // Combine date and time
            var oStart = new Date(oStartDate);
            if (!bAllDay && oStartTime) {
                oStart.setHours(oStartTime.getHours(), oStartTime.getMinutes(), 0, 0);
            } else if (bAllDay) {
                oStart.setHours(0, 0, 0, 0);
            }
            
            var oEnd = new Date(oEndDate);
            if (!bAllDay && oEndTime) {
                oEnd.setHours(oEndTime.getHours(), oEndTime.getMinutes(), 0, 0);
            } else if (bAllDay) {
                oEnd.setHours(23, 59, 59, 999);
            }
            
            // Validate that end time is after start time
            if (oEnd <= oStart) {
                MessageToast.show("End time must be after start time");
                return;
            }
            
            // Check if this is a new appointment or editing existing one
            if (sPath) {
                // Update existing appointment
                var oModel = this.getView().getModel();
                oModel.setProperty(sPath + "/title", sTitle);
                oModel.setProperty(sPath + "/start", oStart);
                oModel.setProperty(sPath + "/end", oEnd);
                oModel.setProperty(sPath + "/allDay", bAllDay);
                oModel.setProperty(sPath + "/info", sLocation);
                oModel.setProperty(sPath + "/location", sLocation);
                oModel.setProperty(sPath + "/description", sDescription);
                oModel.setProperty(sPath + "/attendees", sAttendees);
                
                MessageToast.show("Event updated successfully");
            } else {
                // Create new appointment
                var newAppointment = {
                    start: oStart,
                    end: oEnd,
                    title: sTitle,
                    info: sLocation,
                    type: "Type01",
                    category: "Appointment",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: "In-person",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted",
                    attendees: sAttendees,
                    allDay: bAllDay,
                    description: sDescription
                };
                
                // Add to the first person's appointments
                var oModel = this.getView().getModel();
                var aPeople = oModel.getProperty("/people");
                if (aPeople && aPeople.length > 0) {
                    aPeople[0].appointments.push(newAppointment);
                    oModel.setProperty("/people", aPeople);
                    
                    MessageToast.show("New event '" + sTitle + "' has been created");
                } else {
                    MessageToast.show("Error: Could not find calendar to add event");
                    return;
                }
            }
            
            // Close the popover
            if (this._oEventDetailsPopover) {
                this._oEventDetailsPopover.close();
            }
            
            // Refresh the calendar
            this.byId("calendar").getBinding("rows").refresh(true);
        },
        // Modified onDiscardEvent method
        onDiscardEvent: function () {
            // Close the popover without saving
            if (this._oEventDetailsPopover) {
                this._oEventDetailsPopover.close();
            }
            MessageToast.show("Changes discarded");
        },
        // Fragment handling functions
        _openRemarksDialog: function () {
            if (!this._oRemarksDialog) {
                this._oRemarksDialog = sap.ui.xmlfragment(
                    "com.capexrevex.capexrevex.view.RemarksDialog",
                    this
                );
                this.getView().addDependent(this._oRemarksDialog);
                // Set the model for the fragment
                this._oRemarksDialog.setModel(this.getView().getModel());
                this._oRemarksDialog.setModel(this.getView().getModel("attendees"), "attendees");
            }
            // Set default values for new event (current date from 4:00 PM to 4:30 PM)
            var oEventDate = UI5Date.getInstance();
            oEventDate.setHours(16, 0, 0, 0); // 4:00 PM
            var oEnd = UI5Date.getInstance(oEventDate);
            oEnd.setHours(16, 30, 0, 0); // 4:30 PM
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", {
                title: "",
                start: oEventDate,
                end: oEnd,
                info: "",
                type: "Type01",
                icon: "",
                attendees: [],
                isNew: true // Flag to indicate it's a new appointment
            });
            this._oRemarksDialog.open();
        },
        onSaveEventFromDialog: function () {
            var oViewModel = this.getView().getModel("view");
            var oSelectedEvent = oViewModel.getProperty("/selectedEvent");
            // Get values from the dialog with proper null checks
            var oTitleControl = sap.ui.getCore().byId("eventTitle");
            var oAttendeesControl = sap.ui.getCore().byId("eventAttendees");
            var oMakeRecurringControl = sap.ui.getCore().byId("makeRecurring");
            var oAllDayControl = sap.ui.getCore().byId("allDay");
            var oInPersonControl = sap.ui.getCore().byId("inPerson");
            var oResponseOptionsControl = sap.ui.getCore().byId("responseOptions");
            var oShowAsControl = sap.ui.getCore().byId("showAs");
            var oDescriptionControl = sap.ui.getCore().byId("eventDescription");
            // Get the date and time values with proper null checks
            var oDatePicker = sap.ui.getCore().byId("eventDate");
            var oStartTimePicker = sap.ui.getCore().byId("startTime");
            var oEndTimePicker = sap.ui.getCore().byId("endTime");
            // Validate controls exist
            if (!oDatePicker || !oStartTimePicker || !oEndTimePicker) {
                MessageToast.show("Error: Date or time controls not found");
                return;
            }
            var oDate = oDatePicker.getDateValue();
            var oStartTime = oStartTimePicker.getDateValue();
            var oEndTime = oEndTimePicker.getDateValue();
            // Validate date values
            if (!oDate || !oStartTime || !oEndTime) {
                MessageToast.show("Please enter valid date and time values");
                return;
            }
            // Get other values with null checks
            var sTitle = oTitleControl ? oTitleControl.getValue() : "";
            var sAttendees = oAttendeesControl ? oAttendeesControl.getValue() : "";
            var bMakeRecurring = oMakeRecurringControl ? oMakeRecurringControl.getSelected() : false;
            var bAllDay = oAllDayControl ? oAllDayControl.getSelected() : false;
            var bInPerson = oInPersonControl ? oInPersonControl.getSelected() : "";
            var sResponseOption = oResponseOptionsControl ? oResponseOptionsControl.getSelectedKey() : "";
            var sShowAs = oShowAsControl ? oShowAsControl.getSelectedKey() : "";
            var sDescription = oDescriptionControl ? oDescriptionControl.getValue() : "";
            // Validate required title field
            // if (!sTitle) {
            //     MessageToast.show("Please enter a title for the event");
            //     return;
            // }
            // Combine date and start time
            var oStart = new Date(oDate);
            oStart.setHours(oStartTime.getHours(), oStartTime.getMinutes(), 0, 0);
            var oEnd = new Date(oDate);
            oEnd.setHours(oEndTime.getHours(), oEndTime.getMinutes(), 0, 0);
            // Validate that end time is after start time
            if (oEnd <= oStart) {
                MessageToast.show("End time must be after start time");
                return;
            }
            // Create the new appointment object with the title as the main text
            var newAppointment = {
                start: oStart,
                end: oEnd,
                title: sTitle, // Use the actual title here
                info: bInPerson, // This is secondary info
                type: "Type01",
                attendees: sAttendees,
                description: sDescription,
                recurring: bMakeRecurring,
                allDay: bAllDay,
                responseOption: sResponseOption,
                showAs: sShowAs,
                category: "Appointment",
                recurrence: bMakeRecurring ? "Recurring" : "Non-recurring",
                inPerson: bInPerson,
                organizerStatus: "sent",
                attendeeStatus: "accepted"
            };
            // Get the model and add the new appointment to the first person's calendar
            var oModel = this.getView().getModel();
            var aPeople = oModel.getProperty("/people");
            if (aPeople && aPeople.length > 0) {
                // Add to the first person's appointments
                aPeople[0].appointments.push(newAppointment);
                // Update the model
                oModel.setProperty("/people", aPeople);
                // Close the dialog
                if (this._oRemarksDialog) {
                    this._oRemarksDialog.close();
                }
                // Show success message
                MessageToast.show("Event '" + sTitle + "' has been created");
                // Refresh the calendar to show the new appointment
                this.byId("calendar").getBinding("rows").refresh(true);
            }
        },
        onCancelEventFromDialog: function () {
            // Close the dialog without saving
            if (this._oRemarksDialog) {
                this._oRemarksDialog.close();
            }
        },
        onToggleGroupMode: function () {
            var oViewModel = this.getView().getModel("view");
            var sMode = oViewModel.getProperty("/groupMode");
            oViewModel.setProperty("/groupMode", sMode === "Group" ? "None" : "Group");
            this.byId("calendar").rerender();
        },
        // Modified onExit method
        onExit: function () {
            // Clean up all fragments when the controller is destroyed
            if (this._oRemarksDialog) {
                this._oRemarksDialog.destroy();
                this._oRemarksDialog = null;
            }
            if (this._oChannelMeetingDialog) {
                this._oChannelMeetingDialog.destroy();
                this._oChannelMeetingDialog = null;
            }
            if (this._oVirtualAppointmentDialog) {
                this._oVirtualAppointmentDialog.destroy();
                this._oVirtualAppointmentDialog = null;
            }
            if (this._oEventDetailsPopover) {
                this._oEventDetailsPopover.destroy();
                this._oEventDetailsPopover = null;
            }
            // Clean up Meet Now dialog
            if (this._oMeetNowDialog) {
                this._oMeetNowDialog.destroy();
                this._oMeetNowDialog = null;
            }
        }
    });
});


UPDATED COD 8

sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/ui/core/date/UI5Date",
    "sap/ui/core/Fragment",
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/m/Token",
    "sap/ui/model/odata/v2/ODataModel"
], function (Controller, JSONModel, MessageToast, UI5Date, Fragment, Filter, FilterOperator, Token, ODataModel) {
    "use strict";
    
    return Controller.extend("com.capexrevex.capexrevex.controller.View1", {
        onInit: function () {
            // Meet Now dialog initialization
            this._oMeetNowDialog = null;
            // Set initial view to Work week
            this.byId("viewSelectButton").setText("Work week");
            // Set initial time scale and days to show
            this._updateTimeScale(30);
            this._updateWorkWeekView(5);
            // Get today's date
            var today = UI5Date.getInstance();
            // Set the calendar to start from today
            var startDate = UI5Date.getInstance(
                today.getFullYear(),
                today.getMonth(),
                today.getDate(),
                8, 0 // Start at 8 AM
            );
            // Create appointments starting from today
            var appointments = [];
            // Today's appointments
            appointments.push({
                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 9, 0),
                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 10, 0),
                title: "Team sync",
                info: "Canteen",
                type: "Type07",
                pic: "sap-icon://family-care",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "In-person",
                organizerStatus: "sent",
                attendeeStatus: "accepted"
            });
            appointments.push({
                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 11, 0),
                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 12, 0),
                title: "Client Meeting",
                info: "Conference Room",
                type: "Type01",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "In-person",
                organizerStatus: "sent",
                attendeeStatus: "tentative"
            });
            // Tomorrow's appointments
            var tomorrow = UI5Date.getInstance(today);
            tomorrow.setDate(tomorrow.getDate() + 1);
            appointments.push({
                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 10, 0),
                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 11, 30),
                title: "Project Review",
                info: "In Progress",
                type: "Type01",
                pic: "sap-icon://business-objects-experience",
                category: "Appointment",
                showAs: "Busy",
                recurrence: "Recurring",
                inPerson: "Virtual",
                organizerStatus: "draft",
                attendeeStatus: "notResponded"
            });
            appointments.push({
                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 14, 0),
                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 15, 0),
                title: "Training Session",
                info: "Online",
                type: "Type03",
                pic: "sap-icon://learning-assistant",
                category: "Appointment",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "Virtual",
                organizerStatus: "sent",
                attendeeStatus: "accepted"
            });
            // Day after tomorrow
            var dayAfter = UI5Date.getInstance(tomorrow);
            dayAfter.setDate(dayAfter.getDate() + 1);
            appointments.push({
                start: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 9, 0),
                end: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 10, 0),
                title: "Team Standup",
                info: "Daily meeting",
                type: "Type07",
                pic: "sap-icon://group",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Recurring",
                inPerson: "Hybrid",
                organizerStatus: "sent",
                attendeeStatus: "accepted"
            });
            appointments.push({
                start: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 13, 0),
                end: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 14, 30),
                title: "Lunch with Client",
                info: "Restaurant",
                type: "Type02",
                pic: "sap-icon://food",
                category: "Appointment",
                showAs: "Free",
                recurrence: "Non-recurring",
                inPerson: "In-person",
                organizerStatus: "sent",
                attendeeStatus: "declined"
            });
            // Fourth day
            var fourthDay = UI5Date.getInstance(dayAfter);
            fourthDay.setDate(fourthDay.getDate() + 1);
            appointments.push({
                start: UI5Date.getInstance(fourthDay.getFullYear(), fourthDay.getMonth(), fourthDay.getDate(), 11, 0),
                end: UI5Date.getInstance(fourthDay.getFullYear(), fourthDay.getMonth(), fourthDay.getDate(), 12, 0),
                title: "Product Demo",
                info: "Showcase new features",
                type: "Type04",
                pic: "sap-icon://presentation",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "In-person",
                organizerStatus: "sent",
                attendeeStatus: "followed"
            });
            // Fifth day
            var fifthDay = UI5Date.getInstance(fourthDay);
            fifthDay.setDate(fifthDay.getDate() + 1);
            appointments.push({
                start: UI5Date.getInstance(fifthDay.getFullYear(), fifthDay.getMonth(), fifthDay.getDate(), 10, 0),
                end: UI5Date.getInstance(fifthDay.getFullYear(), fifthDay.getMonth(), fifthDay.getDate(), 11, 30),
                title: "Planning Session",
                info: "Quarterly planning",
                type: "Type05",
                pic: "sap-icon://calendar",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Recurring",
                inPerson: "Virtual",
                organizerStatus: "sent",
                attendeeStatus: "canceled"
            });
            // Initialize the view model with data
            var oViewModel = new JSONModel({
                startDate: startDate,
                people: [
                    {
                        name: "John Doe",
                        role: "Developer",
                        appointments: appointments
                    }
                ],
                selectedEvent: {
                    title: "",
                    start: UI5Date.getInstance(),
                    end: UI5Date.getInstance(),
                    info: "",
                    type: "Type01",
                    isNew: true // Flag to identify new appointments
                },
                filters: {
                    appointments: true,
                    meetings: true,
                    reservations: false,
                    categories: [],
                    showAs: [],
                    recurrence: [],
                    inPerson: [],
                    organizer: {
                        sent: true,
                        draft: true
                    },
                    attendee: {
                        accepted: true,
                        declined: true,
                        followed: true,
                        tentative: true,
                        canceled: true,
                        notResponded: true
                    }
                },
                currentView: "Work week", // Track the current calendar view
                timeScale: "30 minutes", // Track the current time scale
                daysToShow: 5, // Track the number of days to show in work week view
                workWeekMenuOpen: false, // Track if work week submenu is open
                timeScaleMinutes: 30, // Add numeric value for time scale
                groupMode: "Group" // For group appointment mode
            });
            // Create additional model with extended data using UI5Date
            var oModel = new JSONModel();
            oModel.setData({
                startDate: startDate,
                people: [
                    {
                        pic: "sap-icon://hr-approval/",
                        name: "John Miller",
                        role: "team member",
                        appointments: [
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 8, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 9, 0),
                                title: "Team sync",
                                info: "Canteen",
                                type: "Type07",
                                pic: "sap-icon://family-care",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "accepted"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 9, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 11, 0),
                                title: "Morning Sync",
                                info: "I call you",
                                type: "Type01",
                                pic: "sap-icon://call",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Recurring",
                                inPerson: "Virtual",
                                organizerStatus: "sent",
                                attendeeStatus: "tentative"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 10, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 12, 0),
                                title: "Sync Bill",
                                info: "Online",
                                type: "Type03",
                                category: "Appointment",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "Virtual",
                                organizerStatus: "draft",
                                attendeeStatus: "notResponded"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 10, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 13, 0),
                                title: "Check Flights",
                                info: "no room",
                                type: "Type09",
                                pic: "sap-icon://flight",
                                category: "Appointment",
                                showAs: "Free",
                                recurrence: "Non-recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "declined"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 13, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 14, 0),
                                title: "Lunch",
                                info: "canteen",
                                type: "Type05",
                                pic: "sap-icon://private",
                                category: "Appointment",
                                showAs: "Free",
                                recurrence: "Non-recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "accepted"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 18, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 20, 0),
                                title: "Discussion of the plan",
                                info: "Online meeting",
                                type: "Type04",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "Virtual",
                                organizerStatus: "sent",
                                attendeeStatus: "followed"
                            }
                        ]
                    },
                    {
                        pic: "sap-icon://hr-approval",
                        name: "Donna Moore",
                        role: "team member",
                        appointments: [
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 8, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 9, 26),
                                title: "Team sync",
                                info: "Canteen",
                                type: "Type07",
                                pic: "sap-icon://family-care",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "accepted"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 10, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 12, 0),
                                title: "Sync John",
                                info: "Online",
                                type: "Type03",
                                category: "Appointment",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "Virtual",
                                organizerStatus: "draft",
                                attendeeStatus: "notResponded"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 11, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 12, 0),
                                title: "Prep for planning",
                                info: "room 5",
                                type: "Type01",
                                pic: "sap-icon://family-care",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "canceled"
                            }
                        ]
                    },
                    {
                        pic: "sap-icon://hr-approval",
                        name: "Alex Johnson",
                        role: "team member",
                        appointments: [
                            {
                                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 9, 0),
                                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 10, 0),
                                title: "Team sync",
                                info: "Canteen",
                                type: "Type07",
                                pic: "sap-icon://family-care",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "accepted"
                            },
                            {
                                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 10, 0),
                                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 12, 0),
                                title: "Project Planning",
                                info: "Conference Room",
                                type: "Type01",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "tentative"
                            },
                            {
                                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 14, 0),
                                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 15, 0),
                                title: "Client Call",
                                info: "Online",
                                type: "Type03",
                                category: "Appointment",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "Virtual",
                                organizerStatus: "draft",
                                attendeeStatus: "notResponded"
                            }
                        ]
                    },
                    {
                        pic: "sap-icon://hr-approval",
                        name: "Sarah Williams",
                        role: "team member",
                        appointments: [
                            {
                                start: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 9, 0),
                                end: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 10, 0),
                                title: "Team sync",
                                info: "Canteen",
                                type: "Type07",
                                pic: "sap-icon://family-care",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "accepted"
                            },
                            {
                                start: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 11, 0),
                                end: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 12, 30),
                                title: "Design Review",
                                info: "Conference Room",
                                type: "Type01",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "declined"
                            }
                        ]
                    }
                ]
            });
            // Set both models to the view
            this.getView().setModel(oViewModel, "view");
            this.getView().setModel(oModel);
            // Initialize filter arrays
            this._aFilters = [];
            // Update date display in filter popover
            this._updateDateDisplay();
            // Set initial view to Work week
            this.byId("viewSelectButton").setText("Work week");
            // Set initial time scale and days to show
            this._updateTimeScale(30);
            this._updateWorkWeekView(5);
            // Create attendees model with proper structure
            var oAttendeesModel = new JSONModel({
                attendees: [
                    { name: "Ankit Jha", email: "ankit.jha@sumodigitech.com", status: "Free" },
                    { name: "Vikrant Raj", email: "vikrant.raj@sumodigitech.com", status: "Free" },
                    { name: "Pushpak Jha", email: "pushpak.jha@sumodigitech.com", status: "Busy" },
                    { name: "Pushkar Kumar Jha", email: "pushkar.jha@sumodigitech.com", status: "Tentative" },
                    { name: "Sumit Jhaldiyal", email: "sumit.jhaldiyal@sumodigitech.com", status: "Free" },
                    { name: "Mohd Aakib", email: "mohd.aakib@sumodigitech.com", status: "Free" },
                    { name: "Vikash Ojha", email: "vikash.ojha@sumodigitech.com", status: "Free" },
                    { name: "Yugal Kishore", email: "yugal.kishore@sumodigitech.com", status: "Busy" },
                ]
            });
            this.getView().setModel(oAttendeesModel, "attendees");
            // Initialize OData model for scheduling service
            var oSchedulingModel = new ODataModel({
                serviceUrl: "/schedulingservice/",
                useBatch: false
            });
            this.getView().setModel(oSchedulingModel, "scheduling");
            // Load attendees data
            this._loadAttendees();
        },
        
        // Load attendees from scheduling service
        _loadAttendees: function () {
            var oSchedulingModel = this.getView().getModel("scheduling");
            var oAttendeesModel = this.getView().getModel("attendees");
            var that = this;
            oSchedulingModel.read("/MeetingSchedulingSet", {
                success: function (oData) {
                    var aAttendees = [];
                    if (oData && oData.results) {
                        oData.results.forEach(function (oAttendee) {
                            aAttendees.push({
                                id: oAttendee.AttendeeID,
                                name: oAttendee.AttendeeName,
                                email: oAttendee.AttendeeEmail,
                                role: oAttendee.Role || "Attendee",
                                status: oAttendee.Status || "Free"
                            });
                        });
                    }
                    oAttendeesModel.setProperty("/attendees", aAttendees);
                    MessageToast.show("Attendees loaded successfully: " + aAttendees.length + " found");
                },
                error: function (oError) {
                    console.error("Error loading attendees:", oError);
                    MessageToast.show("Error loading attendees from service");
                }
            });
        },
        
        // Handle attendee suggestions in MultiInput
        onAttendeeSuggest: function (oEvent) {
            var sTerm = oEvent.getParameter("suggestValue");
            var oMultiInput = oEvent.getSource();
            var oAttendeesModel = this.getView().getModel("attendees");
            if (!oAttendeesModel) {
                return;
            }
            var aAttendees = oAttendeesModel.getProperty("/attendees") || [];
            var aFilteredAttendees = [];
            if (sTerm) {
                // Filter attendees based on search term
                aFilteredAttendees = aAttendees.filter(function (oAttendee) {
                    return oAttendee.name.toLowerCase().includes(sTerm.toLowerCase()) ||
                        oAttendee.email.toLowerCase().includes(sTerm.toLowerCase());
                });
            } else {
                aFilteredAttendees = aAttendees;
            }
            // Update suggestion items
            oMultiInput.destroySuggestionItems();
            aFilteredAttendees.forEach(function (oAttendee) {
                // Create a custom suggestion item with name, email, and status
                var oSuggestionItem = new sap.m.SuggestionItem({
                    key: oAttendee.email,
                    text: oAttendee.name,
                    description: oAttendee.email,
                    additionalText: oAttendee.status
                });
                // Set different icons based on status
                switch (oAttendee.status.toLowerCase()) {
                    case "free":
                        oSuggestionItem.setIcon("sap-icon://accept");
                        break;
                    case "busy":
                        oSuggestionItem.setIcon("sap-icon://busy");
                        break;
                    case "tentative":
                        oSuggestionItem.setIcon("sap-icon://question-mark");
                        break;
                    default:
                        oSuggestionItem.setIcon("sap-icon://employee");
                }
                oMultiInput.addSuggestionItem(oSuggestionItem);
            });
        },
        
        // Handle token addition in MultiInput
        onAttendeeTokenChange: function (oEvent) {
            var oMultiInput = oEvent.getSource();
            var sInputValue = oMultiInput.getValue().trim();
            if (!sInputValue) {
                return;
            }
            // Check if input is an email or should be treated as search
            if (this._isEmailValid(sInputValue)) {
                // Create token for manually entered email
                var oToken = new Token({
                    key: sInputValue,
                    text: sInputValue
                });
                oMultiInput.addToken(oToken);
                oMultiInput.setValue("");
            } else {
                // Trigger suggestion for non-email input
                this.onAttendeeSuggest(oEvent);
            }
        },
        
        // Validate email format
        _isEmailValid: function (sEmail) {
            var re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            return re.test(sEmail);
        },
        
        // Create meeting scheduling
        createMeetingScheduling: function (oMeetingData) {
            var oSchedulingModel = this.getView().getModel("scheduling");
            var that = this;
            oSchedulingModel.create("/MeetingSchedulingSet", oMeetingData, {
                success: function (oData) {
                    MessageToast.show("Meeting scheduled successfully!");
                    // Refresh attendees after creating meeting
                    that._loadAttendees();
                    // Add the meeting to the calendar
                    that._addMeetingToCalendar(oData);
                },
                error: function (oError) {
                    console.error("Error scheduling meeting:", oError);
                    MessageToast.show("Failed to schedule meeting");
                    // Fallback: Add to local calendar
                    that._addMeetingToCalendar(oMeetingData);
                }
            });
        },
        
        // Helper method to add meeting to calendar
        _addMeetingToCalendar: function (oMeetingData) {
            var oModel = this.getView().getModel();
            var aPeople = oModel.getProperty("/people");
            if (aPeople && aPeople.length > 0) {
                var newAppointment = {
                    start: new Date(oMeetingData.StartDateTime),
                    end: new Date(oMeetingData.EndDateTime),
                    title: oMeetingData.MeetingTitle,
                    info: oMeetingData.Location || "Online Meeting",
                    type: "Type01",
                    pic: "sap-icon://group",
                    category: "Meeting",
                    showAs: "Busy",
                    recurrence: oMeetingData.IsRecurring ? "Recurring" : "Non-recurring",
                    inPerson: oMeetingData.IsVirtual ? "Virtual" : "In-person",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted",
                    attendees: oMeetingData.Attendees || []
                };
                aPeople[0].appointments.push(newAppointment);
                oModel.setProperty("/people", aPeople);
                // Refresh calendar
                this.byId("calendar").getBinding("rows").refresh(true);
            }
        },
        
        // Update date display in filter popover
        _updateDateDisplay: function () {
            var oDateDisplay = this.byId("dateDisplay");
            if (oDateDisplay) {
                var today = UI5Date.getInstance();
                var options = { weekday: 'long', day: 'numeric' };
                var dateText = today.toLocaleDateString('en-US', options);
                oDateDisplay.setText(dateText);
            }
        },
        
        // Role-based functionality
        roles: {
            donna: "Donna Moore",
            manager: "manager",
            admin: "admin"
        },
        
        handleRoleChange: function () {
            this.getView().getModel().refresh(true);
        },
        
        getUserRole: function () {
            return this.roles[this.byId("userRole").getSelectedKey()];
        },
        
        canModifyAppointments: function (sRole) {
            var sUserRole = this.getUserRole();
            if (sUserRole === this.roles.manager || sUserRole === this.roles.admin || sUserRole === sRole) {
                return true;
            }
            return false;
        },
        
        // Filter functionality
        onFilterChange: function (oEvent) {
            var sFilterType = oEvent.getSource().getId().replace("Checkbox", "");
            var bSelected = oEvent.getParameter("selected");
            // Update filter model
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            oFilters[sFilterType.toLowerCase()] = bSelected;
            oViewModel.setProperty("/filters", oFilters);
            // Apply filters
            this.applyFilters();
        },
        
        applyFilters: function () {
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            // Clear existing filters
            this._aFilters = [];
            // Apply category filters
            if (!oFilters.appointments) {
                this._aFilters.push(new Filter("category", FilterOperator.NE, "Appointment"));
            }
            if (!oFilters.meetings) {
                this._aFilters.push(new Filter("category", FilterOperator.NE, "Meeting"));
            }
            if (!oFilters.reservations) {
                this._aFilters.push(new Filter("category", FilterOperator.NE, "Reservation"));
            }
            // Apply additional filters based on selected options
            if (oFilters.categories && oFilters.categories.length > 0) {
                this._aFilters.push(new Filter("category", FilterOperator.Contains, oFilters.categories.join("|")));
            }
            if (oFilters.showAs && oFilters.showAs.length > 0) {
                this._aFilters.push(new Filter("showAs", FilterOperator.Contains, oFilters.showAs.join("|")));
            }
            if (oFilters.recurrence && oFilters.recurrence.length > 0) {
                this._aFilters.push(new Filter("recurrence", FilterOperator.Contains, oFilters.recurrence.join("|")));
            }
            if (oFilters.inPerson && oFilters.inPerson.length > 0) {
                this._aFilters.push(new Filter("inPerson", FilterOperator.Contains, oFilters.inPerson.join("|")));
            }
            // Apply organizer filters
            var aOrganizerFilters = [];
            if (oFilters.organizer.sent) {
                aOrganizerFilters.push(new Filter("organizerStatus", FilterOperator.EQ, "sent"));
            }
            if (oFilters.organizer.draft) {
                aOrganizerFilters.push(new Filter("organizerStatus", FilterOperator.EQ, "draft"));
            }
            if (aOrganizerFilters.length > 0) {
                this._aFilters.push(new Filter({
                    filters: aOrganizerFilters,
                    and: false
                }));
            }
            // Apply attendee filters
            var aAttendeeFilters = [];
            if (oFilters.attendee.accepted) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "accepted"));
            }
            if (oFilters.attendee.declined) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "declined"));
            }
            if (oFilters.attendee.followed) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "followed"));
            }
            if (oFilters.attendee.tentative) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "tentative"));
            }
            if (oFilters.attendee.canceled) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "canceled"));
            }
            if (oFilters.attendee.notResponded) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "notResponded"));
            }
            if (aAttendeeFilters.length > 0) {
                this._aFilters.push(new Filter({
                    filters: aAttendeeFilters,
                    and: false
                }));
            }
            // Apply filters to the calendar
            var oCalendar = this.byId("calendar");
            var oBinding = oCalendar.getBinding("rows");
            if (this._aFilters.length > 0) {
                oBinding.filter(this._aFilters);
            } else {
                oBinding.filter([]);
            }
            // Update filter button text
            var oFilterButton = this.byId("_IDGenButton7");
            var iFilterCount = this._aFilters.length;
            oFilterButton.setText(iFilterCount > 0 ? "Filter applied (" + iFilterCount + ")" : "Filter applied");
        },
        
        // Filter popover handlers
        onAppointmentsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("appointmentsFilterPopover").openBy(oButton);
        },
        
        onMeetingsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("meetingsFilterPopover").openBy(oButton);
        },
        
        onReservationsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("reservationsFilterPopover").openBy(oButton);
        },
        
        onCategoriesFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("categoriesFilterPopover").openBy(oButton);
        },
        
        onShowAsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("showAsFilterPopover").openBy(oButton);
        },
        
        onRecurrenceFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("recurrenceFilterPopover").openBy(oButton);
        },
        
        onInPersonFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("inPersonFilterPopover").openBy(oButton);
        },
        
        // Organizer and Attendee filter handlers
        onOrganizerFilterPress: function (oEvent) {
            var oOptionsBox = this.byId("organizerOptions");
            oOptionsBox.setVisible(!oOptionsBox.getVisible());
        },
        
        onAttendeeFilterPress: function (oEvent) {
            var oOptionsBox = this.byId("attendeeOptions");
            oOptionsBox.setVisible(!oOptionsBox.getVisible());
        },
        
        onOrganizerFilterChange: function (oEvent) {
            var sId = oEvent.getSource().getId();
            var bSelected = oEvent.getParameter("selected");
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            // Update the corresponding filter property
            if (sId === "sentCheckbox") {
                oFilters.organizer.sent = bSelected;
            } else if (sId === "draftCheckbox") {
                oFilters.organizer.draft = bSelected;
            }
            oViewModel.setProperty("/filters", oFilters);
            this.applyFilters();
        },
        
        onAttendeeFilterChange: function (oEvent) {
            var sId = oEvent.getSource().getId();
            var bSelected = oEvent.getParameter("selected");
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            // Update the corresponding filter property
            if (sId === "acceptedCheckbox") {
                oFilters.attendee.accepted = bSelected;
            } else if (sId === "declinedCheckbox") {
                oFilters.attendee.declined = bSelected;
            } else if (sId === "followedCheckbox") {
                oFilters.attendee.followed = bSelected;
            } else if (sId === "tentativeCheckbox") {
                oFilters.attendee.tentative = bSelected;
            } else if (sId === "canceledCheckbox") {
                oFilters.attendee.canceled = bSelected;
            } else if (sId === "notRespondedCheckbox") {
                oFilters.attendee.notResponded = bSelected;
            }
            oViewModel.setProperty("/filters", oFilters);
            this.applyFilters();
        },
        
        onUnselectAllRight: function () {
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            // Reset organizer filters
            oFilters.organizer.sent = false;
            oFilters.organizer.draft = false;
            // Reset attendee filters
            oFilters.attendee.accepted = false;
            oFilters.attendee.declined = false;
            oFilters.attendee.followed = false;
            oFilters.attendee.tentative = false;
            oFilters.attendee.canceled = false;
            oFilters.attendee.notResponded = false;
            oViewModel.setProperty("/filters", oFilters);
            // Update the checkboxes
            this.byId("sentCheckbox").setSelected(false);
            this.byId("draftCheckbox").setSelected(false);
            this.byId("acceptedCheckbox").setSelected(false);
            this.byId("declinedCheckbox").setSelected(false);
            this.byId("followedCheckbox").setSelected(false);
            this.byId("tentativeCheckbox").setSelected(false);
            this.byId("canceledCheckbox").setSelected(false);
            this.byId("notRespondedCheckbox").setSelected(false);
            this.applyFilters();
        },
        
        // Unselect all handlers
        onAppointmentsUnselectAll: function () {
            this._unselectAllCheckboxes("appointmentsFilterList");
        },
        
        onMeetingsUnselectAll: function () {
            this._unselectAllCheckboxes("meetingsFilterList");
        },
        
        onReservationsUnselectAll: function () {
            this._unselectAllCheckboxes("reservationsFilterList");
        },
        
        onCategoriesUnselectAll: function () {
            this._unselectAllCheckboxes("categoriesFilterList");
        },
        
        onShowAsUnselectAll: function () {
            this._unselectAllCheckboxes("showAsFilterList");
        },
        
        onRecurrenceUnselectAll: function () {
            this._unselectAllCheckboxes("recurrenceFilterList");
        },
        
        onInPersonUnselectAll: function () {
            this._unselectAllCheckboxes("inPersonFilterList");
        },
        
        _unselectAllCheckboxes: function (sListId) {
            var oList = this.byId(sListId);
            var aItems = oList.getItems();
            aItems.forEach(function (oItem) {
                if (oItem.isA("sap.m.CheckBox")) {
                    oItem.setSelected(false);
                }
            });
        },
        
        // Filter selection handlers
        onAppointmentsFilterSelect: function (oEvent) {
            this._updateFilterArray("appointments", oEvent);
        },
        
        onMeetingsFilterSelect: function (oEvent) {
            this._updateFilterArray("meetings", oEvent);
        },
        
        onReservationsFilterSelect: function (oEvent) {
            this._updateFilterArray("reservations", oEvent);
        },
        
        onCategoriesFilterSelect: function (oEvent) {
            this._updateFilterArray("categories", oEvent);
        },
        
        onShowAsFilterSelect: function (oEvent) {
            this._updateFilterArray("showAs", oEvent);
        },
        
        onRecurrenceFilterSelect: function (oEvent) {
            this._updateFilterArray("recurrence", oEvent);
        },
        
        onInPersonFilterSelect: function (oEvent) {
            this._updateFilterArray("inPerson", oEvent);
        },
        
        _updateFilterArray: function (sFilterType, oEvent) {
            var sValue = oEvent.getSource().getText();
            var bSelected = oEvent.getParameter("selected");
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            if (!oFilters[sFilterType]) {
                oFilters[sFilterType] = [];
            }
            if (bSelected) {
                if (oFilters[sFilterType].indexOf(sValue) === -1) {
                    oFilters[sFilterType].push(sValue);
                }
            } else {
                var iIndex = oFilters[sFilterType].indexOf(sValue);
                if (iIndex !== -1) {
                    oFilters[sFilterType].splice(iIndex, 1);
                }
            }
            oViewModel.setProperty("/filters", oFilters);
            this.applyFilters();
        },
        
        onClearFilters: function () {
            // Reset all filter checkboxes
            var aCheckBoxIds = [
                "appointmentsCheckbox", "meetingsCheckbox", "reservationsCheckbox"
            ];
            aCheckBoxIds.forEach(function (sId) {
                var oCheckBox = this.byId(sId);
                if (oCheckBox) {
                    oCheckBox.setSelected(sId === "appointmentsCheckbox" || sId === "meetingsCheckbox");
                }
            }.bind(this));
            // Reset organizer and attendee filters
            this.byId("sentCheckbox").setSelected(true);
            this.byId("draftCheckbox").setSelected(true);
            this.byId("acceptedCheckbox").setSelected(true);
            this.byId("declinedCheckbox").setSelected(true);
            this.byId("followedCheckbox").setSelected(true);
            this.byId("tentativeCheckbox").setSelected(true);
            this.byId("canceledCheckbox").setSelected(true);
            this.byId("notRespondedCheckbox").setSelected(true);
            // Reset filter arrays in model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/filters", {
                appointments: true,
                meetings: true,
                reservations: false,
                categories: [],
                showAs: [],
                recurrence: [],
                inPerson: [],
                organizer: {
                    sent: true,
                    draft: true
                },
                attendee: {
                    accepted: true,
                    declined: true,
                    followed: true,
                    tentative: true,
                    canceled: true,
                    notResponded: true
                }
            });
            // Apply empty filters
            this._aFilters = [];
            var oCalendar = this.byId("calendar");
            oCalendar.getBinding("rows").filter([]);
            // Update filter button text
            this.byId("_IDGenButton7").setText("Filter applied");
            MessageToast.show("All filters cleared");
        },
        
        // Drag and Drop functionality
        handleAppointmentDragEnter: function (oEvent) {
            if (this.isAppointmentOverlap(oEvent, oEvent.getParameter("calendarRow"))) {
                oEvent.preventDefault();
            }
        },
        
        handleAppointmentDrop: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                oCalendarRow = oEvent.getParameter("calendarRow"),
                bCopy = oEvent.getParameter("copy"),
                sTitle = oAppointment.getTitle(),
                oModel = this.getView().getModel(),
                oAppBindingContext = oAppointment.getBindingContext(),
                oRowBindingContext = oCalendarRow.getBindingContext(),
                handleAppointmentDropBetweenRows = function () {
                    var aPath = oAppBindingContext.getPath().split("/");
                    var iIndex = aPath.pop();
                    var sRowAppointmentsPath = aPath.join("/");
                    oRowBindingContext.getObject().appointments.push(
                        oModel.getProperty(oAppBindingContext.getPath())
                    );
                    oModel.getProperty(sRowAppointmentsPath).splice(iIndex, 1);
                };
            if (bCopy) { // "copy" appointment
                var oProps = Object.assign({}, oModel.getProperty(oAppointment.getBindingContext().getPath()));
                oProps.start = oStartDate;
                oProps.end = oEndDate;
                oRowBindingContext.getObject().appointments.push(oProps);
            } else { // "move" appointment
                oModel.setProperty("start", oStartDate, oAppBindingContext);
                oModel.setProperty("end", oEndDate, oAppBindingContext);
                if (oAppointment.getParent() !== oCalendarRow) {
                    handleAppointmentDropBetweenRows();
                }
            }
            oModel.refresh(true);
        },
        
        handleAppointmentResize: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate");
            if (!this.isAppointmentOverlap(oEvent, oAppointment.getParent())) {
                oAppointment
                    .setStartDate(oStartDate)
                    .setEndDate(oEndDate);
            } else {
                MessageToast.show("As a manager you can not resize events if they overlap with another events");
            }
        },
        
        // Modified handleAppointmentCreate to open event details fragment
        handleAppointmentCreate: function (oEvent) {
            var oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                oPlanningCalendarRow = oEvent.getParameter("calendarRow"),
                oModel = this.getView().getModel(),
                sPath = oPlanningCalendarRow.getBindingContext().getPath();
            // Create a new appointment object
            var newAppointment = {
                title: "New Appointment",
                start: oStartDate,
                end: oEndDate,
                info: "",
                type: "Type01",
                category: "Appointment",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "In-person",
                organizerStatus: "sent",
                attendeeStatus: "accepted",
                isNew: true // Flag to indicate it's a new appointment
            };
            // Set the selected event in the view model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", newAppointment);
            // Open the event details fragment
            this._openEventDetailsPopover(oEvent.getParameter("domRef"));
            MessageToast.show("New Appointment is created at \n" + oStartDate + "\n and end at \n" + oEndDate + ".");
        },
        
        isAppointmentOverlap: function (oEvent, oCalendarRow) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                bAppointmentOverlapped;
            if (this.getUserRole() === this.roles.manager) {
                bAppointmentOverlapped = oCalendarRow.getAppointments().some(function (oCurrentAppointment) {
                    if (oCurrentAppointment === oAppointment) {
                        return;
                    }
                    var oAppStartTime = oCurrentAppointment.getStartDate().getTime(),
                        oAppEndTime = oCurrentAppointment.getEndDate().getTime();
                    if (oAppStartTime <= oStartDate.getTime() && oStartDate.getTime() < oAppEndTime) {
                        return true;
                    }
                    if (oAppStartTime < oEndDate.getTime() && oEndDate.getTime() <= oAppEndTime) {
                        return true;
                    }
                    if (oStartDate.getTime() <= oAppStartTime && oAppStartTime < oEndDate.getTime()) {
                        return true;
                    }
                });
            }
            return bAppointmentOverlapped;
        },
        
        // Toolbar and UI functionality
        onTodayPress: function () {
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/startDate", UI5Date.getInstance());
            MessageToast.show("Navigated to today");
        },
        
        onViewSelectPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oViewPopover = this.byId("viewPopover");
            // Close other popovers
            this.byId("filterPopover").close();
            this.byId("newEventPopover").close();
            this.byId("eventDetailsPopover").close();
            // Toggle view popover
            if (!oViewPopover.isOpen()) {
                oViewPopover.openBy(oButton);
            } else {
                oViewPopover.close();
            }
        },
        
        onFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oFilterPopover = this.byId("filterPopover");
            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("newEventPopover").close();
            this.byId("eventDetailsPopover").close();
            // Toggle filter popover
            if (!oFilterPopover.isOpen()) {
                oFilterPopover.openBy(oButton);
            } else {
                oFilterPopover.close();
            }
        },
        
        // MEET NOW FUNCTIONALITY
        onMeetNowPress: function () {
            this._openMeetNowDialog();
        },
        
        _openMeetNowDialog: function () {
            var that = this;
            
            if (!this._oMeetNowDialog) {
                Fragment.load({
                    id: this.getView().getId(),
                    name: "com.capexrevex.capexrevex.view.fragments.MeetNowDialog",
                    controller: this
                }).then(function (oDialog) {
                    that._oMeetNowDialog = oDialog;
                    that.getView().addDependent(that._oMeetNowDialog);
                    
                    // Generate a unique meeting link
                    that._generateMeetingLink();
                    that._oMeetNowDialog.open();
                }).catch(function (error) {
                    console.error("Error loading Meet Now dialog:", error);
                    MessageToast.show("Error loading meeting dialog");
                    
                    // Fallback: Create a simple dialog
                    that._createFallbackMeetNowDialog();
                });
            } else {
                // Regenerate meeting link each time dialog is opened
                this._generateMeetingLink();
                this._oMeetNowDialog.open();
            }
        },
        
        // Fallback method if fragment loading fails
        _createFallbackMeetNowDialog: function () {
            var that = this;
            
            this._oMeetNowDialog = new sap.m.Dialog({
                title: "Start a meeting now",
                contentWidth: "500px",
                content: [
                    new sap.m.VBox({
                        items: [
                            new sap.m.Label({
                                text: "Meeting name",
                                required: true
                            }),
                            new sap.m.Input("meetingNameInput", {
                                placeholder: "Meeting name",
                                value: "Meeting with Nadeem Abbas",
                                liveChange: function(oEvent) {
                                    that.onMeetingNameChange(oEvent);
                                }
                            }),
                            new sap.m.Label({
                                text: "Meeting link"
                            }),
                            new sap.m.HBox({
                                items: [
                                    new sap.m.Input("meetingLinkInput", {
                                        width: "100%",
                                        editable: false
                                    }),
                                    new sap.m.Button({
                                        icon: "sap-icon://copy",
                                        tooltip: "Copy link",
                                        press: function() {
                                            that.onCopyMeetingLink();
                                        }
                                    })
                                ]
                            })
                        ]
                    })
                ],
                buttons: [
                    new sap.m.Button({
                        text: "Start meeting",
                        type: "Emphasized",
                        press: function() {
                            that.onStartMeeting();
                        }
                    }),
                    new sap.m.Button({
                        text: "Get a link to share",
                        press: function() {
                            that.onGetLinkToShare();
                        }
                    })
                ]
            });
            
            this.getView().addDependent(this._oMeetNowDialog);
            this._generateMeetingLink();
            this._oMeetNowDialog.open();
        },
        
        _generateMeetingLink: function () {
            // Generate a random meeting ID
            var meetingId = Math.random().toString(36).substring(2, 15) +
                Math.random().toString(36).substring(2, 15);
            
            // Create the meeting link
            var meetingLink = "https://teams.microsoft.com/l/meetup-join/19%3ameeting_" +
                meetingId +
                "%40thread.v2/0?context=%7B%22Tid%22%3A%2272f988bf-86f1-41af-91ab-2d7cd011db47%22%2C%22Oid%22%3A%22b8b4d3c1-8a4f-4c3e-9c3c-1f2e7d1f3e7a%22%7D";
            
            // Set the link in the input field
            var oMeetingLinkInput = Fragment.byId(this.getView().getId(), "meetingLinkInput");
            if (oMeetingLinkInput) {
                oMeetingLinkInput.setValue(meetingLink);
            } else {
                // Fallback for core by ID
                oMeetingLinkInput = sap.ui.getCore().byId("meetingLinkInput");
                if (oMeetingLinkInput) {
                    oMeetingLinkInput.setValue(meetingLink);
                }
            }
        },
        
        onMeetingNameChange: function (oEvent) {
            // You can add validation or other logic here if needed 
        },
        
        onCopyMeetingLink: function () {
            var oMeetingLinkInput = Fragment.byId(this.getView().getId(), "meetingLinkInput");
            if (!oMeetingLinkInput) {
                // Fallback for core by ID
                oMeetingLinkInput = sap.ui.getCore().byId("meetingLinkInput");
            }
            
            if (oMeetingLinkInput) {
                var meetingLink = oMeetingLinkInput.getValue();
                
                // Copy to clipboard
                if (navigator.clipboard && navigator.clipboard.writeText) {
                    navigator.clipboard.writeText(meetingLink).then(function () {
                        MessageToast.show("Meeting link copied to clipboard");
                    }).catch(function (err) {
                        console.error('Could not copy text: ', err);
                        // Fallback for browsers that don't support clipboard API
                        this._fallbackCopyToClipboard(meetingLink);
                    }.bind(this));
                } else {
                    // Fallback for older browsers
                    this._fallbackCopyToClipboard(meetingLink);
                }
            }
        },
        
        // Fallback method for copying to clipboard
        _fallbackCopyToClipboard: function (text) {
            var textArea = document.createElement("textarea");
            textArea.value = text;
            textArea.style.position = "fixed";
            document.body.appendChild(textArea);
            textArea.focus();
            textArea.select();
            
            try {
                var successful = document.execCommand('copy');
                if (successful) {
                    MessageToast.show("Meeting link copied to clipboard");
                } else {
                    MessageToast.show("Failed to copy link");
                }
            } catch (err) {
                console.error('Fallback: Could not copy text: ', err);
                MessageToast.show("Failed to copy link");
            }
            
            document.body.removeChild(textArea);
        },
        
        onStartMeeting: function () {
            var oMeetingNameInput = Fragment.byId(this.getView().getId(), "meetingNameInput");
            if (!oMeetingNameInput) {
                // Fallback for core by ID
                oMeetingNameInput = sap.ui.getCore().byId("meetingNameInput");
            }
            
            var meetingName = oMeetingNameInput ? oMeetingNameInput.getValue() : "Meeting";
            
            // Create a calendar event for the meeting
            this._createMeetingEvent(meetingName);
            
            // Close the dialog
            if (this._oMeetNowDialog) {
                this._oMeetNowDialog.close();
            }
            
            MessageToast.show("Starting meeting: " + meetingName);
            
            // In a real application, you would integrate with your video conferencing API here
            // For demonstration, we'll just show a message and redirect to Teams
            window.open("https://teams.microsoft.com", "_blank");
        },
        
        onGetLinkToShare: function () {
            // Get the meeting link
            var oMeetingLinkInput = Fragment.byId(this.getView().getId(), "meetingLinkInput");
            if (!oMeetingLinkInput) {
                // Fallback for core by ID
                oMeetingLinkInput = sap.ui.getCore().byId("meetingLinkInput");
            }
            
            var meetingLink = oMeetingLinkInput ? oMeetingLinkInput.getValue() : "";
            
            // Copy to clipboard
            if (navigator.clipboard && navigator.clipboard.writeText) {
                navigator.clipboard.writeText(meetingLink).then(function () {
                    MessageToast.show("Meeting link copied to clipboard");
                }).catch(function (err) {
                    console.error('Could not copy text: ', err);
                    // Fallback for browsers that don't support clipboard API
                    this._fallbackCopyToClipboard(meetingLink);
                }.bind(this));
            } else {
                // Fallback for older browsers
                this._fallbackCopyToClipboard(meetingLink);
            }
            
            // Close the dialog
            if (this._oMeetNowDialog) {
                this._oMeetNowDialog.close();
            }
            
            MessageToast.show("Meeting link copied to clipboard");
        },
        
        onCancelMeeting: function () {
            if (this._oMeetNowDialog) {
                this._oMeetNowDialog.close();
            }
            MessageToast.show("Meeting creation cancelled");
        },
        
        _createMeetingEvent: function (meetingName) {
            var oNow = UI5Date.getInstance();
            var oStart = UI5Date.getInstance(oNow);
            var oEnd = UI5Date.getInstance(oStart);
            oEnd.setHours(oEnd.getHours() + 1); // 1 hour meeting
            
            // Get the meeting link
            var oMeetingLinkInput = Fragment.byId(this.getView().getId(), "meetingLinkInput");
            if (!oMeetingLinkInput) {
                // Fallback for core by ID
                oMeetingLinkInput = sap.ui.getCore().byId("meetingLinkInput");
            }
            
            var meetingLink = oMeetingLinkInput ? oMeetingLinkInput.getValue() : "";
            
            var newAppointment = {
                start: oStart,
                end: oEnd,
                title: meetingName,
                info: "Online Meeting",
                type: "Type01",
                pic: "sap-icon://video",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "Virtual",
                organizerStatus: "sent",
                attendeeStatus: "accepted",
                isOnline: true,
                meetingLink: meetingLink
            };
            
            // Get the model and add the new appointment to the first person's calendar
            var oModel = this.getView().getModel();
            var aPeople = oModel.getProperty("/people");
            
            if (aPeople && aPeople.length > 0) {
                aPeople[0].appointments.push(newAppointment);
                oModel.setProperty("/people", aPeople);
                
                // Refresh the calendar to show the new appointment
                this.byId("calendar").getBinding("rows").refresh(true);
            }
        },
        
        onNewEventPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oNewEventPopover = this.byId("newEventPopover");
            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("filterPopover").close();
            this.byId("eventDetailsPopover").close();
            // Toggle new event popover
            if (!oNewEventPopover.isOpen()) {
                oNewEventPopover.openBy(oButton);
            } else {
                oNewEventPopover.close();
            }
        },
        
        onNotificationPress: function () {
            MessageToast.show("No new notifications");
        },
        
        // Work week menu functionality
        onWorkWeekMenuPress: function (oEvent) {
            var oViewModel = this.getView().getModel("view");
            var bMenuOpen = oViewModel.getProperty("/workWeekMenuOpen");
            // Toggle the menu visibility
            oViewModel.setProperty("/workWeekMenuOpen", !bMenuOpen);
            // Update the arrow icon direction
            var oButton = this.byId("_IDGenWorkWeekButton");
            oButton.setIcon(!bMenuOpen ? "sap-icon://slim-arrow-down" : "sap-icon://slim-arrow-right");
        },
        
        // Time scale dropdown change handler
        onTimeScaleChange: function (oEvent) {
            var oViewModel = this.getView().getModel("view");
            var oSource = oEvent.getSource();
            var sSelectedKey = oSource.getSelectedKey();
            // Extract the number of minutes from the selected key
            var iMinutes = parseInt(sSelectedKey);
            // Update the model
            oViewModel.setProperty("/timeScale", iMinutes + " minutes");
            oViewModel.setProperty("/timeScaleMinutes", iMinutes);
            // Get current days to show
            var iDays = oViewModel.getProperty("/daysToShow");
            // Update the button text to show both days and time scale
            var oButton = this.byId("viewSelectButton");
            oButton.setText("Work week (" + iDays + " days, " + iMinutes + " min)");
            // Update the calendar's time scale
            this._updateTimeScale(iMinutes);
            // Make sure we're in Work week view
            var oCalendar = this.byId("calendar");
            oCalendar.setViewKey("Workweek");
            oViewModel.setProperty("/currentView", "Work week");
            MessageToast.show("Time scale changed to: " + iMinutes + " minutes");
        },
        
        // Days to show dropdown change handler
        onDaysToShowChange: function (oEvent) {
            var oViewModel = this.getView().getModel("view");
            var oSource = oEvent.getSource();
            var iDays = parseInt(oSource.getSelectedKey());
            // Update the model
            oViewModel.setProperty("/daysToShow", iDays);
            // Get current time scale
            var sTimeScale = oViewModel.getProperty("/timeScale");
            var iMinutes = parseInt(sTimeScale.match(/\d+/)[0]);
            // Update the button text to show both days and time scale
            var oButton = this.byId("viewSelectButton");
            oButton.setText("Work week (" + iDays + " days, " + iMinutes + " min)");
            // Update the work week view
            this._updateWorkWeekView(iDays);
            // Make sure we're in Work week view
            var oCalendar = this.byId("calendar");
            oCalendar.setViewKey("Workweek");
            oViewModel.setProperty("/currentView", "Work week");
            MessageToast.show("Work week now shows " + iDays + " days");
        },
        
        // Days dropdown change handler (main view selection)
        onDaysChange: function (oEvent) {
            var oSource = oEvent.getSource();
            var iDays = parseInt(oSource.getSelectedKey());
            // Update the model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/daysToShow", iDays);
            // Set the current view to Work week
            oViewModel.setProperty("/currentView", "Work week");
            // Update the button text
            var oButton = this.byId("viewSelectButton");
            var sTimeScale = oViewModel.getProperty("/timeScale");
            var iMinutes = parseInt(sTimeScale.match(/\d+/)[0]);
            oButton.setText("Work week (" + iDays + " days, " + iMinutes + " min)");
            // Update the calendar
            var oCalendar = this.byId("calendar");
            oCalendar.setViewKey("Workweek");
            // Update the work week view
            this._updateWorkWeekView(iDays);
            // Close the popover
            this.byId("viewPopover").close();
            MessageToast.show("Work week now shows " + iDays + " days");
        },
        
        onViewSelected: function (oEvent) {
            var sSelectedView = oEvent.getParameter("listItem").getTitle();
            var oButton = this.byId("viewSelectButton");
            var oCalendar = this.byId("calendar");
            var oViewModel = this.getView().getModel("view");
            // Close the popover first
            this.byId("viewPopover").close();
            // Handle regular view selection
            if (sSelectedView === "Work week") {
                oButton.setText(sSelectedView);
                oViewModel.setProperty("/currentView", sSelectedView);
                // Update calendar view
                oCalendar.setViewKey("Workweek");
                // Get current settings
                var iDaysToShow = oViewModel.getProperty("/daysToShow");
                var sTimeScale = oViewModel.getProperty("/timeScale");
                var iMinutes = parseInt(sTimeScale.match(/\d+/)[0]);
                // Update button text to show both days and time scale
                oButton.setText("Work week (" + iDaysToShow + " days, " + iMinutes + " min)");
                // Update the work week view and time scale
                this._updateWorkWeekView(iDaysToShow);
                this._updateTimeScale(iMinutes);
                MessageToast.show("View changed to: " + sSelectedView);
            } else if (sSelectedView === "Week") {
                oButton.setText(sSelectedView);
                oViewModel.setProperty("/currentView", sSelectedView);
                // Update calendar view
                oCalendar.setViewKey("Week");
                // Force refresh to ensure proper rendering
                oCalendar.rerender();
                MessageToast.show("View changed to: " + sSelectedView);
            } else if (sSelectedView === "Month") {
                oButton.setText(sSelectedView);
                oViewModel.setProperty("/currentView", sSelectedView);
                // Update calendar view
                oCalendar.setViewKey("Month");
                // Force refresh to ensure proper rendering
                oCalendar.rerender();
                MessageToast.show("View changed to: " + sSelectedView);
            } else if (sSelectedView === "Split view") {
                MessageToast.show("Split view feature coming soon");
            }
        },
        
        _switchCalendarView: function (sViewKey) {
            var oCalendar = this.byId("calendar");
            var oViewModel = this.getView().getModel("view");
            // Set the view key
            oCalendar.setViewKey(sViewKey);
            // Update the current view in the model
            oViewModel.setProperty("/currentView", sViewKey);
            // Force a rerender to ensure proper display
            oCalendar.rerender();
        },
        
        _updateTimeScale: function (iMinutes) {
            var oCalendar = this.byId("calendar");
            var oViewModel = this.getView().getModel("view");
            var sCurrentView = oViewModel.getProperty("/currentView");
            // Only update time scale for Day and Work week views
            if (sCurrentView === "Day" || sCurrentView === "Work week") {
                var oView = oCalendar.getViews().find(function (view) {
                    return view.getKey() === (sCurrentView === "Work week" ? "Workweek" : sCurrentView);
                });
                if (oView) {
                    // Calculate the number of intervals based on the selected minutes
                    var iTotalMinutes = 24 * 60; // 24 hours in minutes
                    var iIntervals = iTotalMinutes / iMinutes;
                    // Update the view settings
                    oView.setIntervalsS(iIntervals);
                    oView.setIntervalsM(iIntervals);
                    oView.setIntervalsL(iIntervals);
                    oView.setIntervalType("Minute"); // Use string value directly
                    // Refresh the calendar
                    oCalendar.rerender();
                }
            }
        },
        
        _updateWorkWeekView: function (iDays) {
            var oCalendar = this.byId("calendar");
            var oView = oCalendar.getViews().find(function (view) {
                return view.getKey() === "Workweek";
            });
            if (oView) {
                // Update the number of days to show
                oView.setIntervalsS(iDays);
                oView.setIntervalsM(iDays);
                oView.setIntervalsL(iDays);
                // Refresh the calendar
                oCalendar.rerender();
            }
        },
        
        onSavedViewsPress: function () {
            // MessageToast.show("Saved views feature coming soon");
        },
        
        onNewEventTypeSelected: function (oEvent) {
            var sEventType = oEvent.getSource().getTitle();
            this.byId("newEventPopover").close();
            if (sEventType === "Channel meeting") {
                this._openChannelMeetingDialog();
            } else if (sEventType === "Event") {
                this._openRemarksDialog();
            } else if (sEventType === "Virtual appointment") {
                this._openVirtualAppointmentDialog();
            } else {
                MessageToast.show("Creating new: " + sEventType);
            }
        },
        
        // Open the Channel Meeting Dialog
        _openChannelMeetingDialog: function () {
            var that = this;
            if (!this._oChannelMeetingDialog) {
                Fragment.load({
                    id: this.getView().getId(),
                    name: "com.capexrevex.capexrevex.view.fragments.ChannelMeetingDialog",
                    controller: this
                }).then(function (oDialog) {
                    that._oChannelMeetingDialog = oDialog;
                    that.getView().addDependent(that._oChannelMeetingDialog);
                    // Set default values for new channel meeting
                    that._setDefaultChannelMeetingValues();
                    // Set the model for the fragment
                    that._oChannelMeetingDialog.setModel(that.getView().getModel());
                    that._oChannelMeetingDialog.setModel(that.getView().getModel("attendees"), "attendees");
                    that._oChannelMeetingDialog.open();
                }).catch(function (error) {
                    console.error("Error loading channel meeting dialog:", error);
                    MessageToast.show("Error loading meeting dialog");
                });
            } else {
                // Set default values for the meeting
                this._setDefaultChannelMeetingValues();
                // Set the model for the fragment
                this._oChannelMeetingDialog.setModel(this.getView().getModel());
                this._oChannelMeetingDialog.setModel(this.getView().getModel("attendees"), "attendees");
                this._oChannelMeetingDialog.open();
            }
        },
        
        // Open the Virtual Appointment Dialog
        _openVirtualAppointmentDialog: function () {
            var that = this;
            if (!this._oVirtualAppointmentDialog) {
                Fragment.load({
                    id: this.getView().getId(),
                    name: "com.capexrevex.capexrevex.view.fragments.VirtualAppointmentDialog",
                    controller: this
                }).then(function (oDialog) {
                    that._oVirtualAppointmentDialog = oDialog;
                    that.getView().addDependent(that._oVirtualAppointmentDialog);
                    // Set default values for virtual appointment
                    that._setDefaultVirtualAppointmentValues();
                    // Set the model for the fragment
                    that._oVirtualAppointmentDialog.setModel(that.getView().getModel());
                    that._oVirtualAppointmentDialog.setModel(that.getView().getModel("attendees"), "attendees");
                    that._oVirtualAppointmentDialog.open();
                }).catch(function (error) {
                    console.error("Error loading virtual appointment dialog:", error);
                    MessageToast.show("Error loading virtual appointment dialog");
                });
            } else {
                // Set default values for the appointment
                this._setDefaultVirtualAppointmentValues();
                // Set the model for the fragment
                this._oVirtualAppointmentDialog.setModel(this.getView().getModel());
                this._oVirtualAppointmentDialog.setModel(this.getView().getModel("attendees"), "attendees");
                this._oVirtualAppointmentDialog.open();
            }
        },
        
        _setDefaultChannelMeetingValues: function () {
            // Set default date and time (current date, 3:00 PM to 3:30 PM)
            var oNow = UI5Date.getInstance();
            var oStart = UI5Date.getInstance(oNow);
            oStart.setHours(15, 0, 0, 0); // 3:00 PM
            var oEnd = UI5Date.getInstance(oStart);
            oEnd.setHours(15, 30, 0, 0); // 3:30 PM
            // Set values in the dialog if it exists
            if (this._oChannelMeetingDialog) {
                var oStartDate = Fragment.byId(this.getView().getId(), "startDate");
                var oStartTime = Fragment.byId(this.getView().getId(), "startTime");
                var oEndDate = Fragment.byId(this.getView().getId(), "endDate");
                var oEndTime = Fragment.byId(this.getView().getId(), "endTime");
                if (oStartDate) oStartDate.setDateValue(oStart);
                if (oStartTime) oStartTime.setDateValue(oStart);
                if (oEndDate) oEndDate.setDateValue(oEnd);
                if (oEndTime) oEndTime.setDateValue(oEnd);
            }
        },
        
        _setDefaultVirtualAppointmentValues: function () {
            // Set default date and time (current date, 4:30 PM to 5:00 PM)
            var oNow = UI5Date.getInstance();
            var oStart = UI5Date.getInstance(oNow);
            oStart.setHours(16, 30, 0, 0); // 4:30 PM
            var oEnd = UI5Date.getInstance(oStart);
            oEnd.setHours(17, 0, 0, 0); // 5:00 PM
            // Set values in the dialog if it exists
            if (this._oVirtualAppointmentDialog) {
                var oStartDate = Fragment.byId(this.getView().getId(), "virtualStartDate");
                var oStartTime = Fragment.byId(this.getView().getId(), "virtualStartTime");
                var oEndDate = Fragment.byId(this.getView().getId(), "virtualEndDate");
                var oEndTime = Fragment.byId(this.getView().getId(), "virtualEndTime");
                if (oStartDate) oStartDate.setDateValue(oStart);
                if (oStartTime) {
                    oStartTime.setDateValue(oStart);
                    // Set minutes step based on current time scale
                    var oViewModel = this.getView().getModel("view");
                    var iMinutes = oViewModel.getProperty("/timeScaleMinutes");
                    oStartTime.setMinutesStep(iMinutes);
                }
                if (oEndDate) oEndDate.setDateValue(oEnd);
                if (oEndTime) {
                    oEndTime.setDateValue(oEnd);
                    // Set minutes step based on current time scale
                    var oViewModel = this.getView().getModel("view");
                    var iMinutes = oViewModel.getProperty("/timeScaleMinutes");
                    oEndTime.setMinutesStep(iMinutes);
                }
                // Set default recurrence to "none"
                var oRecurrenceSelect = Fragment.byId(this.getView().getId(), "virtualRecurrence");
                if (oRecurrenceSelect) {
                    oRecurrenceSelect.setSelectedKey("none");
                }
            }
        },
        
        // Save Channel Meeting
        onSaveChannelMeeting: function () {
            try {
                // Get values from the dialog
                var sTitle = Fragment.byId(this.getView().getId(), "meetingTitle").getValue();
                // Get required attendees
                var oRequiredAttendees = Fragment.byId(this.getView().getId(), "requiredAttendees");
                var aRequiredTokens = oRequiredAttendees.getTokens();
                var sRequiredAttendees = aRequiredTokens.map(function (oToken) {
                    return oToken.getKey();
                }).join("; ");
                // Get optional attendees
                var oOptionalAttendees = Fragment.byId(this.getView().getId(), "optionalAttendees");
                var aOptionalTokens = oOptionalAttendees.getTokens();
                var sOptionalAttendees = aOptionalTokens.map(function (oToken) {
                    return oToken.getKey();
                }).join("; ");
                // Get date and time values properly
                var oStartDateControl = Fragment.byId(this.getView().getId(), "startDate");
                var oStartTimeControl = Fragment.byId(this.getView().getId(), "startTime");
                var oEndDateControl = Fragment.byId(this.getView().getId(), "endDate");
                var oEndTimeControl = Fragment.byId(this.getView().getId(), "endTime");
                var oStartDate = oStartDateControl ? oStartDateControl.getDateValue() : null;
                var oStartTime = oStartTimeControl ? oStartTimeControl.getDateValue() : null;
                var oEndDate = oEndDateControl ? oEndDateControl.getDateValue() : null;
                var oEndTime = oEndTimeControl ? oEndTimeControl.getDateValue() : null;
                var bAllDay = Fragment.byId(this.getView().getId(), "allDayCheckbox").getSelected();
                var sChannel = Fragment.byId(this.getView().getId(), "channelInput").getValue();
                var sLocation = Fragment.byId(this.getView().getId(), "locationInput").getValue();
                var bOnlineMeeting = Fragment.byId(this.getView().getId(), "onlineMeetingCheckbox").getSelected();
                var sDetails = Fragment.byId(this.getView().getId(), "meetingDetails").getValue();
                var sAgenda = Fragment.byId(this.getView().getId(), "meetingAgenda").getValue();
                // Validate required fields
                if (!sTitle) {
                    MessageToast.show("Please enter a title for the meeting");
                    return;
                }
                // Validate date controls exist
                if (!oStartDate || !oEndDate) {
                    MessageToast.show("Please select valid dates");
                    return;
                }
                // Combine date and time
                var oStart = new Date(oStartDate);
                if (!bAllDay && oStartTime) {
                    oStart.setHours(oStartTime.getHours(), oStartTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oStart.setHours(0, 0, 0, 0);
                }
                var oEnd = new Date(oEndDate);
                if (!bAllDay && oEndTime) {
                    oEnd.setHours(oEndTime.getHours(), oEndTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oEnd.setHours(23, 59, 59, 999);
                }
                // Validate that end time is after start time
                if (oEnd <= oStart) {
                    MessageToast.show("End time must be after start time");
                    return;
                }
                // Create the new appointment object
                var newAppointment = {
                    start: oStart,
                    end: oEnd,
                    title: sTitle,
                    info: "Channel: " + sChannel + (sLocation ? " | Location: " + sLocation : ""),
                    type: "Type01",
                    pic: "sap-icon://group",
                    requiredAttendees: sRequiredAttendees,
                    optionalAttendees: sOptionalAttendees,
                    details: sDetails,
                    agenda: sAgenda,
                    allDay: bAllDay,
                    onlineMeeting: bOnlineMeeting,
                    category: "Meeting",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: bOnlineMeeting ? "Virtual" : "In-person",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted"
                };
                // Get the model and add the new appointment to the first person's calendar
                var oModel = this.getView().getModel();
                var aPeople = oModel.getProperty("/people");
                if (aPeople && aPeople.length > 0) {
                    // Add to the first person's appointments
                    aPeople[0].appointments.push(newAppointment);
                    // Update the model
                    oModel.setProperty("/people", aPeople);
                    // Show success message
                    MessageToast.show("Channel meeting '" + sTitle + "' has been created");
                    // Close the dialog
                    this._oChannelMeetingDialog.close();
                    // Refresh the calendar to show the new appointment
                    this.byId("calendar").getBinding("rows").refresh(true);
                } else {
                    MessageToast.show("Error: Could not find calendar to add meeting");
                }
            } catch (error) {
                console.error("Error saving channel meeting:", error);
                MessageToast.show("Error creating meeting. Please try again.");
            }
        },
        
        // Save Virtual Appointment
        onSaveVirtualAppointment: function () {
            try {
                // Get values from the dialog
                var sTitle = Fragment.byId(this.getView().getId(), "virtualTitle").getValue();
                var sGuestName = Fragment.byId(this.getView().getId(), "guestName").getValue();
                var sGuestEmail = Fragment.byId(this.getView().getId(), "guestEmail").getValue();
                // Get internal attendees
                var oInternalAttendees = Fragment.byId(this.getView().getId(), "internalAttendees");
                var aInternalTokens = oInternalAttendees.getTokens();
                var sInternalAttendees = aInternalTokens.map(function (oToken) {
                    return oToken.getKey();
                }).join("; ");
                // Get date and time values properly
                var oStartDateControl = Fragment.byId(this.getView().getId(), "virtualStartDate");
                var oStartTimeControl = Fragment.byId(this.getView().getId(), "virtualStartTime");
                var oEndDateControl = Fragment.byId(this.getView().getId(), "virtualEndDate");
                var oEndTimeControl = Fragment.byId(this.getView().getId(), "virtualEndTime");
                var oStartDate = oStartDateControl ? oStartDateControl.getDateValue() : null;
                var oStartTime = oStartTimeControl ? oStartTimeControl.getDateValue() : null;
                var oEndDate = oEndDateControl ? oEndDateControl.getDateValue() : null;
                var oEndTime = oEndTimeControl ? oEndTimeControl.getDateValue() : null;
                var bAllDay = Fragment.byId(this.getView().getId(), "virtualAllDay").getSelected();
                var sLocation = Fragment.byId(this.getView().getId(), "virtualLocation").getValue();
                var sPresenterOptions = Fragment.byId(this.getView().getId(), "presenterOptions").getSelectedKey();
                var bRecordAutomatically = Fragment.byId(this.getView().getId(), "recordAutomatically").getSelected();
                var sMeetingChat = Fragment.byId(this.getView().getId(), "meetingChat").getSelectedKey();
                var sMessage = Fragment.byId(this.getView().getId(), "virtualMessage").getValue();
                // Validate required fields
                if (!sTitle) {
                    MessageToast.show("Please enter a title for the appointment");
                    return;
                }
                if (!sGuestName || !sGuestEmail) {
                    MessageToast.show("Please enter guest name and email");
                    return;
                }
                // Validate date controls exist
                if (!oStartDate || !oEndDate) {
                    MessageToast.show("Please select valid dates");
                    return;
                }
                // Combine date and time
                var oStart = new Date(oStartDate);
                if (!bAllDay && oStartTime) {
                    oStart.setHours(oStartTime.getHours(), oStartTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oStart.setHours(0, 0, 0, 0);
                }
                var oEnd = new Date(oEndDate);
                if (!bAllDay && oEndTime) {
                    oEnd.setHours(oEndTime.getHours(), oEndTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oEnd.setHours(23, 59, 59, 999);
                }
                // Validate that end time is after start time
                if (oEnd <= oStart) {
                    MessageToast.show("End time must be after start time");
                    return;
                }
                // Create the new appointment object
                var newAppointment = {
                    start: oStart,
                    end: oEnd,
                    title: sTitle,
                    info: "Virtual Appointment with " + sGuestName + " (" + sGuestEmail + ")",
                    type: "Type01",
                    pic: "sap-icon://video",
                    internalAttendees: sInternalAttendees,
                    location: sLocation,
                    presenterOptions: sPresenterOptions,
                    recordAutomatically: bRecordAutomatically,
                    meetingChat: sMeetingChat,
                    message: sMessage,
                    allDay: bAllDay,
                    isVirtual: true,
                    category: "Appointment",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: "Virtual",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted"
                };
                // Get the model and add the new appointment to the first person's calendar
                var oModel = this.getView().getModel();
                var aPeople = oModel.getProperty("/people");
                if (aPeople && aPeople.length > 0) {
                    // Add to the first person's appointments
                    aPeople[0].appointments.push(newAppointment);
                    // Update the model
                    oModel.setProperty("/people", aPeople);
                    // Show success message
                    MessageToast.show("Virtual appointment '" + sTitle + "' has been created");
                    // Close the dialog
                    this._oVirtualAppointmentDialog.close();
                    // Refresh the calendar to show the new appointment
                    this.byId("calendar").getBinding("rows").refresh(true);
                } else {
                    MessageToast.show("Error: Could not find calendar to add appointment");
                }
            } catch (error) {
                console.error("Error saving virtual appointment:", error);
                MessageToast.show("Error creating appointment. Please try again.");
            }
        },
        
        // Cancel Channel Meeting
        onCancelChannelMeeting: function () {
            // Close the dialog without saving
            if (this._oChannelMeetingDialog) {
                this._oChannelMeetingDialog.close();
            }
            MessageToast.show("Channel meeting creation cancelled");
        },
        
        // Cancel Virtual Appointment
        onCancelVirtualAppointment: function () {
            // Close the dialog without saving
            if (this._oVirtualAppointmentDialog) {
                this._oVirtualAppointmentDialog.close();
            }
            MessageToast.show("Virtual appointment creation cancelled");
        },
        
        // Add additional guest
        onAddGuest: function () {
            MessageToast.show("Additional guest feature coming soon");
        },
        
        // Handle All Day checkbox changes
        onAllDayChange: function (oEvent) {
            var bAllDay = oEvent.getParameter("state");
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent/allDay", bAllDay);
            if (bAllDay) {
                var oStart = new Date(oViewModel.getProperty("/selectedEvent/start"));
                oStart.setHours(0, 0, 0, 0);
                oViewModel.setProperty("/selectedEvent/start", oStart);
                var oEnd = new Date(oViewModel.getProperty("/selectedEvent/end"));
                oEnd.setHours(23, 59, 59, 999);
                oViewModel.setProperty("/selectedEvent/end", oEnd);
            } else {
                var oStart = new Date(oViewModel.getProperty("/selectedEvent/start"));
                if (oStart.getHours() === 0) {
                    oStart.setHours(10, 0, 0, 0);
                }
                oViewModel.setProperty("/selectedEvent/start", oStart);
                var oEnd = new Date(oViewModel.getProperty("/selectedEvent/end"));
                if (oEnd.getHours() === 23) {
                    oEnd.setHours(10, 30, 0, 0);
                }
                oViewModel.setProperty("/selectedEvent/end", oEnd);
            }
        },
        
        onStartDateChange: function (oEvent) {
            var oDate = oEvent.getSource().getDateValue();
            if (!oDate) return;
            var oViewModel = this.getView().getModel("view");
            var oStart = new Date(oViewModel.getProperty("/selectedEvent/start"));
            oStart.setFullYear(oDate.getFullYear(), oDate.getMonth(), oDate.getDate());
            oViewModel.setProperty("/selectedEvent/start", oStart);
        },
        
        onStartTimeChange: function (oEvent) {
            var oTime = oEvent.getSource().getDateValue();
            if (!oTime) return;
            var oViewModel = this.getView().getModel("view");
            var oStart = new Date(oViewModel.getProperty("/selectedEvent/start"));
            oStart.setHours(oTime.getHours(), oTime.getMinutes(), 0, 0);
            oViewModel.setProperty("/selectedEvent/start", oStart);
        },
        
        onEndDateChange: function (oEvent) {
            var oDate = oEvent.getSource().getDateValue();
            if (!oDate) return;
            var oViewModel = this.getView().getModel("view");
            var oEnd = new Date(oViewModel.getProperty("/selectedEvent/end"));
            oEnd.setFullYear(oDate.getFullYear(), oDate.getMonth(), oDate.getDate());
            oViewModel.setProperty("/selectedEvent/end", oEnd);
        },
        
        onEndTimeChange: function (oEvent) {
            var oTime = oEvent.getSource().getDateValue();
            if (!oTime) return;
            var oViewModel = this.getView().getModel("view");
            var oEnd = new Date(oViewModel.getProperty("/selectedEvent/end"));
            oEnd.setHours(oTime.getHours(), oTime.getMinutes(), 0, 0);
            oViewModel.setProperty("/selectedEvent/end", oEnd);
        },
        
        onMoreOptionsPress: function () {
            MessageToast.show("More options coming soon");
        },
        
        // Modified onAppointmentSelect method
        onAppointmentSelect: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment");
            var oBindingContext = oAppointment.getBindingContext();
            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("filterPopover").close();
            this.byId("newEventPopover").close();
            // Get appointment data
            var oAppointmentData = oBindingContext.getObject();
            // Extract attendees from appointment
            var aAttendees = this._extractAttendeesFromAppointment(oAppointmentData);
            var sTitle = oAppointmentData.title;
            if (sTitle === "new appointment") {
                sTitle = "";
            }
            // Update selected event in model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", {
                title: sTitle,
                start: oAppointmentData.start,
                end: oAppointmentData.end,
                location: oAppointmentData.info || "",
                description: oAppointmentData.description || "",
                allDay: oAppointmentData.allDay || false,
                attendees: aAttendees
            });
            oViewModel.setProperty("/selectedEventPath", oBindingContext.getPath());
            // Open event details popover using the new fragment
            this._openEventDetailsPopover(oEvent.getParameter("domRef"));
        },
        
        // Modified onIntervalSelect method
        onIntervalSelect: function (oEvent) {
            var oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                oRow = oEvent.getParameter("row"),
                oModel = this.getView().getModel(),
                oAppointment = {
                    start: oStartDate,
                    end: oEndDate,
                    title: "new appointment",
                    info: "",
                    type: "Type01",
                    location: "",
                    description: "",
                    allDay: false,
                    attendees: "",
                    category: "Appointment",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: "In-person",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted"
                };
            var oRowContext = oRow.getBindingContext();
            var sPath = oRowContext.getPath() + "/appointments";
            var aAppointments = oModel.getProperty(sPath) || [];
            aAppointments.push(oAppointment);
            oModel.setProperty(sPath, aAppointments);
            MessageToast.show("New appointment created. Click on it to edit.");
        },
        
        // Add this method to open the event details popover
        _openEventDetailsPopover: function (oSource) {
            var that = this;
            // Load the fragment if not already loaded
            if (!this._oEventDetailsPopover) {
                Fragment.load({
                    id: this.getView().getId(),
                    name: "com.capexrevex.capexrevex.view.fragments.EventDetailsDialog",
                    controller: this
                }).then(function (oPopover) {
                    that._oEventDetailsPopover = oPopover;
                    that.getView().addDependent(that._oEventDetailsPopover);
                    // Set the model for the fragment
                    that._oEventDetailsPopover.setModel(that.getView().getModel("view"), "view");
                    that._oEventDetailsPopover.setModel(that.getView().getModel("attendees"), "attendees");
                    that._oEventDetailsPopover.openBy(oSource);
                    that._setAttendeesTokens();
                }).catch(function (error) {
                    console.error("Error loading event details dialog:", error);
                    MessageToast.show("Error loading event details");
                });
            } else {
                // Set the model for the fragment
                this._oEventDetailsPopover.setModel(this.getView().getModel("view"), "view");
                this._oEventDetailsPopover.setModel(this.getView().getModel("attendees"), "attendees");
                this._oEventDetailsPopover.openBy(oSource);
                this._setAttendeesTokens();
            }
        },
        
        _setAttendeesTokens: function () {
            var oViewModel = this.getView().getModel("view");
            var sAttendees = oViewModel.getProperty("/selectedEvent/attendees") || "";
            var oMultiInput = this.byId("eventAttendees");
            oMultiInput.destroyTokens();
            var aAttendees = this._parseAttendees(sAttendees);
            aAttendees.forEach(function (oAttendee) {
                var oToken = new Token({
                    key: oAttendee.email,
                    text: oAttendee.name
                });
                oMultiInput.addToken(oToken);
            });
        },
        
        // Extract attendees from appointment data
        _extractAttendeesFromAppointment: function (oAppointment) {
            var aAttendees = [];
            // Handle different appointment types
            if (oAppointment.requiredAttendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.requiredAttendees));
            }
            if (oAppointment.optionalAttendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.optionalAttendees));
            }
            if (oAppointment.internalAttendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.internalAttendees));
            }
            if (oAppointment.guestEmail) {
                aAttendees.push({
                    name: oAppointment.guestName || oAppointment.guestEmail,
                    email: oAppointment.guestEmail,
                    status: "Free"
                });
            }
            if (oAppointment.attendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.attendees));
            }
            return aAttendees;
        },
        
        // Parse attendees string into objects
        _parseAttendees: function (sAttendees) {
            if (!sAttendees) return [];
            return sAttendees.split('; ').map(function (sAttendee) {
                sAttendee = sAttendee.trim();
                if (sAttendee) {
                    return {
                        name: sAttendee,
                        email: sAttendee,
                        status: "Free"
                    };
                }
                return null;
            }).filter(Boolean);
        },
        
        // Modified onSaveEvent method to handle attendees
        onSaveEvent: function () {
            var oViewModel = this.getView().getModel("view");
            var sPath = oViewModel.getProperty("/selectedEventPath");
            if (!sPath) {
                MessageToast.show("Error saving event");
                return;
            }
            var oModel = this.getView().getModel();
            var sTitle = oViewModel.getProperty("/selectedEvent/title");
            var oStart = oViewModel.getProperty("/selectedEvent/start");
            var oEnd = oViewModel.getProperty("/selectedEvent/end");
            var bAllDay = oViewModel.getProperty("/selectedEvent/allDay");
            var sLocation = oViewModel.getProperty("/selectedEvent/location");
            var sDescription = oViewModel.getProperty("/selectedEvent/description");
            // Get attendees from the MultiInput
            var oAttendeesInput = this.byId("eventAttendees");
            var aTokens = oAttendeesInput.getTokens();
            var sAttendees = aTokens.map(function (oToken) {
                return oToken.getKey();
            }).join("; ");
            // Validate required fields
            if (!sTitle) {
                MessageToast.show("Please enter a title for the event");
                return;
            }
            if (!oStart || !oEnd) {
                MessageToast.show("Please enter valid start and end dates");
                return;
            }
            // Validate that end time is after start time
            if (oEnd <= oStart) {
                MessageToast.show("End time must be after start time");
                return;
            }
            // Update the model via path
            oModel.setProperty(sPath + "/title", sTitle);
            oModel.setProperty(sPath + "/start", oStart);
            oModel.setProperty(sPath + "/end", oEnd);
            oModel.setProperty(sPath + "/allDay", bAllDay);
            oModel.setProperty(sPath + "/info", sLocation);
            oModel.setProperty(sPath + "/location", sLocation);
            oModel.setProperty(sPath + "/description", sDescription);
            oModel.setProperty(sPath + "/attendees", sAttendees);
            MessageToast.show("Event saved successfully");
            // Close the popover
            if (this._oEventDetailsPopover) {
                this._oEventDetailsPopover.close();
            }
            // Refresh the calendar
            this.byId("calendar").getBinding("rows").refresh();
        },
        
        // Modified onDiscardEvent method
        onDiscardEvent: function () {
            // Close the popover without saving
            if (this._oEventDetailsPopover) {
                this._oEventDetailsPopover.close();
            }
            MessageToast.show("Changes discarded");
        },
        
        // Fragment handling functions
        _openRemarksDialog: function () {
            if (!this._oRemarksDialog) {
                this._oRemarksDialog = sap.ui.xmlfragment(
                    "com.capexrevex.capexrevex.view.RemarksDialog",
                    this
                );
                this.getView().addDependent(this._oRemarksDialog);
                // Set the model for the fragment
                this._oRemarksDialog.setModel(this.getView().getModel());
                this._oRemarksDialog.setModel(this.getView().getModel("attendees"), "attendees");
            }
            // Set default values for new event (current date from 4:00 PM to 4:30 PM)
            var oEventDate = UI5Date.getInstance();
            oEventDate.setHours(16, 0, 0, 0); // 4:00 PM
            var oEnd = UI5Date.getInstance(oEventDate);
            oEnd.setHours(16, 30, 0, 0); // 4:30 PM
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", {
                title: "",
                start: oEventDate,
                end: oEnd,
                info: "",
                type: "Type01",
                icon: "",
                attendees: [],
                isNew: true // Flag to indicate it's a new appointment
            });
            this._oRemarksDialog.open();
        },
        
        onSaveEventFromDialog: function () {
            var oViewModel = this.getView().getModel("view");
            var oSelectedEvent = oViewModel.getProperty("/selectedEvent");
            // Get values from the dialog with proper null checks
            var oTitleControl = sap.ui.getCore().byId("eventTitle");
            var oAttendeesControl = sap.ui.getCore().byId("eventAttendees");
            var oMakeRecurringControl = sap.ui.getCore().byId("makeRecurring");
            var oAllDayControl = sap.ui.getCore().byId("allDay");
            var oInPersonControl = sap.ui.getCore().byId("inPerson");
            var oResponseOptionsControl = sap.ui.getCore().byId("responseOptions");
            var oShowAsControl = sap.ui.getCore().byId("showAs");
            var oDescriptionControl = sap.ui.getCore().byId("eventDescription");
            // Get the date and time values with proper null checks
            var oDatePicker = sap.ui.getCore().byId("eventDate");
            var oStartTimePicker = sap.ui.getCore().byId("startTime");
            var oEndTimePicker = sap.ui.getCore().byId("endTime");
            // Validate controls exist
            if (!oDatePicker || !oStartTimePicker || !oEndTimePicker) {
                MessageToast.show("Error: Date or time controls not found");
                return;
            }
            var oDate = oDatePicker.getDateValue();
            var oStartTime = oStartTimePicker.getDateValue();
            var oEndTime = oEndTimePicker.getDateValue();
            // Validate date values
            if (!oDate || !oStartTime || !oEndTime) {
                MessageToast.show("Please enter valid date and time values");
                return;
            }
            // Get other values with null checks
            var sTitle = oTitleControl ? oTitleControl.getValue() : "";
            var sAttendees = oAttendeesControl ? oAttendeesControl.getValue() : "";
            var bMakeRecurring = oMakeRecurringControl ? oMakeRecurringControl.getSelected() : false;
            var bAllDay = oAllDayControl ? oAllDayControl.getSelected() : false;
            var bInPerson = oInPersonControl ? oInPersonControl.getSelected() : "";
            var sResponseOption = oResponseOptionsControl ? oResponseOptionsControl.getSelectedKey() : "";
            var sShowAs = oShowAsControl ? oShowAsControl.getSelectedKey() : "";
            var sDescription = oDescriptionControl ? oDescriptionControl.getValue() : "";
            // Validate required title field
            // if (!sTitle) {
            //     MessageToast.show("Please enter a title for the event");
            //     return;
            // }
            // Combine date and start time
            var oStart = new Date(oDate);
            oStart.setHours(oStartTime.getHours(), oStartTime.getMinutes(), 0, 0);
            var oEnd = new Date(oDate);
            oEnd.setHours(oEndTime.getHours(), oEndTime.getMinutes(), 0, 0);
            // Validate that end time is after start time
            if (oEnd <= oStart) {
                MessageToast.show("End time must be after start time");
                return;
            }
            // Create the new appointment object with the title as the main text
            var newAppointment = {
                start: oStart,
                end: oEnd,
                title: sTitle, // Use the actual title here
                info: bInPerson, // This is secondary info
                type: "Type01",
                attendees: sAttendees,
                description: sDescription,
                recurring: bMakeRecurring,
                allDay: bAllDay,
                responseOption: sResponseOption,
                showAs: sShowAs,
                category: "Appointment",
                recurrence: bMakeRecurring ? "Recurring" : "Non-recurring",
                inPerson: bInPerson,
                organizerStatus: "sent",
                attendeeStatus: "accepted"
            };
            // Get the model and add the new appointment to the first person's calendar
            var oModel = this.getView().getModel();
            var aPeople = oModel.getProperty("/people");
            if (aPeople && aPeople.length > 0) {
                // Add to the first person's appointments
                aPeople[0].appointments.push(newAppointment);
                // Update the model
                oModel.setProperty("/people", aPeople);
                // Close the dialog
                if (this._oRemarksDialog) {
                    this._oRemarksDialog.close();
                }
                // Show success message
                MessageToast.show("Event '" + sTitle + "' has been created");
                // Refresh the calendar to show the new appointment
                this.byId("calendar").getBinding("rows").refresh(true);
            }
        },
        
        onCancelEventFromDialog: function () {
            // Close the dialog without saving
            if (this._oRemarksDialog) {
                this._oRemarksDialog.close();
            }
        },
        
        onToggleGroupMode: function () {
            var oViewModel = this.getView().getModel("view");
            var sMode = oViewModel.getProperty("/groupMode");
            oViewModel.setProperty("/groupMode", sMode === "Group" ? "None" : "Group");
            this.byId("calendar").rerender();
        },
        
        // Modified onExit method
        onExit: function () {
            // Clean up all fragments when the controller is destroyed
            if (this._oRemarksDialog) {
                this._oRemarksDialog.destroy();
                this._oRemarksDialog = null;
            }
            if (this._oChannelMeetingDialog) {
                this._oChannelMeetingDialog.destroy();
                this._oChannelMeetingDialog = null;
            }
            if (this._oVirtualAppointmentDialog) {
                this._oVirtualAppointmentDialog.destroy();
                this._oVirtualAppointmentDialog = null;
            }
            if (this._oEventDetailsPopover) {
                this._oEventDetailsPopover.destroy();
                this._oEventDetailsPopover = null;
            }
            if (this._oMeetNowDialog) {
                this._oMeetNowDialog.destroy();
                this._oMeetNowDialog = null;
            }
        }
    });
});


UPDATED CODE 7

sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/ui/core/date/UI5Date",
    "sap/ui/core/Fragment",
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/m/Token",
    "sap/ui/model/odata/v2/ODataModel",
    "sap/m/SuggestionItem"
], function (Controller, JSONModel, MessageToast, UI5Date, Fragment, Filter, FilterOperator, Token, ODataModel, SuggestionItem) {
    "use strict";
    
    return Controller.extend("com.capexrevex.capexrevex.controller.View1", {
        onInit: function () {
            // Initialize all dialog references
            this._oMeetNowDialog = null;
            this._oChannelMeetingDialog = null;
            this._oVirtualAppointmentDialog = null;
            this._oRemarksDialog = null;
            this._oEventDetailsPopover = null;
            
            // Set initial view to Work week
            this.byId("viewSelectButton").setText("Work week");
            
            // Get today's date
            var today = UI5Date.getInstance();
            
            // Set the calendar to start from today
            var startDate = UI5Date.getInstance(
                today.getFullYear(),
                today.getMonth(),
                today.getDate(),
                8, 0 // Start at 8 AM
            );
            
            // Create appointments starting from today
            var appointments = [];
            
            // Today's appointments
            appointments.push({
                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 9, 0),
                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 10, 0),
                title: "Team sync",
                info: "Canteen",
                type: "Type07",
                pic: "sap-icon://family-care",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "In-person",
                organizerStatus: "sent",
                attendeeStatus: "accepted"
            });
            
            appointments.push({
                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 11, 0),
                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 12, 0),
                title: "Client Meeting",
                info: "Conference Room",
                type: "Type01",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "In-person",
                organizerStatus: "sent",
                attendeeStatus: "tentative"
            });
            
            // Tomorrow's appointments
            var tomorrow = UI5Date.getInstance(today);
            tomorrow.setDate(tomorrow.getDate() + 1);
            
            appointments.push({
                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 10, 0),
                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 11, 30),
                title: "Project Review",
                info: "In Progress",
                type: "Type01",
                pic: "sap-icon://business-objects-experience",
                category: "Appointment",
                showAs: "Busy",
                recurrence: "Recurring",
                inPerson: "Virtual",
                organizerStatus: "draft",
                attendeeStatus: "notResponded"
            });
            
            appointments.push({
                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 14, 0),
                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 15, 0),
                title: "Training Session",
                info: "Online",
                type: "Type03",
                pic: "sap-icon://learning-assistant",
                category: "Appointment",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "Virtual",
                organizerStatus: "sent",
                attendeeStatus: "accepted"
            });
            
            // Day after tomorrow
            var dayAfter = UI5Date.getInstance(tomorrow);
            dayAfter.setDate(dayAfter.getDate() + 1);
            
            appointments.push({
                start: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 9, 0),
                end: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 10, 0),
                title: "Team Standup",
                info: "Daily meeting",
                type: "Type07",
                pic: "sap-icon://group",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Recurring",
                inPerson: "Hybrid",
                organizerStatus: "sent",
                attendeeStatus: "accepted"
            });
            
            appointments.push({
                start: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 13, 0),
                end: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 14, 30),
                title: "Lunch with Client",
                info: "Restaurant",
                type: "Type02",
                pic: "sap-icon://food",
                category: "Appointment",
                showAs: "Free",
                recurrence: "Non-recurring",
                inPerson: "In-person",
                organizerStatus: "sent",
                attendeeStatus: "declined"
            });
            
            // Fourth day
            var fourthDay = UI5Date.getInstance(dayAfter);
            fourthDay.setDate(fourthDay.getDate() + 1);
            
            appointments.push({
                start: UI5Date.getInstance(fourthDay.getFullYear(), fourthDay.getMonth(), fourthDay.getDate(), 11, 0),
                end: UI5Date.getInstance(fourthDay.getFullYear(), fourthDay.getMonth(), fourthDay.getDate(), 12, 0),
                title: "Product Demo",
                info: "Showcase new features",
                type: "Type04",
                pic: "sap-icon://presentation",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "In-person",
                organizerStatus: "sent",
                attendeeStatus: "followed"
            });
            
            // Fifth day
            var fifthDay = UI5Date.getInstance(fourthDay);
            fifthDay.setDate(fifthDay.getDate() + 1);
            
            appointments.push({
                start: UI5Date.getInstance(fifthDay.getFullYear(), fifthDay.getMonth(), fifthDay.getDate(), 10, 0),
                end: UI5Date.getInstance(fifthDay.getFullYear(), fifthDay.getMonth(), fifthDay.getDate(), 11, 30),
                title: "Planning Session",
                info: "Quarterly planning",
                type: "Type05",
                pic: "sap-icon://calendar",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Recurring",
                inPerson: "Virtual",
                organizerStatus: "sent",
                attendeeStatus: "canceled"
            });
            
            // Initialize the view model with data
            var oViewModel = new JSONModel({
                startDate: startDate,
                people: [
                    {
                        name: "John Doe",
                        role: "Developer",
                        appointments: appointments
                    }
                ],
                selectedEvent: {
                    title: "",
                    start: UI5Date.getInstance(),
                    end: UI5Date.getInstance(),
                    info: "",
                    type: "Type01",
                    isNew: true
                },
                filters: {
                    appointments: true,
                    meetings: true,
                    reservations: false,
                    categories: [],
                    showAs: [],
                    recurrence: [],
                    inPerson: [],
                    organizer: {
                        sent: true,
                        draft: true
                    },
                    attendee: {
                        accepted: true,
                        declined: true,
                        followed: true,
                        tentative: true,
                        canceled: true,
                        notResponded: true
                    }
                },
                currentView: "Work week",
                timeScale: "30 minutes",
                daysToShow: 5,
                workWeekMenuOpen: false,
                timeScaleMinutes: 30,
                groupMode: "Group"
            });
            
            // Create additional model with extended data using UI5Date
            var oModel = new JSONModel();
            oModel.setData({
                startDate: startDate,
                people: [
                    {
                        pic: "sap-icon://hr-approval/",
                        name: "John Miller",
                        role: "team member",
                        appointments: [
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 8, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 9, 0),
                                title: "Team sync",
                                info: "Canteen",
                                type: "Type07",
                                pic: "sap-icon://family-care",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "accepted"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 9, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 11, 0),
                                title: "Morning Sync",
                                info: "I call you",
                                type: "Type01",
                                pic: "sap-icon://call",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Recurring",
                                inPerson: "Virtual",
                                organizerStatus: "sent",
                                attendeeStatus: "tentative"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 10, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 12, 0),
                                title: "Sync Bill",
                                info: "Online",
                                type: "Type03",
                                category: "Appointment",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "Virtual",
                                organizerStatus: "draft",
                                attendeeStatus: "notResponded"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 10, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 13, 0),
                                title: "Check Flights",
                                info: "no room",
                                type: "Type09",
                                pic: "sap-icon://flight",
                                category: "Appointment",
                                showAs: "Free",
                                recurrence: "Non-recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "declined"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 13, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 14, 0),
                                title: "Lunch",
                                info: "canteen",
                                type: "Type05",
                                pic: "sap-icon://private",
                                category: "Appointment",
                                showAs: "Free",
                                recurrence: "Non-recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "accepted"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 18, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 20, 0),
                                title: "Discussion of the plan",
                                info: "Online meeting",
                                type: "Type04",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "Virtual",
                                organizerStatus: "sent",
                                attendeeStatus: "followed"
                            }
                        ]
                    },
                    {
                        pic: "sap-icon://hr-approval",
                        name: "Donna Moore",
                        role: "team member",
                        appointments: [
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 8, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 9, 26),
                                title: "Team sync",
                                info: "Canteen",
                                type: "Type07",
                                pic: "sap-icon://family-care",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "accepted"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 10, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 12, 0),
                                title: "Sync John",
                                info: "Online",
                                type: "Type03",
                                category: "Appointment",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "Virtual",
                                organizerStatus: "draft",
                                attendeeStatus: "notResponded"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 11, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 12, 0),
                                title: "Prep for planning",
                                info: "room 5",
                                type: "Type01",
                                pic: "sap-icon://family-care",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "canceled"
                            }
                        ]
                    },
                    {
                        pic: "sap-icon://hr-approval",
                        name: "Alex Johnson",
                        role: "team member",
                        appointments: [
                            {
                                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 9, 0),
                                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 10, 0),
                                title: "Team sync",
                                info: "Canteen",
                                type: "Type07",
                                pic: "sap-icon://family-care",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "accepted"
                            },
                            {
                                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 10, 0),
                                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 12, 0),
                                title: "Project Planning",
                                info: "Conference Room",
                                type: "Type01",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "tentative"
                            },
                            {
                                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 14, 0),
                                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 15, 0),
                                title: "Client Call",
                                info: "Online",
                                type: "Type03",
                                category: "Appointment",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "Virtual",
                                organizerStatus: "draft",
                                attendeeStatus: "notResponded"
                            }
                        ]
                    },
                    {
                        pic: "sap-icon://hr-approval",
                        name: "Sarah Williams",
                        role: "team member",
                        appointments: [
                            {
                                start: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 9, 0),
                                end: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 10, 0),
                                title: "Team sync",
                                info: "Canteen",
                                type: "Type07",
                                pic: "sap-icon://family-care",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "accepted"
                            },
                            {
                                start: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 11, 0),
                                end: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 12, 30),
                                title: "Design Review",
                                info: "Conference Room",
                                type: "Type01",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "declined"
                            }
                        ]
                    }
                ]
            });
            
            // Set both models to the view
            this.getView().setModel(oViewModel, "view");
            this.getView().setModel(oModel);
            
            // Initialize filter arrays
            this._aFilters = [];
            
            // Create attendees model with proper structure
            var oAttendeesModel = new JSONModel({
                attendees: [
                    { name: "Ankit Jha", email: "ankit.jha@sumodigitech.com", status: "Free" },
                    { name: "Vikrant Raj", email: "vikrant.raj@sumodigitech.com", status: "Free" },
                    { name: "Pushpak Jha", email: "pushpak.jha@sumodigitech.com", status: "Busy" },
                    { name: "Pushkar Kumar Jha", email: "pushkar.jha@sumodigitech.com", status: "Tentative" },
                    { name: "Sumit Jhaldiyal", email: "sumit.jhaldiyal@sumodigitech.com", status: "Free" },
                    { name: "Mohd Aakib", email: "mohd.aakib@sumodigitech.com", status: "Free" },
                    { name: "Vikash Ojha", email: "vikash.ojha@sumodigitech.com", status: "Free" },
                    { name: "Yugal Kishore", email: "yugal.kishore@sumodigitech.com", status: "Busy" },
                ]
            });
            this.getView().setModel(oAttendeesModel, "attendees");
            
            // Initialize OData model for scheduling service
            var oSchedulingModel = new ODataModel({
                serviceUrl: "/schedulingservice/",
                useBatch: false
            });
            this.getView().setModel(oSchedulingModel, "scheduling");
            
            // Load attendees data
            this._loadAttendees();
        },
        
        // Load attendees from scheduling service
        _loadAttendees: function () {
            var oSchedulingModel = this.getView().getModel("scheduling");
            var oAttendeesModel = this.getView().getModel("attendees");
            var that = this;
            
            oSchedulingModel.read("/MeetingSchedulingSet", {
                success: function (oData) {
                    var aAttendees = [];
                    if (oData && oData.results) {
                        oData.results.forEach(function (oAttendee) {
                            aAttendees.push({
                                id: oAttendee.AttendeeID,
                                name: oAttendee.AttendeeName,
                                email: oAttendee.AttendeeEmail,
                                role: oAttendee.Role || "Attendee",
                                status: oAttendee.Status || "Free"
                            });
                        });
                    }
                    oAttendeesModel.setProperty("/attendees", aAttendees);
                    MessageToast.show("Attendees loaded successfully: " + aAttendees.length + " found");
                },
                error: function (oError) {
                    console.error("Error loading attendees:", oError);
                    MessageToast.show("Error loading attendees from service");
                }
            });
        },
        
        // Handle attendee suggestions in MultiInput
        onAttendeeSuggest: function (oEvent) {
            var sTerm = oEvent.getParameter("suggestValue");
            var oMultiInput = oEvent.getSource();
            var oAttendeesModel = this.getView().getModel("attendees");
            
            if (!oAttendeesModel) {
                return;
            }
            
            var aAttendees = oAttendeesModel.getProperty("/attendees") || [];
            var aFilteredAttendees = [];
            
            if (sTerm) {
                // Filter attendees based on search term
                aFilteredAttendees = aAttendees.filter(function (oAttendee) {
                    return oAttendee.name.toLowerCase().includes(sTerm.toLowerCase()) ||
                        oAttendee.email.toLowerCase().includes(sTerm.toLowerCase());
                });
            } else {
                aFilteredAttendees = aAttendees;
            }
            
            // Update suggestion items
            oMultiInput.destroySuggestionItems();
            aFilteredAttendees.forEach(function (oAttendee) {
                // Create a custom suggestion item with name, email, and status
                var oSuggestionItem = new SuggestionItem({
                    key: oAttendee.email,
                    text: oAttendee.name,
                    description: oAttendee.email,
                    additionalText: oAttendee.status
                });
                
                // Set different icons based on status
                switch (oAttendee.status.toLowerCase()) {
                    case "free":
                        oSuggestionItem.setIcon("sap-icon://accept");
                        break;
                    case "busy":
                        oSuggestionItem.setIcon("sap-icon://busy");
                        break;
                    case "tentative":
                        oSuggestionItem.setIcon("sap-icon://question-mark");
                        break;
                    default:
                        oSuggestionItem.setIcon("sap-icon://employee");
                }
                
                oMultiInput.addSuggestionItem(oSuggestionItem);
            });
        },
        
        // Handle token addition in MultiInput
        onAttendeeTokenChange: function (oEvent) {
            var oMultiInput = oEvent.getSource();
            var sInputValue = oMultiInput.getValue().trim();
            
            if (!sInputValue) {
                return;
            }
            
            // Check if input is an email or should be treated as search
            if (this._isEmailValid(sInputValue)) {
                // Create token for manually entered email
                var oToken = new Token({
                    key: sInputValue,
                    text: sInputValue
                });
                oMultiInput.addToken(oToken);
                oMultiInput.setValue("");
            } else {
                // Trigger suggestion for non-email input
                this.onAttendeeSuggest(oEvent);
            }
        },
        
        // Validate email format
        _isEmailValid: function (sEmail) {
            var re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            return re.test(sEmail);
        },
        
        // Create meeting scheduling
        createMeetingScheduling: function (oMeetingData) {
            var oSchedulingModel = this.getView().getModel("scheduling");
            var that = this;
            
            oSchedulingModel.create("/MeetingSchedulingSet", oMeetingData, {
                success: function (oData) {
                    MessageToast.show("Meeting scheduled successfully!");
                    // Refresh attendees after creating meeting
                    that._loadAttendees();
                    // Add the meeting to the calendar
                    that._addMeetingToCalendar(oData);
                },
                error: function (oError) {
                    console.error("Error scheduling meeting:", oError);
                    MessageToast.show("Failed to schedule meeting");
                    // Fallback: Add to local calendar
                    that._addMeetingToCalendar(oMeetingData);
                }
            });
        },
        
        // Helper method to add meeting to calendar
        _addMeetingToCalendar: function (oMeetingData) {
            var oModel = this.getView().getModel();
            var aPeople = oModel.getProperty("/people");
            
            if (aPeople && aPeople.length > 0) {
                var newAppointment = {
                    start: new Date(oMeetingData.StartDateTime),
                    end: new Date(oMeetingData.EndDateTime),
                    title: oMeetingData.MeetingTitle,
                    info: oMeetingData.Location || "Online Meeting",
                    type: "Type01",
                    pic: "sap-icon://group",
                    category: "Meeting",
                    showAs: "Busy",
                    recurrence: oMeetingData.IsRecurring ? "Recurring" : "Non-recurring",
                    inPerson: oMeetingData.IsVirtual ? "Virtual" : "In-person",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted",
                    attendees: oMeetingData.Attendees || []
                };
                
                aPeople[0].appointments.push(newAppointment);
                oModel.setProperty("/people", aPeople);
                // Refresh calendar
                this.byId("calendar").getBinding("rows").refresh(true);
            }
        },
        
        // Role-based functionality
        roles: {
            donna: "Donna Moore",
            manager: "manager",
            admin: "admin"
        },
        
        handleRoleChange: function () {
            this.getView().getModel().refresh(true);
        },
        
        getUserRole: function () {
            return this.roles[this.byId("userRole").getSelectedKey()];
        },
        
        canModifyAppointments: function (sRole) {
            var sUserRole = this.getUserRole();
            if (sUserRole === this.roles.manager || sUserRole === this.roles.admin || sUserRole === sRole) {
                return true;
            }
            return false;
        },
        
        // Filter functionality
        onFilterChange: function (oEvent) {
            var sFilterType = oEvent.getSource().getId().replace("Checkbox", "");
            var bSelected = oEvent.getParameter("selected");
            
            // Update filter model
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            oFilters[sFilterType.toLowerCase()] = bSelected;
            oViewModel.setProperty("/filters", oFilters);
            
            // Apply filters
            this.applyFilters();
        },
        
        applyFilters: function () {
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            
            // Clear existing filters
            this._aFilters = [];
            
            // Apply category filters
            if (!oFilters.appointments) {
                this._aFilters.push(new Filter("category", FilterOperator.NE, "Appointment"));
            }
            
            if (!oFilters.meetings) {
                this._aFilters.push(new Filter("category", FilterOperator.NE, "Meeting"));
            }
            
            if (!oFilters.reservations) {
                this._aFilters.push(new Filter("category", FilterOperator.NE, "Reservation"));
            }
            
            // Apply additional filters based on selected options
            if (oFilters.categories && oFilters.categories.length > 0) {
                this._aFilters.push(new Filter("category", FilterOperator.Contains, oFilters.categories.join("|")));
            }
            
            if (oFilters.showAs && oFilters.showAs.length > 0) {
                this._aFilters.push(new Filter("showAs", FilterOperator.Contains, oFilters.showAs.join("|")));
            }
            
            if (oFilters.recurrence && oFilters.recurrence.length > 0) {
                this._aFilters.push(new Filter("recurrence", FilterOperator.Contains, oFilters.recurrence.join("|")));
            }
            
            if (oFilters.inPerson && oFilters.inPerson.length > 0) {
                this._aFilters.push(new Filter("inPerson", FilterOperator.Contains, oFilters.inPerson.join("|")));
            }
            
            // Apply organizer filters
            var aOrganizerFilters = [];
            if (oFilters.organizer.sent) {
                aOrganizerFilters.push(new Filter("organizerStatus", FilterOperator.EQ, "sent"));
            }
            if (oFilters.organizer.draft) {
                aOrganizerFilters.push(new Filter("organizerStatus", FilterOperator.EQ, "draft"));
            }
            if (aOrganizerFilters.length > 0) {
                this._aFilters.push(new Filter({
                    filters: aOrganizerFilters,
                    and: false
                }));
            }
            
            // Apply attendee filters
            var aAttendeeFilters = [];
            if (oFilters.attendee.accepted) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "accepted"));
            }
            if (oFilters.attendee.declined) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "declined"));
            }
            if (oFilters.attendee.followed) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "followed"));
            }
            if (oFilters.attendee.tentative) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "tentative"));
            }
            if (oFilters.attendee.canceled) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "canceled"));
            }
            if (oFilters.attendee.notResponded) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "notResponded"));
            }
            if (aAttendeeFilters.length > 0) {
                this._aFilters.push(new Filter({
                    filters: aAttendeeFilters,
                    and: false
                }));
            }
            
            // Apply filters to the calendar
            var oCalendar = this.byId("calendar");
            var oBinding = oCalendar.getBinding("rows");
            
            if (this._aFilters.length > 0) {
                oBinding.filter(this._aFilters);
            } else {
                oBinding.filter([]);
            }
            
            // Update filter button text
            var oFilterButton = this.byId("_IDGenButton7");
            var iFilterCount = this._aFilters.length;
            oFilterButton.setText(iFilterCount > 0 ? "Filter applied (" + iFilterCount + ")" : "Filter applied");
        },
        
        // Filter popover handlers
        onAppointmentsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("appointmentsFilterPopover").openBy(oButton);
        },
        
        onMeetingsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("meetingsFilterPopover").openBy(oButton);
        },
        
        onReservationsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("reservationsFilterPopover").openBy(oButton);
        },
        
        onCategoriesFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("categoriesFilterPopover").openBy(oButton);
        },
        
        onShowAsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("showAsFilterPopover").openBy(oButton);
        },
        
        onRecurrenceFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("recurrenceFilterPopover").openBy(oButton);
        },
        
        onInPersonFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("inPersonFilterPopover").openBy(oButton);
        },
        
        // Organizer and Attendee filter handlers
        onOrganizerFilterPress: function (oEvent) {
            var oOptionsBox = this.byId("organizerOptions");
            oOptionsBox.setVisible(!oOptionsBox.getVisible());
        },
        
        onAttendeeFilterPress: function (oEvent) {
            var oOptionsBox = this.byId("attendeeOptions");
            oOptionsBox.setVisible(!oOptionsBox.getVisible());
        },
        
        onOrganizerFilterChange: function (oEvent) {
            var sId = oEvent.getSource().getId();
            var bSelected = oEvent.getParameter("selected");
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            
            // Update the corresponding filter property
            if (sId === "sentCheckbox") {
                oFilters.organizer.sent = bSelected;
            } else if (sId === "draftCheckbox") {
                oFilters.organizer.draft = bSelected;
            }
            
            oViewModel.setProperty("/filters", oFilters);
            this.applyFilters();
        },
        
        onAttendeeFilterChange: function (oEvent) {
            var sId = oEvent.getSource().getId();
            var bSelected = oEvent.getParameter("selected");
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            
            // Update the corresponding filter property
            if (sId === "acceptedCheckbox") {
                oFilters.attendee.accepted = bSelected;
            } else if (sId === "declinedCheckbox") {
                oFilters.attendee.declined = bSelected;
            } else if (sId === "followedCheckbox") {
                oFilters.attendee.followed = bSelected;
            } else if (sId === "tentativeCheckbox") {
                oFilters.attendee.tentative = bSelected;
            } else if (sId === "canceledCheckbox") {
                oFilters.attendee.canceled = bSelected;
            } else if (sId === "notRespondedCheckbox") {
                oFilters.attendee.notResponded = bSelected;
            }
            
            oViewModel.setProperty("/filters", oFilters);
            this.applyFilters();
        },
        
        onUnselectAllRight: function () {
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            
            // Reset organizer filters
            oFilters.organizer.sent = false;
            oFilters.organizer.draft = false;
            
            // Reset attendee filters
            oFilters.attendee.accepted = false;
            oFilters.attendee.declined = false;
            oFilters.attendee.followed = false;
            oFilters.attendee.tentative = false;
            oFilters.attendee.canceled = false;
            oFilters.attendee.notResponded = false;
            
            oViewModel.setProperty("/filters", oFilters);
            
            // Update the checkboxes
            this.byId("sentCheckbox").setSelected(false);
            this.byId("draftCheckbox").setSelected(false);
            this.byId("acceptedCheckbox").setSelected(false);
            this.byId("declinedCheckbox").setSelected(false);
            this.byId("followedCheckbox").setSelected(false);
            this.byId("tentativeCheckbox").setSelected(false);
            this.byId("canceledCheckbox").setSelected(false);
            this.byId("notRespondedCheckbox").setSelected(false);
            
            this.applyFilters();
        },
        
        // Unselect all handlers
        onAppointmentsUnselectAll: function () {
            this._unselectAllCheckboxes("appointmentsFilterList");
        },
        
        onMeetingsUnselectAll: function () {
            this._unselectAllCheckboxes("meetingsFilterList");
        },
        
        onReservationsUnselectAll: function () {
            this._unselectAllCheckboxes("reservationsFilterList");
        },
        
        onCategoriesUnselectAll: function () {
            this._unselectAllCheckboxes("categoriesFilterList");
        },
        
        onShowAsUnselectAll: function () {
            this._unselectAllCheckboxes("showAsFilterList");
        },
        
        onRecurrenceUnselectAll: function () {
            this._unselectAllCheckboxes("recurrenceFilterList");
        },
        
        onInPersonUnselectAll: function () {
            this._unselectAllCheckboxes("inPersonFilterList");
        },
        
        _unselectAllCheckboxes: function (sListId) {
            var oList = this.byId(sListId);
            var aItems = oList.getItems();
            
            aItems.forEach(function (oItem) {
                if (oItem.isA("sap.m.CheckBox")) {
                    oItem.setSelected(false);
                }
            });
        },
        
        // Filter selection handlers
        onAppointmentsFilterSelect: function (oEvent) {
            this._updateFilterArray("appointments", oEvent);
        },
        
        onMeetingsFilterSelect: function (oEvent) {
            this._updateFilterArray("meetings", oEvent);
        },
        
        onReservationsFilterSelect: function (oEvent) {
            this._updateFilterArray("reservations", oEvent);
        },
        
        onCategoriesFilterSelect: function (oEvent) {
            this._updateFilterArray("categories", oEvent);
        },
        
        onShowAsFilterSelect: function (oEvent) {
            this._updateFilterArray("showAs", oEvent);
        },
        
        onRecurrenceFilterSelect: function (oEvent) {
            this._updateFilterArray("recurrence", oEvent);
        },
        
        onInPersonFilterSelect: function (oEvent) {
            this._updateFilterArray("inPerson", oEvent);
        },
        
        _updateFilterArray: function (sFilterType, oEvent) {
            var sValue = oEvent.getSource().getText();
            var bSelected = oEvent.getParameter("selected");
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            
            if (!oFilters[sFilterType]) {
                oFilters[sFilterType] = [];
            }
            
            if (bSelected) {
                if (oFilters[sFilterType].indexOf(sValue) === -1) {
                    oFilters[sFilterType].push(sValue);
                }
            } else {
                var iIndex = oFilters[sFilterType].indexOf(sValue);
                if (iIndex !== -1) {
                    oFilters[sFilterType].splice(iIndex, 1);
                }
            }
            
            oViewModel.setProperty("/filters", oFilters);
            this.applyFilters();
        },
        
        onClearFilters: function () {
            // Reset all filter checkboxes
            var aCheckBoxIds = [
                "appointmentsCheckbox", "meetingsCheckbox", "reservationsCheckbox"
            ];
            
            aCheckBoxIds.forEach(function (sId) {
                var oCheckBox = this.byId(sId);
                if (oCheckBox) {
                    oCheckBox.setSelected(sId === "appointmentsCheckbox" || sId === "meetingsCheckbox");
                }
            }.bind(this));
            
            // Reset organizer and attendee filters
            this.byId("sentCheckbox").setSelected(true);
            this.byId("draftCheckbox").setSelected(true);
            this.byId("acceptedCheckbox").setSelected(true);
            this.byId("declinedCheckbox").setSelected(true);
            this.byId("followedCheckbox").setSelected(true);
            this.byId("tentativeCheckbox").setSelected(true);
            this.byId("canceledCheckbox").setSelected(true);
            this.byId("notRespondedCheckbox").setSelected(true);
            
            // Reset filter arrays in model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/filters", {
                appointments: true,
                meetings: true,
                reservations: false,
                categories: [],
                showAs: [],
                recurrence: [],
                inPerson: [],
                organizer: {
                    sent: true,
                    draft: true
                },
                attendee: {
                    accepted: true,
                    declined: true,
                    followed: true,
                    tentative: true,
                    canceled: true,
                    notResponded: true
                }
            });
            
            // Apply empty filters
            this._aFilters = [];
            var oCalendar = this.byId("calendar");
            oCalendar.getBinding("rows").filter([]);
            
            // Update filter button text
            this.byId("_IDGenButton7").setText("Filter applied");
            
            MessageToast.show("All filters cleared");
        },
        
        // Drag and Drop functionality
        handleAppointmentDragEnter: function (oEvent) {
            if (this.isAppointmentOverlap(oEvent, oEvent.getParameter("calendarRow"))) {
                oEvent.preventDefault();
            }
        },
        
        handleAppointmentDrop: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                oCalendarRow = oEvent.getParameter("calendarRow"),
                bCopy = oEvent.getParameter("copy"),
                sTitle = oAppointment.getTitle(),
                oModel = this.getView().getModel(),
                oAppBindingContext = oAppointment.getBindingContext(),
                oRowBindingContext = oCalendarRow.getBindingContext(),
                handleAppointmentDropBetweenRows = function () {
                    var aPath = oAppBindingContext.getPath().split("/");
                    var iIndex = aPath.pop();
                    var sRowAppointmentsPath = aPath.join("/");
                    oRowBindingContext.getObject().appointments.push(
                        oModel.getProperty(oAppBindingContext.getPath())
                    );
                    oModel.getProperty(sRowAppointmentsPath).splice(iIndex, 1);
                };
            
            if (bCopy) { // "copy" appointment
                var oProps = Object.assign({}, oModel.getProperty(oAppointment.getBindingContext().getPath()));
                oProps.start = oStartDate;
                oProps.end = oEndDate;
                oRowBindingContext.getObject().appointments.push(oProps);
            } else { // "move" appointment
                oModel.setProperty("start", oStartDate, oAppBindingContext);
                oModel.setProperty("end", oEndDate, oAppBindingContext);
                
                if (oAppointment.getParent() !== oCalendarRow) {
                    handleAppointmentDropBetweenRows();
                }
            }
            
            oModel.refresh(true);
        },
        
        handleAppointmentResize: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate");
            
            if (!this.isAppointmentOverlap(oEvent, oAppointment.getParent())) {
                oAppointment
                    .setStartDate(oStartDate)
                    .setEndDate(oEndDate);
            } else {
                MessageToast.show("As a manager you can not resize events if they overlap with another events");
            }
        },
        
        // Modified handleAppointmentCreate to open event details fragment
        handleAppointmentCreate: function (oEvent) {
            var oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                oPlanningCalendarRow = oEvent.getParameter("calendarRow"),
                oModel = this.getView().getModel(),
                sPath = oPlanningCalendarRow.getBindingContext().getPath();
            
            // Create a new appointment object
            var newAppointment = {
                title: "New Appointment",
                start: oStartDate,
                end: oEndDate,
                info: "",
                type: "Type01",
                category: "Appointment",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "In-person",
                organizerStatus: "sent",
                attendeeStatus: "accepted",
                isNew: true // Flag to indicate it's a new appointment
            };
            
            // Set the selected event in the view model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", newAppointment);
            
            // Open the event details fragment
            this._openEventDetailsPopover(oEvent.getParameter("domRef"));
            
            MessageToast.show("New Appointment is created at \n" + oStartDate + "\n and end at \n" + oEndDate + ".");
        },
        
        isAppointmentOverlap: function (oEvent, oCalendarRow) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                bAppointmentOverlapped;
            
            if (this.getUserRole() === this.roles.manager) {
                bAppointmentOverlapped = oCalendarRow.getAppointments().some(function (oCurrentAppointment) {
                    if (oCurrentAppointment === oAppointment) {
                        return;
                    }
                    
                    var oAppStartTime = oCurrentAppointment.getStartDate().getTime(),
                        oAppEndTime = oCurrentAppointment.getEndDate().getTime();
                    
                    if (oAppStartTime <= oStartDate.getTime() && oStartDate.getTime() < oAppEndTime) {
                        return true;
                    }
                    
                    if (oAppStartTime < oEndDate.getTime() && oEndDate.getTime() <= oAppEndTime) {
                        return true;
                    }
                    
                    if (oStartDate.getTime() <= oAppStartTime && oAppStartTime < oEndDate.getTime()) {
                        return true;
                    }
                });
            }
            
            return bAppointmentOverlapped;
        },
        
        // Toolbar and UI functionality
        onTodayPress: function () {
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/startDate", UI5Date.getInstance());
            MessageToast.show("Navigated to today");
        },
        
        onViewSelectPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oViewPopover = this.byId("viewPopover");
            
            // Close other popovers
            this.byId("filterPopover").close();
            this.byId("newEventPopover").close();
            
            // Toggle view popover
            if (!oViewPopover.isOpen()) {
                oViewPopover.openBy(oButton);
            } else {
                oViewPopover.close();
            }
        },
        
        onFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oFilterPopover = this.byId("filterPopover");
            
            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("newEventPopover").close();
            
            // Toggle filter popover
            if (!oFilterPopover.isOpen()) {
                oFilterPopover.openBy(oButton);
            } else {
                oFilterPopover.close();
            }
        },
        
        // MEET NOW FUNCTIONALITY - CORRECTED
        onMeetNowPress: function () {
            this._openMeetNowDialog();
        },
        
        _openMeetNowDialog: function () {
            var that = this;
            
            if (!this._oMeetNowDialog) {
                Fragment.load({
                    id: this.getView().getId(),
                    name: "com.capexrevex.capexrevex.view.fragments.MeetNowDialog",
                    controller: this
                }).then(function (oDialog) {
                    that._oMeetNowDialog = oDialog;
                    that.getView().addDependent(that._oMeetNowDialog);
                    
                    // Generate a unique meeting link
                    that._generateMeetingLink();
                    that._oMeetNowDialog.open();
                }).catch(function (error) {
                    console.error("Error loading Meet Now dialog:", error);
                    MessageToast.show("Error loading meeting dialog");
                    
                    // Fallback: Create a simple dialog
                    that._createFallbackMeetNowDialog();
                });
            } else {
                // Regenerate meeting link each time dialog is opened
                this._generateMeetingLink();
                this._oMeetNowDialog.open();
            }
        },
        
        // Fallback method if fragment loading fails
        _createFallbackMeetNowDialog: function () {
            var that = this;
            
            this._oMeetNowDialog = new sap.m.Dialog({
                title: "Meet Now",
                contentWidth: "500px",
                content: [
                    new sap.m.VBox({
                        items: [
                            new sap.m.Label({
                                text: "Meeting Name",
                                required: true
                            }),
                            new sap.m.Input("meetingNameInput", {
                                placeholder: "Enter meeting name",
                                liveChange: function(oEvent) {
                                    that.onMeetingNameChange(oEvent);
                                }
                            }),
                            new sap.m.Label({
                                text: "Meeting Link"
                            }),
                            new sap.m.HBox({
                                items: [
                                    new sap.m.Input("meetingLinkInput", {
                                        width: "100%",
                                        editable: false
                                    }),
                                    new sap.m.Button({
                                        icon: "sap-icon://copy",
                                        tooltip: "Copy link",
                                        press: function() {
                                            that.onCopyMeetingLink();
                                        }
                                    })
                                ]
                            })
                        ]
                    })
                ],
                buttons: [
                    new sap.m.Button({
                        text: "Start Meeting",
                        type: "Emphasized",
                        press: function() {
                            that.onStartMeeting();
                        }
                    }),
                    new sap.m.Button({
                        text: "Cancel",
                        press: function() {
                            that.onCancelMeeting();
                        }
                    })
                ]
            });
            
            this.getView().addDependent(this._oMeetNowDialog);
            this._generateMeetingLink();
            this._oMeetNowDialog.open();
        },
        
        _generateMeetingLink: function () {
            // Generate a random meeting ID
            var meetingId = Math.random().toString(36).substring(2, 15) +
                Math.random().toString(36).substring(2, 15);
            
            // Create the meeting link
            var meetingLink = "https://teams.microsoft.com/l/meetup-join/19:meeting_" +
                meetingId +
                "@thread.v2/0?context=%7B%22Tid%22:%2272f988bf-86f1-41af-91ab-2d7cd011db47%22,%22Oid%22:%22b8b4d3c1-8a4f-4c3e-9c3c-1f2e7d1f3e7a%22%7D";
            
            // Set the link in the input field
            var oMeetingLinkInput = sap.ui.getCore().byId("meetingLinkInput");
            if (oMeetingLinkInput) {
                oMeetingLinkInput.setValue(meetingLink);
            }
        },
        
        onMeetingNameChange: function (oEvent) {
            // You can add validation or other logic here if needed
        },
        
        onCopyMeetingLink: function () {
            var oMeetingLinkInput = sap.ui.getCore().byId("meetingLinkInput");
            if (oMeetingLinkInput) {
                var meetingLink = oMeetingLinkInput.getValue();
                
                // Copy to clipboard
                if (navigator.clipboard && navigator.clipboard.writeText) {
                    navigator.clipboard.writeText(meetingLink).then(function () {
                        MessageToast.show("Meeting link copied to clipboard");
                    }).catch(function (err) {
                        console.error('Could not copy text: ', err);
                        // Fallback for browsers that don't support clipboard API
                        that._fallbackCopyToClipboard(meetingLink);
                    });
                } else {
                    // Fallback for older browsers
                    this._fallbackCopyToClipboard(meetingLink);
                }
            }
        },
        
        // Fallback method for copying to clipboard
        _fallbackCopyToClipboard: function (text) {
            var textArea = document.createElement("textarea");
            textArea.value = text;
            textArea.style.position = "fixed";
            document.body.appendChild(textArea);
            textArea.focus();
            textArea.select();
            
            try {
                var successful = document.execCommand('copy');
                if (successful) {
                    MessageToast.show("Meeting link copied to clipboard");
                } else {
                    MessageToast.show("Failed to copy link");
                }
            } catch (err) {
                console.error('Fallback: Could not copy text: ', err);
                MessageToast.show("Failed to copy link");
            }
            
            document.body.removeChild(textArea);
        },
        
        onStartMeeting: function () {
            var oMeetingNameInput = sap.ui.getCore().byId("meetingNameInput");
            var meetingName = oMeetingNameInput ? oMeetingNameInput.getValue() : "Meeting";
            
            // Create a calendar event for the meeting
            this._createMeetingEvent(meetingName);
            
            // Close the dialog
            if (this._oMeetNowDialog) {
                this._oMeetNowDialog.close();
            }
            
            MessageToast.show("Starting meeting: " + meetingName);
            
            // In a real application, you would integrate with your video conferencing API here
            // For demonstration, we'll just show a message and redirect to Teams
            window.open("https://teams.microsoft.com", "_blank");
        },
        
        onCancelMeeting: function () {
            if (this._oMeetNowDialog) {
                this._oMeetNowDialog.close();
            }
            MessageToast.show("Meeting creation cancelled");
        },
        
        _createMeetingEvent: function (meetingName) {
            var oNow = UI5Date.getInstance();
            var oStart = UI5Date.getInstance(oNow);
            var oEnd = UI5Date.getInstance(oStart);
            oEnd.setHours(oEnd.getHours() + 1); // 1 hour meeting
            
            // Get the meeting link
            var oMeetingLinkInput = sap.ui.getCore().byId("meetingLinkInput");
            var meetingLink = oMeetingLinkInput ? oMeetingLinkInput.getValue() : "";
            
            var newAppointment = {
                start: oStart,
                end: oEnd,
                title: meetingName,
                info: "Online Meeting",
                type: "Type01",
                pic: "sap-icon://video",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "Virtual",
                organizerStatus: "sent",
                attendeeStatus: "accepted",
                isOnline: true,
                meetingLink: meetingLink
            };
            
            // Get the model and add the new appointment to the first person's calendar
            var oModel = this.getView().getModel();
            var aPeople = oModel.getProperty("/people");
            
            if (aPeople && aPeople.length > 0) {
                aPeople[0].appointments.push(newAppointment);
                oModel.setProperty("/people", aPeople);
                
                // Refresh the calendar to show the new appointment
                this.byId("calendar").getBinding("rows").refresh(true);
            }
        },
        
        onNewEventPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oNewEventPopover = this.byId("newEventPopover");
            
            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("filterPopover").close();
            
            // Toggle new event popover
            if (!oNewEventPopover.isOpen()) {
                oNewEventPopover.openBy(oButton);
            } else {
                oNewEventPopover.close();
            }
        },
        
        onNotificationPress: function () {
            MessageToast.show("No new notifications");
        },
        
        // Work week menu functionality
        onWorkWeekMenuPress: function (oEvent) {
            var oViewModel = this.getView().getModel("view");
            var bMenuOpen = oViewModel.getProperty("/workWeekMenuOpen");
            
            // Toggle the menu visibility
            oViewModel.setProperty("/workWeekMenuOpen", !bMenuOpen);
            
            // Update the arrow icon direction
            var oButton = this.byId("_IDGenWorkWeekButton");
            oButton.setIcon(!bMenuOpen ? "sap-icon://slim-arrow-down" : "sap-icon://slim-arrow-right");
        },
        
        // Time scale dropdown change handler
        onTimeScaleChange: function (oEvent) {
            var oViewModel = this.getView().getModel("view");
            var oSource = oEvent.getSource();
            var sSelectedKey = oSource.getSelectedKey();
            
            // Extract the number of minutes from the selected key
            var iMinutes = parseInt(sSelectedKey);
            
            // Update the model
            oViewModel.setProperty("/timeScale", iMinutes + " minutes");
            oViewModel.setProperty("/timeScaleMinutes", iMinutes);
            
            // Get current days to show
            var iDays = oViewModel.getProperty("/daysToShow");
            
            // Update the button text to show both days and time scale
            var oButton = this.byId("viewSelectButton");
            oButton.setText("Work week (" + iDays + " days, " + iMinutes + " min)");
            
            // Update the calendar's time scale
            this._updateTimeScale(iMinutes);
            
            // Make sure we're in Work week view
            var oCalendar = this.byId("calendar");
            oCalendar.setViewKey("Workweek");
            oViewModel.setProperty("/currentView", "Work week");
            
            MessageToast.show("Time scale changed to: " + iMinutes + " minutes");
        },
        
        // Days to show dropdown change handler
        onDaysToShowChange: function (oEvent) {
            var oViewModel = this.getView().getModel("view");
            var oSource = oEvent.getSource();
            var iDays = parseInt(oSource.getSelectedKey());
            
            // Update the model
            oViewModel.setProperty("/daysToShow", iDays);
            
            // Get current time scale
            var sTimeScale = oViewModel.getProperty("/timeScale");
            var iMinutes = parseInt(sTimeScale.match(/\d+/)[0]);
            
            // Update the button text to show both days and time scale
            var oButton = this.byId("viewSelectButton");
            oButton.setText("Work week (" + iDays + " days, " + iMinutes + " min)");
            
            // Update the work week view
            this._updateWorkWeekView(iDays);
            
            // Make sure we're in Work week view
            var oCalendar = this.byId("calendar");
            oCalendar.setViewKey("Workweek");
            oViewModel.setProperty("/currentView", "Work week");
            
            MessageToast.show("Work week now shows " + iDays + " days");
        },
        
        // Days dropdown change handler (main view selection)
        onDaysChange: function (oEvent) {
            var oSource = oEvent.getSource();
            var iDays = parseInt(oSource.getSelectedKey());
            
            // Update the model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/daysToShow", iDays);
            
            // Set the current view to Work week
            oViewModel.setProperty("/currentView", "Work week");
            
            // Update the button text
            var oButton = this.byId("viewSelectButton");
            var sTimeScale = oViewModel.getProperty("/timeScale");
            var iMinutes = parseInt(sTimeScale.match(/\d+/)[0]);
            oButton.setText("Work week (" + iDays + " days, " + iMinutes + " min)");
            
            // Update the calendar
            var oCalendar = this.byId("calendar");
            oCalendar.setViewKey("Workweek");
            
            // Update the work week view
            this._updateWorkWeekView(iDays);
            
            // Close the popover
            this.byId("viewPopover").close();
            
            MessageToast.show("Work week now shows " + iDays + " days");
        },
        
        onViewSelected: function (oEvent) {
            var sSelectedView = oEvent.getParameter("listItem").getTitle();
            var oButton = this.byId("viewSelectButton");
            var oCalendar = this.byId("calendar");
            var oViewModel = this.getView().getModel("view");
            
            // Close the popover first
            this.byId("viewPopover").close();
            
            // Handle regular view selection
            if (sSelectedView === "Work week") {
                oButton.setText(sSelectedView);
                oViewModel.setProperty("/currentView", sSelectedView);
                
                // Update calendar view
                oCalendar.setViewKey("Workweek");
                
                // Get current settings
                var iDaysToShow = oViewModel.getProperty("/daysToShow");
                var sTimeScale = oViewModel.getProperty("/timeScale");
                var iMinutes = parseInt(sTimeScale.match(/\d+/)[0]);
                
                // Update button text to show both days and time scale
                oButton.setText("Work week (" + iDaysToShow + " days, " + iMinutes + " min)");
                
                // Update the work week view and time scale
                this._updateWorkWeekView(iDaysToShow);
                this._updateTimeScale(iMinutes);
                
                MessageToast.show("View changed to: " + sSelectedView);
            } else if (sSelectedView === "Week") {
                oButton.setText(sSelectedView);
                oViewModel.setProperty("/currentView", sSelectedView);
                
                // Update calendar view
                oCalendar.setViewKey("Week");
                
                // Force refresh to ensure proper rendering
                oCalendar.rerender();
                
                MessageToast.show("View changed to: " + sSelectedView);
            } else if (sSelectedView === "Month") {
                oButton.setText(sSelectedView);
                oViewModel.setProperty("/currentView", sSelectedView);
                
                // Update calendar view
                oCalendar.setViewKey("Month");
                
                // Force refresh to ensure proper rendering
                oCalendar.rerender();
                
                MessageToast.show("View changed to: " + sSelectedView);
            } else if (sSelectedView === "Split view") {
                MessageToast.show("Split view feature coming soon");
            }
        },
        
        _switchCalendarView: function (sViewKey) {
            var oCalendar = this.byId("calendar");
            var oViewModel = this.getView().getModel("view");
            
            // Set the view key
            oCalendar.setViewKey(sViewKey);
            
            // Update the current view in the model
            oViewModel.setProperty("/currentView", sViewKey);
            
            // Force a rerender to ensure proper display
            oCalendar.rerender();
        },
        
        _updateTimeScale: function (iMinutes) {
            var oCalendar = this.byId("calendar");
            var oViewModel = this.getView().getModel("view");
            var sCurrentView = oViewModel.getProperty("/currentView");
            
            // Only update time scale for Day and Work week views
            if (sCurrentView === "Day" || sCurrentView === "Work week") {
                var oView = oCalendar.getViews().find(function (view) {
                    return view.getKey() === (sCurrentView === "Work week" ? "Workweek" : sCurrentView);
                });
                
                if (oView) {
                    // Calculate the number of intervals based on the selected minutes
                    var iTotalMinutes = 24 * 60; // 24 hours in minutes
                    var iIntervals = iTotalMinutes / iMinutes;
                    
                    // Update the view settings
                    oView.setIntervalsS(iIntervals);
                    oView.setIntervalsM(iIntervals);
                    oView.setIntervalsL(iIntervals);
                    oView.setIntervalType("Minute");
                    
                    // Refresh the calendar
                    oCalendar.rerender();
                }
            }
        },
        
        _updateWorkWeekView: function (iDays) {
            var oCalendar = this.byId("calendar");
            var oView = oCalendar.getViews().find(function (view) {
                return view.getKey() === "Workweek";
            });
            
            if (oView) {
                // Update the number of days to show
                oView.setIntervalsS(iDays);
                oView.setIntervalsM(iDays);
                oView.setIntervalsL(iDays);
                
                // Refresh the calendar
                oCalendar.rerender();
            }
        },
        
        onSavedViewsPress: function () {
            MessageToast.show("Saved views feature coming soon");
        },
        
        onNewEventTypeSelected: function (oEvent) {
            var sEventType = oEvent.getSource().getTitle();
            this.byId("newEventPopover").close();
            
            if (sEventType === "Channel meeting") {
                this._openChannelMeetingDialog();
            } else if (sEventType === "Event") {
                this._openRemarksDialog();
            } else if (sEventType === "Virtual appointment") {
                this._openVirtualAppointmentDialog();
            } else {
                MessageToast.show("Creating new: " + sEventType);
            }
        },
        
        // Open the Channel Meeting Dialog
        _openChannelMeetingDialog: function () {
            var that = this;
            
            if (!this._oChannelMeetingDialog) {
                Fragment.load({
                    id: this.getView().getId(),
                    name: "com.capexrevex.capexrevex.view.fragments.ChannelMeetingDialog",
                    controller: this
                }).then(function (oDialog) {
                    that._oChannelMeetingDialog = oDialog;
                    that.getView().addDependent(that._oChannelMeetingDialog);
                    
                    // Set default values for new channel meeting
                    that._setDefaultChannelMeetingValues();
                    
                    // Set the model for the fragment
                    that._oChannelMeetingDialog.setModel(that.getView().getModel());
                    that._oChannelMeetingDialog.setModel(that.getView().getModel("attendees"), "attendees");
                    
                    that._oChannelMeetingDialog.open();
                }).catch(function (error) {
                    console.error("Error loading channel meeting dialog:", error);
                    MessageToast.show("Error loading meeting dialog");
                });
            } else {
                // Set default values for the meeting
                this._setDefaultChannelMeetingValues();
                
                // Set the model for the fragment
                this._oChannelMeetingDialog.setModel(this.getView().getModel());
                this._oChannelMeetingDialog.setModel(this.getView().getModel("attendees"), "attendees");
                
                this._oChannelMeetingDialog.open();
            }
        },
        
        // Open the Virtual Appointment Dialog
        _openVirtualAppointmentDialog: function () {
            var that = this;
            
            if (!this._oVirtualAppointmentDialog) {
                Fragment.load({
                    id: this.getView().getId(),
                    name: "com.capexrevex.capexrevex.view.fragments.VirtualAppointmentDialog",
                    controller: this
                }).then(function (oDialog) {
                    that._oVirtualAppointmentDialog = oDialog;
                    that.getView().addDependent(that._oVirtualAppointmentDialog);
                    
                    // Set default values for virtual appointment
                    that._setDefaultVirtualAppointmentValues();
                    
                    // Set the model for the fragment
                    that._oVirtualAppointmentDialog.setModel(that.getView().getModel());
                    that._oVirtualAppointmentDialog.setModel(that.getView().getModel("attendees"), "attendees");
                    
                    that._oVirtualAppointmentDialog.open();
                }).catch(function (error) {
                    console.error("Error loading virtual appointment dialog:", error);
                    MessageToast.show("Error loading virtual appointment dialog");
                });
            } else {
                // Set default values for the appointment
                this._setDefaultVirtualAppointmentValues();
                
                // Set the model for the fragment
                this._oVirtualAppointmentDialog.setModel(this.getView().getModel());
                this._oVirtualAppointmentDialog.setModel(this.getView().getModel("attendees"), "attendees");
                
                this._oVirtualAppointmentDialog.open();
            }
        },
        
        _setDefaultChannelMeetingValues: function () {
            // Set default date and time (current date, 3:00 PM to 3:30 PM)
            var oNow = UI5Date.getInstance();
            var oStart = UI5Date.getInstance(oNow);
            oStart.setHours(15, 0, 0, 0); // 3:00 PM
            
            var oEnd = UI5Date.getInstance(oStart);
            oEnd.setHours(15, 30, 0, 0); // 3:30 PM
            
            // Set values in the dialog if it exists
            if (this._oChannelMeetingDialog) {
                var oStartDate = sap.ui.getCore().byId("startDate");
                var oStartTime = sap.ui.getCore().byId("startTime");
                var oEndDate = sap.ui.getCore().byId("endDate");
                var oEndTime = sap.ui.getCore().byId("endTime");
                
                if (oStartDate) oStartDate.setDateValue(oStart);
                if (oStartTime) oStartTime.setDateValue(oStart);
                if (oEndDate) oEndDate.setDateValue(oEnd);
                if (oEndTime) oEndTime.setDateValue(oEnd);
            }
        },
        
        _setDefaultVirtualAppointmentValues: function () {
            // Set default date and time (current date, 4:30 PM to 5:00 PM)
            var oNow = UI5Date.getInstance();
            var oStart = UI5Date.getInstance(oNow);
            oStart.setHours(16, 30, 0, 0); // 4:30 PM
            
            var oEnd = UI5Date.getInstance(oStart);
            oEnd.setHours(17, 0, 0, 0); // 5:00 PM
            
            // Set values in the dialog if it exists
            if (this._oVirtualAppointmentDialog) {
                var oStartDate = sap.ui.getCore().byId("virtualStartDate");
                var oStartTime = sap.ui.getCore().byId("virtualStartTime");
                var oEndDate = sap.ui.getCore().byId("virtualEndDate");
                var oEndTime = sap.ui.getCore().byId("virtualEndTime");
                
                if (oStartDate) oStartDate.setDateValue(oStart);
                if (oStartTime) {
                    oStartTime.setDateValue(oStart);
                    // Set minutes step based on current time scale
                    var oViewModel = this.getView().getModel("view");
                    var iMinutes = oViewModel.getProperty("/timeScaleMinutes");
                    oStartTime.setMinutesStep(iMinutes);
                }
                
                if (oEndDate) oEndDate.setDateValue(oEnd);
                if (oEndTime) {
                    oEndTime.setDateValue(oEnd);
                    // Set minutes step based on current time scale
                    var oViewModel = this.getView().getModel("view");
                    var iMinutes = oViewModel.getProperty("/timeScaleMinutes");
                    oEndTime.setMinutesStep(iMinutes);
                }
                
                // Set default recurrence to "none"
                var oRecurrenceSelect = sap.ui.getCore().byId("virtualRecurrence");
                if (oRecurrenceSelect) {
                    oRecurrenceSelect.setSelectedKey("none");
                }
            }
        },
        
        // Save Channel Meeting
        onSaveChannelMeeting: function () {
            try {
                // Get values from the dialog
                var sTitle = sap.ui.getCore().byId("meetingTitle").getValue();
                
                // Get required attendees
                var oRequiredAttendees = sap.ui.getCore().byId("requiredAttendees");
                var aRequiredTokens = oRequiredAttendees.getTokens();
                var sRequiredAttendees = aRequiredTokens.map(function (oToken) {
                    return oToken.getKey();
                }).join("; ");
                
                // Get optional attendees
                var oOptionalAttendees = sap.ui.getCore().byId("optionalAttendees");
                var aOptionalTokens = oOptionalAttendees.getTokens();
                var sOptionalAttendees = aOptionalTokens.map(function (oToken) {
                    return oToken.getKey();
                }).join("; ");
                
                // Get date and time values properly
                var oStartDateControl = sap.ui.getCore().byId("startDate");
                var oStartTimeControl = sap.ui.getCore().byId("startTime");
                var oEndDateControl = sap.ui.getCore().byId("endDate");
                var oEndTimeControl = sap.ui.getCore().byId("endTime");
                
                var oStartDate = oStartDateControl ? oStartDateControl.getDateValue() : null;
                var oStartTime = oStartTimeControl ? oStartTimeControl.getDateValue() : null;
                var oEndDate = oEndDateControl ? oEndDateControl.getDateValue() : null;
                var oEndTime = oEndTimeControl ? oEndTimeControl.getDateValue() : null;
                
                var bAllDay = sap.ui.getCore().byId("allDayCheckbox").getSelected();
                var sChannel = sap.ui.getCore().byId("channelInput").getValue();
                var sLocation = sap.ui.getCore().byId("locationInput").getValue();
                var bOnlineMeeting = sap.ui.getCore().byId("onlineMeetingCheckbox").getSelected();
                var sDetails = sap.ui.getCore().byId("meetingDetails").getValue();
                var sAgenda = sap.ui.getCore().byId("meetingAgenda").getValue();
                
                // Validate required fields
                if (!sTitle) {
                    MessageToast.show("Please enter a title for the meeting");
                    return;
                }
                
                // Validate date controls exist
                if (!oStartDate || !oEndDate) {
                    MessageToast.show("Please select valid dates");
                    return;
                }
                
                // Combine date and time
                var oStart = new Date(oStartDate);
                if (!bAllDay && oStartTime) {
                    oStart.setHours(oStartTime.getHours(), oStartTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oStart.setHours(0, 0, 0, 0);
                }
                
                var oEnd = new Date(oEndDate);
                if (!bAllDay && oEndTime) {
                    oEnd.setHours(oEndTime.getHours(), oEndTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oEnd.setHours(23, 59, 59, 999);
                }
                
                // Validate that end time is after start time
                if (oEnd <= oStart) {
                    MessageToast.show("End time must be after start time");
                    return;
                }
                
                // Create the new appointment object
                var newAppointment = {
                    start: oStart,
                    end: oEnd,
                    title: sTitle,
                    info: "Channel: " + sChannel + (sLocation ? " | Location: " + sLocation : ""),
                    type: "Type01",
                    pic: "sap-icon://group",
                    requiredAttendees: sRequiredAttendees,
                    optionalAttendees: sOptionalAttendees,
                    details: sDetails,
                    agenda: sAgenda,
                    allDay: bAllDay,
                    onlineMeeting: bOnlineMeeting,
                    category: "Meeting",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: bOnlineMeeting ? "Virtual" : "In-person",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted"
                };
                
                // Get the model and add the new appointment to the first person's calendar
                var oModel = this.getView().getModel();
                var aPeople = oModel.getProperty("/people");
                
                if (aPeople && aPeople.length > 0) {
                    // Add to the first person's appointments
                    aPeople[0].appointments.push(newAppointment);
                    
                    // Update the model
                    oModel.setProperty("/people", aPeople);
                    
                    // Show success message
                    MessageToast.show("Channel meeting '" + sTitle + "' has been created");
                    
                    // Close the dialog
                    this._oChannelMeetingDialog.close();
                    
                    // Refresh the calendar to show the new appointment
                    this.byId("calendar").getBinding("rows").refresh(true);
                } else {
                    MessageToast.show("Error: Could not find calendar to add meeting");
                }
            } catch (error) {
                console.error("Error saving channel meeting:", error);
                MessageToast.show("Error creating meeting. Please try again.");
            }
        },
        
        // Save Virtual Appointment
        onSaveVirtualAppointment: function () {
            try {
                // Get values from the dialog
                var sTitle = sap.ui.getCore().byId("virtualTitle").getValue();
                var sGuestName = sap.ui.getCore().byId("guestName").getValue();
                var sGuestEmail = sap.ui.getCore().byId("guestEmail").getValue();
                
                // Get internal attendees
                var oInternalAttendees = sap.ui.getCore().byId("internalAttendees");
                var aInternalTokens = oInternalAttendees.getTokens();
                var sInternalAttendees = aInternalTokens.map(function (oToken) {
                    return oToken.getKey();
                }).join("; ");
                
                // Get date and time values properly
                var oStartDateControl = sap.ui.getCore().byId("virtualStartDate");
                var oStartTimeControl = sap.ui.getCore().byId("virtualStartTime");
                var oEndDateControl = sap.ui.getCore().byId("virtualEndDate");
                var oEndTimeControl = sap.ui.getCore().byId("virtualEndTime");
                
                var oStartDate = oStartDateControl ? oStartDateControl.getDateValue() : null;
                var oStartTime = oStartTimeControl ? oStartTimeControl.getDateValue() : null;
                var oEndDate = oEndDateControl ? oEndDateControl.getDateValue() : null;
                var oEndTime = oEndTimeControl ? oEndTimeControl.getDateValue() : null;
                
                var bAllDay = sap.ui.getCore().byId("virtualAllDay").getSelected();
                var sLocation = sap.ui.getCore().byId("virtualLocation").getValue();
                var sPresenterOptions = sap.ui.getCore().byId("presenterOptions").getSelectedKey();
                var bRecordAutomatically = sap.ui.getCore().byId("recordAutomatically").getSelected();
                var sMeetingChat = sap.ui.getCore().byId("meetingChat").getSelectedKey();
                var sMessage = sap.ui.getCore().byId("virtualMessage").getValue();
                
                // Validate required fields
                if (!sTitle) {
                    MessageToast.show("Please enter a title for the appointment");
                    return;
                }
                
                if (!sGuestName || !sGuestEmail) {
                    MessageToast.show("Please enter guest name and email");
                    return;
                }
                
                // Validate date controls exist
                if (!oStartDate || !oEndDate) {
                    MessageToast.show("Please select valid dates");
                    return;
                }
                
                // Combine date and time
                var oStart = new Date(oStartDate);
                if (!bAllDay && oStartTime) {
                    oStart.setHours(oStartTime.getHours(), oStartTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oStart.setHours(0, 0, 0, 0);
                }
                
                var oEnd = new Date(oEndDate);
                if (!bAllDay && oEndTime) {
                    oEnd.setHours(oEndTime.getHours(), oEndTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oEnd.setHours(23, 59, 59, 999);
                }
                
                // Validate that end time is after start time
                if (oEnd <= oStart) {
                    MessageToast.show("End time must be after start time");
                    return;
                }
                
                // Create the new appointment object
                var newAppointment = {
                    start: oStart,
                    end: oEnd,
                    title: sTitle,
                    info: "Virtual Appointment with " + sGuestName + " (" + sGuestEmail + ")",
                    type: "Type01",
                    pic: "sap-icon://video",
                    internalAttendees: sInternalAttendees,
                    location: sLocation,
                    presenterOptions: sPresenterOptions,
                    recordAutomatically: bRecordAutomatically,
                    meetingChat: sMeetingChat,
                    message: sMessage,
                    allDay: bAllDay,
                    isVirtual: true,
                    category: "Appointment",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: "Virtual",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted"
                };
                
                // Get the model and add the new appointment to the first person's calendar
                var oModel = this.getView().getModel();
                var aPeople = oModel.getProperty("/people");
                
                if (aPeople && aPeople.length > 0) {
                    // Add to the first person's appointments
                    aPeople[0].appointments.push(newAppointment);
                    
                    // Update the model
                    oModel.setProperty("/people", aPeople);
                    
                    // Show success message
                    MessageToast.show("Virtual appointment '" + sTitle + "' has been created");
                    
                    // Close the dialog
                    this._oVirtualAppointmentDialog.close();
                    
                    // Refresh the calendar to show the new appointment
                    this.byId("calendar").getBinding("rows").refresh(true);
                } else {
                    MessageToast.show("Error: Could not find calendar to add appointment");
                }
            } catch (error) {
                console.error("Error saving virtual appointment:", error);
                MessageToast.show("Error creating appointment. Please try again.");
            }
        },
        
        // Cancel Channel Meeting
        onCancelChannelMeeting: function () {
            // Close the dialog without saving
            if (this._oChannelMeetingDialog) {
                this._oChannelMeetingDialog.close();
            }
            MessageToast.show("Channel meeting creation cancelled");
        },
        
        // Cancel Virtual Appointment
        onCancelVirtualAppointment: function () {
            // Close the dialog without saving
            if (this._oVirtualAppointmentDialog) {
                this._oVirtualAppointmentDialog.close();
            }
            MessageToast.show("Virtual appointment creation cancelled");
        },
        
        // Add additional guest
        onAddGuest: function () {
            MessageToast.show("Additional guest feature coming soon");
        },
        
        // Handle All Day checkbox changes
        onAllDayChange: function (oEvent) {
            var bAllDay = oEvent.getParameter("state");
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent/allDay", bAllDay);
            
            if (bAllDay) {
                var oStart = new Date(oViewModel.getProperty("/selectedEvent/start"));
                oStart.setHours(0, 0, 0, 0);
                oViewModel.setProperty("/selectedEvent/start", oStart);
                
                var oEnd = new Date(oViewModel.getProperty("/selectedEvent/end"));
                oEnd.setHours(23, 59, 59, 999);
                oViewModel.setProperty("/selectedEvent/end", oEnd);
            } else {
                var oStart = new Date(oViewModel.getProperty("/selectedEvent/start"));
                if (oStart.getHours() === 0) {
                    oStart.setHours(10, 0, 0, 0);
                }
                oViewModel.setProperty("/selectedEvent/start", oStart);
                
                var oEnd = new Date(oViewModel.getProperty("/selectedEvent/end"));
                if (oEnd.getHours() === 23) {
                    oEnd.setHours(10, 30, 0, 0);
                }
                oViewModel.setProperty("/selectedEvent/end", oEnd);
            }
        },
        
        onStartDateChange: function (oEvent) {
            var oDate = oEvent.getSource().getDateValue();
            if (!oDate) return;
            
            var oViewModel = this.getView().getModel("view");
            var oStart = new Date(oViewModel.getProperty("/selectedEvent/start"));
            oStart.setFullYear(oDate.getFullYear(), oDate.getMonth(), oDate.getDate());
            oViewModel.setProperty("/selectedEvent/start", oStart);
        },
        
        onStartTimeChange: function (oEvent) {
            var oTime = oEvent.getSource().getDateValue();
            if (!oTime) return;
            
            var oViewModel = this.getView().getModel("view");
            var oStart = new Date(oViewModel.getProperty("/selectedEvent/start"));
            oStart.setHours(oTime.getHours(), oTime.getMinutes(), 0, 0);
            oViewModel.setProperty("/selectedEvent/start", oStart);
        },
        
        onEndDateChange: function (oEvent) {
            var oDate = oEvent.getSource().getDateValue();
            if (!oDate) return;
            
            var oViewModel = this.getView().getModel("view");
            var oEnd = new Date(oViewModel.getProperty("/selectedEvent/end"));
            oEnd.setFullYear(oDate.getFullYear(), oDate.getMonth(), oDate.getDate());
            oViewModel.setProperty("/selectedEvent/end", oEnd);
        },
        
        onEndTimeChange: function (oEvent) {
            var oTime = oEvent.getSource().getDateValue();
            if (!oTime) return;
            
            var oViewModel = this.getView().getModel("view");
            var oEnd = new Date(oViewModel.getProperty("/selectedEvent/end"));
            oEnd.setHours(oTime.getHours(), oTime.getMinutes(), 0, 0);
            oViewModel.setProperty("/selectedEvent/end", oEnd);
        },
        
        onMoreOptionsPress: function () {
            MessageToast.show("More options coming soon");
        },
        
        // Modified onAppointmentSelect method
        onAppointmentSelect: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment");
            var oBindingContext = oAppointment.getBindingContext();
            
            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("filterPopover").close();
            this.byId("newEventPopover").close();
            
            // Get appointment data
            var oAppointmentData = oBindingContext.getObject();
            
            // Extract attendees from appointment
            var aAttendees = this._extractAttendeesFromAppointment(oAppointmentData);
            var sTitle = oAppointmentData.title;
            
            if (sTitle === "new appointment") {
                sTitle = "";
            }
            
            // Update selected event in model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", {
                title: sTitle,
                start: oAppointmentData.start,
                end: oAppointmentData.end,
                location: oAppointmentData.info || "",
                description: oAppointmentData.description || "",
                allDay: oAppointmentData.allDay || false,
                attendees: aAttendees
            });
            
            oViewModel.setProperty("/selectedEventPath", oBindingContext.getPath());
            
            // Open event details popover using the new fragment
            this._openEventDetailsPopover(oEvent.getParameter("domRef"));
        },
        
        // Modified onIntervalSelect method
        onIntervalSelect: function (oEvent) {
            var oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                oRow = oEvent.getParameter("row"),
                oModel = this.getView().getModel(),
                oAppointment = {
                    start: oStartDate,
                    end: oEndDate,
                    title: "new appointment",
                    info: "",
                    type: "Type01",
                    location: "",
                    description: "",
                    allDay: false,
                    attendees: "",
                    category: "Appointment",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: "In-person",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted"
                };
            
            var oRowContext = oRow.getBindingContext();
            var sPath = oRowContext.getPath() + "/appointments";
            var aAppointments = oModel.getProperty(sPath) || [];
            
            aAppointments.push(oAppointment);
            oModel.setProperty(sPath, aAppointments);
            
            MessageToast.show("New appointment created. Click on it to edit.");
        },
        
        // Add this method to open the event details popover
        _openEventDetailsPopover: function (oSource) {
            var that = this;
            
            // Load the fragment if not already loaded
            if (!this._oEventDetailsPopover) {
                Fragment.load({
                    id: this.getView().getId(),
                    name: "com.capexrevex.capexrevex.view.fragments.EventDetailsDialog",
                    controller: this
                }).then(function (oPopover) {
                    that._oEventDetailsPopover = oPopover;
                    that.getView().addDependent(that._oEventDetailsPopover);
                    
                    // Set the model for the fragment
                    that._oEventDetailsPopover.setModel(that.getView().getModel("view"), "view");
                    that._oEventDetailsPopover.setModel(that.getView().getModel("attendees"), "attendees");
                    
                    that._oEventDetailsPopover.openBy(oSource);
                    that._setAttendeesTokens();
                }).catch(function (error) {
                    console.error("Error loading event details dialog:", error);
                    MessageToast.show("Error loading event details");
                });
            } else {
                // Set the model for the fragment
                this._oEventDetailsPopover.setModel(this.getView().getModel("view"), "view");
                this._oEventDetailsPopover.setModel(this.getView().getModel("attendees"), "attendees");
                
                this._oEventDetailsPopover.openBy(oSource);
                this._setAttendeesTokens();
            }
        },
        
        _setAttendeesTokens: function () {
            var oViewModel = this.getView().getModel("view");
            var sAttendees = oViewModel.getProperty("/selectedEvent/attendees") || "";
            var oMultiInput = sap.ui.getCore().byId("eventAttendees");
            
            if (oMultiInput) {
                oMultiInput.destroyTokens();
                var aAttendees = this._parseAttendees(sAttendees);
                
                aAttendees.forEach(function (oAttendee) {
                    var oToken = new Token({
                        key: oAttendee.email,
                        text: oAttendee.name
                    });
                    oMultiInput.addToken(oToken);
                });
            }
        },
        
        // Extract attendees from appointment data
        _extractAttendeesFromAppointment: function (oAppointment) {
            var aAttendees = [];
            
            // Handle different appointment types
            if (oAppointment.requiredAttendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.requiredAttendees));
            }
            
            if (oAppointment.optionalAttendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.optionalAttendees));
            }
            
            if (oAppointment.internalAttendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.internalAttendees));
            }
            
            if (oAppointment.guestEmail) {
                aAttendees.push({
                    name: oAppointment.guestName || oAppointment.guestEmail,
                    email: oAppointment.guestEmail,
                    status: "Free"
                });
            }
            
            if (oAppointment.attendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.attendees));
            }
            
            return aAttendees;
        },
        
        // Parse attendees string into objects
        _parseAttendees: function (sAttendees) {
            if (!sAttendees) return [];
            
            return sAttendees.split('; ').map(function (sAttendee) {
                sAttendee = sAttendee.trim();
                if (sAttendee) {
                    return {
                        name: sAttendee,
                        email: sAttendee,
                        status: "Free"
                    };
                }
                return null;
            }).filter(Boolean);
        },
        
        // Modified onSaveEvent method to handle attendees
        onSaveEvent: function () {
            var oViewModel = this.getView().getModel("view");
            var sPath = oViewModel.getProperty("/selectedEventPath");
            
            if (!sPath) {
                MessageToast.show("Error saving event");
                return;
            }
            
            var oModel = this.getView().getModel();
            var sTitle = oViewModel.getProperty("/selectedEvent/title");
            var oStart = oViewModel.getProperty("/selectedEvent/start");
            var oEnd = oViewModel.getProperty("/selectedEvent/end");
            var bAllDay = oViewModel.getProperty("/selectedEvent/allDay");
            var sLocation = oViewModel.getProperty("/selectedEvent/location");
            var sDescription = oViewModel.getProperty("/selectedEvent/description");
            
            // Get attendees from the MultiInput
            var oAttendeesInput = sap.ui.getCore().byId("eventAttendees");
            var aTokens = oAttendeesInput.getTokens();
            var sAttendees = aTokens.map(function (oToken) {
                return oToken.getKey();
            }).join("; ");
            
            // Validate required fields
            if (!sTitle) {
                MessageToast.show("Please enter a title for the event");
                return;
            }
            
            if (!oStart || !oEnd) {
                MessageToast.show("Please enter valid start and end dates");
                return;
            }
            
            // Validate that end time is after start time
            if (oEnd <= oStart) {
                MessageToast.show("End time must be after start time");
                return;
            }
            
            // Update the model via path
            oModel.setProperty(sPath + "/title", sTitle);
            oModel.setProperty(sPath + "/start", oStart);
            oModel.setProperty(sPath + "/end", oEnd);
            oModel.setProperty(sPath + "/allDay", bAllDay);
            oModel.setProperty(sPath + "/info", sLocation);
            oModel.setProperty(sPath + "/location", sLocation);
            oModel.setProperty(sPath + "/description", sDescription);
            oModel.setProperty(sPath + "/attendees", sAttendees);
            
            MessageToast.show("Event saved successfully");
            
            // Close the popover
            if (this._oEventDetailsPopover) {
                this._oEventDetailsPopover.close();
            }
            
            // Refresh the calendar
            this.byId("calendar").getBinding("rows").refresh();
        },
        
        // Modified onDiscardEvent method
        onDiscardEvent: function () {
            // Close the popover without saving
            if (this._oEventDetailsPopover) {
                this._oEventDetailsPopover.close();
            }
            MessageToast.show("Changes discarded");
        },
        
        // Fragment handling functions
        _openRemarksDialog: function () {
            var that = this;
            
            if (!this._oRemarksDialog) {
                Fragment.load({
                    id: this.getView().getId(),
                    name: "com.capexrevex.capexrevex.view.fragments.RemarksDialog",
                    controller: this
                }).then(function (oDialog) {
                    that._oRemarksDialog = oDialog;
                    that.getView().addDependent(that._oRemarksDialog);
                    
                    // Set default values for new event (current date from 4:00 PM to 4:30 PM)
                    var oEventDate = UI5Date.getInstance();
                    oEventDate.setHours(16, 0, 0, 0); // 4:00 PM
                    
                    var oEnd = UI5Date.getInstance(oEventDate);
                    oEnd.setHours(16, 30, 0, 0); // 4:30 PM
                    
                    var oViewModel = that.getView().getModel("view");
                    oViewModel.setProperty("/selectedEvent", {
                        title: "",
                        start: oEventDate,
                        end: oEnd,
                        info: "",
                        type: "Type01",
                        icon: "",
                        attendees: [],
                        isNew: true // Flag to indicate it's a new appointment
                    });
                    
                    that._oRemarksDialog.open();
                }).catch(function (error) {
                    console.error("Error loading remarks dialog:", error);
                    MessageToast.show("Error loading event dialog");
                });
            } else {
                // Set default values for new event (current date from 4:00 PM to 4:30 PM)
                var oEventDate = UI5Date.getInstance();
                oEventDate.setHours(16, 0, 0, 0); // 4:00 PM
                
                var oEnd = UI5Date.getInstance(oEventDate);
                oEnd.setHours(16, 30, 0, 0); // 4:30 PM
                
                var oViewModel = this.getView().getModel("view");
                oViewModel.setProperty("/selectedEvent", {
                    title: "",
                    start: oEventDate,
                    end: oEnd,
                    info: "",
                    type: "Type01",
                    icon: "",
                    attendees: [],
                    isNew: true // Flag to indicate it's a new appointment
                });
                
                this._oRemarksDialog.open();
            }
        },
        
        onSaveEventFromDialog: function () {
            var oViewModel = this.getView().getModel("view");
            var oSelectedEvent = oViewModel.getProperty("/selectedEvent");
            
            // Get values from the dialog with proper null checks
            var oTitleControl = sap.ui.getCore().byId("eventTitle");
            var oAttendeesControl = sap.ui.getCore().byId("eventAttendees");
            var oMakeRecurringControl = sap.ui.getCore().byId("makeRecurring");
            var oAllDayControl = sap.ui.getCore().byId("allDay");
            var oInPersonControl = sap.ui.getCore().byId("inPerson");
            var oResponseOptionsControl = sap.ui.getCore().byId("responseOptions");
            var oShowAsControl = sap.ui.getCore().byId("showAs");
            var oDescriptionControl = sap.ui.getCore().byId("eventDescription");
            
            // Get the date and time values with proper null checks
            var oDatePicker = sap.ui.getCore().byId("eventDate");
            var oStartTimePicker = sap.ui.getCore().byId("startTime");
            var oEndTimePicker = sap.ui.getCore().byId("endTime");
            
            // Validate controls exist
            if (!oDatePicker || !oStartTimePicker || !oEndTimePicker) {
                MessageToast.show("Error: Date or time controls not found");
                return;
            }
            
            var oDate = oDatePicker.getDateValue();
            var oStartTime = oStartTimePicker.getDateValue();
            var oEndTime = oEndTimePicker.getDateValue();
            
            // Validate date values
            if (!oDate || !oStartTime || !oEndTime) {
                MessageToast.show("Please enter valid date and time values");
                return;
            }
            
            // Get other values with null checks
            var sTitle = oTitleControl ? oTitleControl.getValue() : "";
            var sAttendees = oAttendeesControl ? oAttendeesControl.getValue() : "";
            var bMakeRecurring = oMakeRecurringControl ? oMakeRecurringControl.getSelected() : false;
            var bAllDay = oAllDayControl ? oAllDayControl.getSelected() : false;
            var bInPerson = oInPersonControl ? oInPersonControl.getSelected() : "";
            var sResponseOption = oResponseOptionsControl ? oResponseOptionsControl.getSelectedKey() : "";
            var sShowAs = oShowAsControl ? oShowAsControl.getSelectedKey() : "";
            var sDescription = oDescriptionControl ? oDescriptionControl.getValue() : "";
            
            // Combine date and start time
            var oStart = new Date(oDate);
            oStart.setHours(oStartTime.getHours(), oStartTime.getMinutes(), 0, 0);
            
            var oEnd = new Date(oDate);
            oEnd.setHours(oEndTime.getHours(), oEndTime.getMinutes(), 0, 0);
            
            // Validate that end time is after start time
            if (oEnd <= oStart) {
                MessageToast.show("End time must be after start time");
                return;
            }
            
            // Create the new appointment object with the title as the main text
            var newAppointment = {
                start: oStart,
                end: oEnd,
                title: sTitle, // Use the actual title here
                info: bInPerson, // This is secondary info
                type: "Type01",
                attendees: sAttendees,
                description: sDescription,
                recurring: bMakeRecurring,
                allDay: bAllDay,
                responseOption: sResponseOption,
                showAs: sShowAs,
                category: "Appointment",
                recurrence: bMakeRecurring ? "Recurring" : "Non-recurring",
                inPerson: bInPerson,
                organizerStatus: "sent",
                attendeeStatus: "accepted"
            };
            
            // Get the model and add the new appointment to the first person's calendar
            var oModel = this.getView().getModel();
            var aPeople = oModel.getProperty("/people");
            
            if (aPeople && aPeople.length > 0) {
                // Add to the first person's appointments
                aPeople[0].appointments.push(newAppointment);
                
                // Update the model
                oModel.setProperty("/people", aPeople);
                
                // Close the dialog
                if (this._oRemarksDialog) {
                    this._oRemarksDialog.close();
                }
                
                // Show success message
                MessageToast.show("Event '" + sTitle + "' has been created");
                
                // Refresh the calendar to show the new appointment
                this.byId("calendar").getBinding("rows").refresh(true);
            }
        },
        
        onCancelEventFromDialog: function () {
            // Close the dialog without saving
            if (this._oRemarksDialog) {
                this._oRemarksDialog.close();
            }
        },
        
        onToggleGroupMode: function () {
            var oViewModel = this.getView().getModel("view");
            var sMode = oViewModel.getProperty("/groupMode");
            oViewModel.setProperty("/groupMode", sMode === "Group" ? "None" : "Group");
            this.byId("calendar").rerender();
        },
        
        // Modified onExit method
        onExit: function () {
            // Clean up all fragments when the controller is destroyed
            if (this._oRemarksDialog) {
                this._oRemarksDialog.destroy();
                this._oRemarksDialog = null;
            }
            
            if (this._oChannelMeetingDialog) {
                this._oChannelMeetingDialog.destroy();
                this._oChannelMeetingDialog = null;
            }
            
            if (this._oVirtualAppointmentDialog) {
                this._oVirtualAppointmentDialog.destroy();
                this._oVirtualAppointmentDialog = null;
            }
            
            if (this._oEventDetailsPopover) {
                this._oEventDetailsPopover.destroy();
                this._oEventDetailsPopover = null;
            }
            
            if (this._oMeetNowDialog) {
                this._oMeetNowDialog.destroy();
                this._oMeetNowDialog = null;
            }
        }
    });
});

UPDATED CODE 6

sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/ui/core/date/UI5Date",
    "sap/ui/core/Fragment",
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/m/Token",
    "sap/ui/model/odata/v2/ODataModel"
], function (Controller, JSONModel, MessageToast, UI5Date, Fragment, Filter, FilterOperator, Token, ODataModel) {
    "use strict";
    return Controller.extend("com.capexrevex.capexrevex.controller.View1", {
        onInit: function () {
            // Set initial view to Work week
            this.byId("viewSelectButton").setText("Work week");
            // Set initial time scale and days to show
            this._updateTimeScale(30);
            this._updateWorkWeekView(5);
            // Get today's date
            var today = UI5Date.getInstance();
            // Set the calendar to start from today
            var startDate = UI5Date.getInstance(
                today.getFullYear(),
                today.getMonth(),
                today.getDate(),
                8, 0 // Start at 8 AM
            );
            // Create appointments starting from today
            var appointments = [];
            // Today's appointments
            appointments.push({
                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 9, 0),
                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 10, 0),
                title: "Team sync",
                info: "Canteen",
                type: "Type07",
                pic: "sap-icon://family-care",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "In-person",
                organizerStatus: "sent",
                attendeeStatus: "accepted"
            });
            appointments.push({
                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 11, 0),
                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 12, 0),
                title: "Client Meeting",
                info: "Conference Room",
                type: "Type01",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "In-person",
                organizerStatus: "sent",
                attendeeStatus: "tentative"
            });
            // Tomorrow's appointments
            var tomorrow = UI5Date.getInstance(today);
            tomorrow.setDate(tomorrow.getDate() + 1);
            appointments.push({
                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 10, 0),
                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 11, 30),
                title: "Project Review",
                info: "In Progress",
                type: "Type01",
                pic: "sap-icon://business-objects-experience",
                category: "Appointment",
                showAs: "Busy",
                recurrence: "Recurring",
                inPerson: "Virtual",
                organizerStatus: "draft",
                attendeeStatus: "notResponded"
            });
            appointments.push({
                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 14, 0),
                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 15, 0),
                title: "Training Session",
                info: "Online",
                type: "Type03",
                pic: "sap-icon://learning-assistant",
                category: "Appointment",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "Virtual",
                organizerStatus: "sent",
                attendeeStatus: "accepted"
            });
            // Day after tomorrow
            var dayAfter = UI5Date.getInstance(tomorrow);
            dayAfter.setDate(dayAfter.getDate() + 1);
            appointments.push({
                start: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 9, 0),
                end: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 10, 0),
                title: "Team Standup",
                info: "Daily meeting",
                type: "Type07",
                pic: "sap-icon://group",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Recurring",
                inPerson: "Hybrid",
                organizerStatus: "sent",
                attendeeStatus: "accepted"
            });
            appointments.push({
                start: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 13, 0),
                end: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 14, 30),
                title: "Lunch with Client",
                info: "Restaurant",
                type: "Type02",
                pic: "sap-icon://food",
                category: "Appointment",
                showAs: "Free",
                recurrence: "Non-recurring",
                inPerson: "In-person",
                organizerStatus: "sent",
                attendeeStatus: "declined"
            });
            // Fourth day
            var fourthDay = UI5Date.getInstance(dayAfter);
            fourthDay.setDate(fourthDay.getDate() + 1);
            appointments.push({
                start: UI5Date.getInstance(fourthDay.getFullYear(), fourthDay.getMonth(), fourthDay.getDate(), 11, 0),
                end: UI5Date.getInstance(fourthDay.getFullYear(), fourthDay.getMonth(), fourthDay.getDate(), 12, 0),
                title: "Product Demo",
                info: "Showcase new features",
                type: "Type04",
                pic: "sap-icon://presentation",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "In-person",
                organizerStatus: "sent",
                attendeeStatus: "followed"
            });
            // Fifth day
            var fifthDay = UI5Date.getInstance(fourthDay);
            fifthDay.setDate(fifthDay.getDate() + 1);
            appointments.push({
                start: UI5Date.getInstance(fifthDay.getFullYear(), fifthDay.getMonth(), fifthDay.getDate(), 10, 0),
                end: UI5Date.getInstance(fifthDay.getFullYear(), fifthDay.getMonth(), fifthDay.getDate(), 11, 30),
                title: "Planning Session",
                info: "Quarterly planning",
                type: "Type05",
                pic: "sap-icon://calendar",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Recurring",
                inPerson: "Virtual",
                organizerStatus: "sent",
                attendeeStatus: "canceled"
            });
            // Initialize the view model with data
            var oViewModel = new JSONModel({
                startDate: startDate,
                people: [
                    {
                        name: "John Doe",
                        role: "Developer",
                        appointments: appointments
                    }
                ],
                selectedEvent: {
                    title: "",
                    start: UI5Date.getInstance(),
                    end: UI5Date.getInstance(),
                    info: "",
                    type: "Type01",
                    isNew: true // Flag to identify new appointments
                },
                filters: {
                    appointments: true,
                    meetings: true,
                    reservations: false,
                    categories: [],
                    showAs: [],
                    recurrence: [],
                    inPerson: [],
                    organizer: {
                        sent: true,
                        draft: true
                    },
                    attendee: {
                        accepted: true,
                        declined: true,
                        followed: true,
                        tentative: true,
                        canceled: true,
                        notResponded: true
                    }
                },
                currentView: "Work week", // Track the current calendar view
                timeScale: "30 minutes", // Track the current time scale
                daysToShow: 5, // Track the number of days to show in work week view
                workWeekMenuOpen: false, // Track if work week submenu is open
                timeScaleMinutes: 30, // Add numeric value for time scale
                groupMode: "Group" // For group appointment mode
            });
            // Create additional model with extended data using UI5Date
            var oModel = new JSONModel();
            oModel.setData({
                startDate: startDate,
                people: [
                    {
                        pic: "sap-icon://hr-approval/",
                        name: "John Miller",
                        role: "team member",
                        appointments: [
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 8, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 9, 0),
                                title: "Team sync",
                                info: "Canteen",
                                type: "Type07",
                                pic: "sap-icon://family-care",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "accepted"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 9, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 11, 0),
                                title: "Morning Sync",
                                info: "I call you",
                                type: "Type01",
                                pic: "sap-icon://call",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Recurring",
                                inPerson: "Virtual",
                                organizerStatus: "sent",
                                attendeeStatus: "tentative"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 10, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 12, 0),
                                title: "Sync Bill",
                                info: "Online",
                                type: "Type03",
                                category: "Appointment",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "Virtual",
                                organizerStatus: "draft",
                                attendeeStatus: "notResponded"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 10, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 13, 0),
                                title: "Check Flights",
                                info: "no room",
                                type: "Type09",
                                pic: "sap-icon://flight",
                                category: "Appointment",
                                showAs: "Free",
                                recurrence: "Non-recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "declined"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 13, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 14, 0),
                                title: "Lunch",
                                info: "canteen",
                                type: "Type05",
                                pic: "sap-icon://private",
                                category: "Appointment",
                                showAs: "Free",
                                recurrence: "Non-recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "accepted"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 18, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 20, 0),
                                title: "Discussion of the plan",
                                info: "Online meeting",
                                type: "Type04",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "Virtual",
                                organizerStatus: "sent",
                                attendeeStatus: "followed"
                            }
                        ]
                    },
                    {
                        pic: "sap-icon://hr-approval",
                        name: "Donna Moore",
                        role: "team member",
                        appointments: [
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 8, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 9, 26),
                                title: "Team sync",
                                info: "Canteen",
                                type: "Type07",
                                pic: "sap-icon://family-care",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "accepted"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 10, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 12, 0),
                                title: "Sync John",
                                info: "Online",
                                type: "Type03",
                                category: "Appointment",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "Virtual",
                                organizerStatus: "draft",
                                attendeeStatus: "notResponded"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 11, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 12, 0),
                                title: "Prep for planning",
                                info: "room 5",
                                type: "Type01",
                                pic: "sap-icon://family-care",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "canceled"
                            }
                        ]
                    },
                    {
                        pic: "sap-icon://hr-approval",
                        name: "Alex Johnson",
                        role: "team member",
                        appointments: [
                            {
                                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 9, 0),
                                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 10, 0),
                                title: "Team sync",
                                info: "Canteen",
                                type: "Type07",
                                pic: "sap-icon://family-care",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "accepted"
                            },
                            {
                                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 10, 0),
                                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 12, 0),
                                title: "Project Planning",
                                info: "Conference Room",
                                type: "Type01",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "tentative"
                            },
                            {
                                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 14, 0),
                                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 15, 0),
                                title: "Client Call",
                                info: "Online",
                                type: "Type03",
                                category: "Appointment",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "Virtual",
                                organizerStatus: "draft",
                                attendeeStatus: "notResponded"
                            }
                        ]
                    },
                    {
                        pic: "sap-icon://hr-approval",
                        name: "Sarah Williams",
                        role: "team member",
                        appointments: [
                            {
                                start: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 9, 0),
                                end: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 10, 0),
                                title: "Team sync",
                                info: "Canteen",
                                type: "Type07",
                                pic: "sap-icon://family-care",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "accepted"
                            },
                            {
                                start: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 11, 0),
                                end: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 12, 30),
                                title: "Design Review",
                                info: "Conference Room",
                                type: "Type01",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "declined"
                            }
                        ]
                    }
                ]
            });
            // Set both models to the view
            this.getView().setModel(oViewModel, "view");
            this.getView().setModel(oModel);
            // Initialize filter arrays
            this._aFilters = [];
            // Update date display in filter popover
            this._updateDateDisplay();
            // Set initial view to Work week
            this.byId("viewSelectButton").setText("Work week");
            // Set initial time scale and days to show
            this._updateTimeScale(30);
            this._updateWorkWeekView(5);
            // Create attendees model with proper structure
            var oAttendeesModel = new JSONModel({
                attendees: [
                    { name: "Ankit Jha", email: "ankit.jha@sumodigitech.com", status: "Free" },
                    { name: "Vikrant Raj", email: "vikrant.raj@sumodigitech.com", status: "Free" },
                    { name: "Pushpak Jha", email: "pushpak.jha@sumodigitech.com", status: "Busy" },
                    { name: "Pushkar Kumar Jha", email: "pushkar.jha@sumodigitech.com", status: "Tentative" },
                    { name: "Sumit Jhaldiyal", email: "sumit.jhaldiyal@sumodigitech.com", status: "Free" },
                    { name: "Mohd Aakib", email: "mohd.aakib@sumodigitech.com", status: "Free" },
                    { name: "Vikash Ojha", email: "vikash.ojha@sumodigitech.com", status: "Free" },
                    { name: "Yugal Kishore", email: "yugal.kishore@sumodigitech.com", status: "Busy" },
                ]
            });
            this.getView().setModel(oAttendeesModel, "attendees");
            // Initialize OData model for scheduling service
            var oSchedulingModel = new ODataModel({
                serviceUrl: "/schedulingservice/",
                useBatch: false
            });
            this.getView().setModel(oSchedulingModel, "scheduling");
            // Load attendees data
            this._loadAttendees();
        },
        // Load attendees from scheduling service
        _loadAttendees: function () {
            var oSchedulingModel = this.getView().getModel("scheduling");
            var oAttendeesModel = this.getView().getModel("attendees");
            var that = this;
            oSchedulingModel.read("/MeetingSchedulingSet", {
                success: function (oData) {
                    var aAttendees = [];
                    if (oData && oData.results) {
                        oData.results.forEach(function (oAttendee) {
                            aAttendees.push({
                                id: oAttendee.AttendeeID,
                                name: oAttendee.AttendeeName,
                                email: oAttendee.AttendeeEmail,
                                role: oAttendee.Role || "Attendee",
                                status: oAttendee.Status || "Free"
                            });
                        });
                    }
                    oAttendeesModel.setProperty("/attendees", aAttendees);
                    MessageToast.show("Attendees loaded successfully: " + aAttendees.length + " found");
                },
                error: function (oError) {
                    console.error("Error loading attendees:", oError);
                    MessageToast.show("Error loading attendees from service");
                }
            });
        },
        // Handle attendee suggestions in MultiInput
        onAttendeeSuggest: function (oEvent) {
            var sTerm = oEvent.getParameter("suggestValue");
            var oMultiInput = oEvent.getSource();
            var oAttendeesModel = this.getView().getModel("attendees");
            if (!oAttendeesModel) {
                return;
            }
            var aAttendees = oAttendeesModel.getProperty("/attendees") || [];
            var aFilteredAttendees = [];
            if (sTerm) {
                // Filter attendees based on search term
                aFilteredAttendees = aAttendees.filter(function (oAttendee) {
                    return oAttendee.name.toLowerCase().includes(sTerm.toLowerCase()) ||
                        oAttendee.email.toLowerCase().includes(sTerm.toLowerCase());
                });
            } else {
                aFilteredAttendees = aAttendees;
            }
            // Update suggestion items
            oMultiInput.destroySuggestionItems();
            aFilteredAttendees.forEach(function (oAttendee) {
                // Create a custom suggestion item with name, email, and status
                var oSuggestionItem = new sap.m.SuggestionItem({
                    key: oAttendee.email,
                    text: oAttendee.name,
                    description: oAttendee.email,
                    additionalText: oAttendee.status
                });
                // Set different icons based on status
                switch (oAttendee.status.toLowerCase()) {
                    case "free":
                        oSuggestionItem.setIcon("sap-icon://accept");
                        break;
                    case "busy":
                        oSuggestionItem.setIcon("sap-icon://busy");
                        break;
                    case "tentative":
                        oSuggestionItem.setIcon("sap-icon://question-mark");
                        break;
                    default:
                        oSuggestionItem.setIcon("sap-icon://employee");
                }
                oMultiInput.addSuggestionItem(oSuggestionItem);
            });
        },
        // Handle token addition in MultiInput
        onAttendeeTokenChange: function (oEvent) {
            var oMultiInput = oEvent.getSource();
            var sInputValue = oMultiInput.getValue().trim();
            if (!sInputValue) {
                return;
            }
            // Check if input is an email or should be treated as search
            if (this._isEmailValid(sInputValue)) {
                // Create token for manually entered email
                var oToken = new Token({
                    key: sInputValue,
                    text: sInputValue
                });
                oMultiInput.addToken(oToken);
                oMultiInput.setValue("");
            } else {
                // Trigger suggestion for non-email input
                this.onAttendeeSuggest(oEvent);
            }
        },
        // Validate email format
        _isEmailValid: function (sEmail) {
            var re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            return re.test(sEmail);
        },
        // Create meeting scheduling
        createMeetingScheduling: function (oMeetingData) {
            var oSchedulingModel = this.getView().getModel("scheduling");
            var that = this;
            oSchedulingModel.create("/MeetingSchedulingSet", oMeetingData, {
                success: function (oData) {
                    MessageToast.show("Meeting scheduled successfully!");
                    // Refresh attendees after creating meeting
                    that._loadAttendees();
                    // Add the meeting to the calendar
                    that._addMeetingToCalendar(oData);
                },
                error: function (oError) {
                    console.error("Error scheduling meeting:", oError);
                    MessageToast.show("Failed to schedule meeting");
                    // Fallback: Add to local calendar
                    that._addMeetingToCalendar(oMeetingData);
                }
            });
        },
        // Helper method to add meeting to calendar
        _addMeetingToCalendar: function (oMeetingData) {
            var oModel = this.getView().getModel();
            var aPeople = oModel.getProperty("/people");
            if (aPeople && aPeople.length > 0) {
                var newAppointment = {
                    start: new Date(oMeetingData.StartDateTime),
                    end: new Date(oMeetingData.EndDateTime),
                    title: oMeetingData.MeetingTitle,
                    info: oMeetingData.Location || "Online Meeting",
                    type: "Type01",
                    pic: "sap-icon://group",
                    category: "Meeting",
                    showAs: "Busy",
                    recurrence: oMeetingData.IsRecurring ? "Recurring" : "Non-recurring",
                    inPerson: oMeetingData.IsVirtual ? "Virtual" : "In-person",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted",
                    attendees: oMeetingData.Attendees || []
                };
                aPeople[0].appointments.push(newAppointment);
                oModel.setProperty("/people", aPeople);
                // Refresh calendar
                this.byId("calendar").getBinding("rows").refresh(true);
            }
        },
        // Update date display in filter popover
        _updateDateDisplay: function () {
            var oDateDisplay = this.byId("dateDisplay");
            if (oDateDisplay) {
                var today = UI5Date.getInstance();
                var options = { weekday: 'long', day: 'numeric' };
                var dateText = today.toLocaleDateString('en-US', options);
                oDateDisplay.setText(dateText);
            }
        },
        // Role-based functionality
        roles: {
            donna: "Donna Moore",
            manager: "manager",
            admin: "admin"
        },
        handleRoleChange: function () {
            this.getView().getModel().refresh(true);
        },
        getUserRole: function () {
            return this.roles[this.byId("userRole").getSelectedKey()];
        },
        canModifyAppointments: function (sRole) {
            var sUserRole = this.getUserRole();
            if (sUserRole === this.roles.manager || sUserRole === this.roles.admin || sUserRole === sRole) {
                return true;
            }
            return false;
        },
        // Filter functionality
        onFilterChange: function (oEvent) {
            var sFilterType = oEvent.getSource().getId().replace("Checkbox", "");
            var bSelected = oEvent.getParameter("selected");
            // Update filter model
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            oFilters[sFilterType.toLowerCase()] = bSelected;
            oViewModel.setProperty("/filters", oFilters);
            // Apply filters
            this.applyFilters();
        },
        applyFilters: function () {
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            // Clear existing filters
            this._aFilters = [];
            // Apply category filters
            if (!oFilters.appointments) {
                this._aFilters.push(new Filter("category", FilterOperator.NE, "Appointment"));
            }
            if (!oFilters.meetings) {
                this._aFilters.push(new Filter("category", FilterOperator.NE, "Meeting"));
            }
            if (!oFilters.reservations) {
                this._aFilters.push(new Filter("category", FilterOperator.NE, "Reservation"));
            }
            // Apply additional filters based on selected options
            if (oFilters.categories && oFilters.categories.length > 0) {
                this._aFilters.push(new Filter("category", FilterOperator.Contains, oFilters.categories.join("|")));
            }
            if (oFilters.showAs && oFilters.showAs.length > 0) {
                this._aFilters.push(new Filter("showAs", FilterOperator.Contains, oFilters.showAs.join("|")));
            }
            if (oFilters.recurrence && oFilters.recurrence.length > 0) {
                this._aFilters.push(new Filter("recurrence", FilterOperator.Contains, oFilters.recurrence.join("|")));
            }
            if (oFilters.inPerson && oFilters.inPerson.length > 0) {
                this._aFilters.push(new Filter("inPerson", FilterOperator.Contains, oFilters.inPerson.join("|")));
            }
            // Apply organizer filters
            var aOrganizerFilters = [];
            if (oFilters.organizer.sent) {
                aOrganizerFilters.push(new Filter("organizerStatus", FilterOperator.EQ, "sent"));
            }
            if (oFilters.organizer.draft) {
                aOrganizerFilters.push(new Filter("organizerStatus", FilterOperator.EQ, "draft"));
            }
            if (aOrganizerFilters.length > 0) {
                this._aFilters.push(new Filter({
                    filters: aOrganizerFilters,
                    and: false
                }));
            }
            // Apply attendee filters
            var aAttendeeFilters = [];
            if (oFilters.attendee.accepted) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "accepted"));
            }
            if (oFilters.attendee.declined) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "declined"));
            }
            if (oFilters.attendee.followed) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "followed"));
            }
            if (oFilters.attendee.tentative) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "tentative"));
            }
            if (oFilters.attendee.canceled) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "canceled"));
            }
            if (oFilters.attendee.notResponded) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "notResponded"));
            }
            if (aAttendeeFilters.length > 0) {
                this._aFilters.push(new Filter({
                    filters: aAttendeeFilters,
                    and: false
                }));
            }
            // Apply filters to the calendar
            var oCalendar = this.byId("calendar");
            var oBinding = oCalendar.getBinding("rows");
            if (this._aFilters.length > 0) {
                oBinding.filter(this._aFilters);
            } else {
                oBinding.filter([]);
            }
            // Update filter button text
            var oFilterButton = this.byId("_IDGenButton7");
            var iFilterCount = this._aFilters.length;
            oFilterButton.setText(iFilterCount > 0 ? "Filter applied (" + iFilterCount + ")" : "Filter applied");
        },
        // Filter popover handlers
        onAppointmentsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("appointmentsFilterPopover").openBy(oButton);
        },
        onMeetingsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("meetingsFilterPopover").openBy(oButton);
        },
        onReservationsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("reservationsFilterPopover").openBy(oButton);
        },
        onCategoriesFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("categoriesFilterPopover").openBy(oButton);
        },
        onShowAsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("showAsFilterPopover").openBy(oButton);
        },
        onRecurrenceFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("recurrenceFilterPopover").openBy(oButton);
        },
        onInPersonFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("inPersonFilterPopover").openBy(oButton);
        },
        // Organizer and Attendee filter handlers
        onOrganizerFilterPress: function (oEvent) {
            var oOptionsBox = this.byId("organizerOptions");
            oOptionsBox.setVisible(!oOptionsBox.getVisible());
        },
        onAttendeeFilterPress: function (oEvent) {
            var oOptionsBox = this.byId("attendeeOptions");
            oOptionsBox.setVisible(!oOptionsBox.getVisible());
        },
        onOrganizerFilterChange: function (oEvent) {
            var sId = oEvent.getSource().getId();
            var bSelected = oEvent.getParameter("selected");
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            // Update the corresponding filter property
            if (sId === "sentCheckbox") {
                oFilters.organizer.sent = bSelected;
            } else if (sId === "draftCheckbox") {
                oFilters.organizer.draft = bSelected;
            }
            oViewModel.setProperty("/filters", oFilters);
            this.applyFilters();
        },
        onAttendeeFilterChange: function (oEvent) {
            var sId = oEvent.getSource().getId();
            var bSelected = oEvent.getParameter("selected");
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            // Update the corresponding filter property
            if (sId === "acceptedCheckbox") {
                oFilters.attendee.accepted = bSelected;
            } else if (sId === "declinedCheckbox") {
                oFilters.attendee.declined = bSelected;
            } else if (sId === "followedCheckbox") {
                oFilters.attendee.followed = bSelected;
            } else if (sId === "tentativeCheckbox") {
                oFilters.attendee.tentative = bSelected;
            } else if (sId === "canceledCheckbox") {
                oFilters.attendee.canceled = bSelected;
            } else if (sId === "notRespondedCheckbox") {
                oFilters.attendee.notResponded = bSelected;
            }
            oViewModel.setProperty("/filters", oFilters);
            this.applyFilters();
        },
        onUnselectAllRight: function () {
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            // Reset organizer filters
            oFilters.organizer.sent = false;
            oFilters.organizer.draft = false;
            // Reset attendee filters
            oFilters.attendee.accepted = false;
            oFilters.attendee.declined = false;
            oFilters.attendee.followed = false;
            oFilters.attendee.tentative = false;
            oFilters.attendee.canceled = false;
            oFilters.attendee.notResponded = false;
            oViewModel.setProperty("/filters", oFilters);
            // Update the checkboxes
            this.byId("sentCheckbox").setSelected(false);
            this.byId("draftCheckbox").setSelected(false);
            this.byId("acceptedCheckbox").setSelected(false);
            this.byId("declinedCheckbox").setSelected(false);
            this.byId("followedCheckbox").setSelected(false);
            this.byId("tentativeCheckbox").setSelected(false);
            this.byId("canceledCheckbox").setSelected(false);
            this.byId("notRespondedCheckbox").setSelected(false);
            this.applyFilters();
        },
        // Unselect all handlers
        onAppointmentsUnselectAll: function () {
            this._unselectAllCheckboxes("appointmentsFilterList");
        },
        onMeetingsUnselectAll: function () {
            this._unselectAllCheckboxes("meetingsFilterList");
        },
        onReservationsUnselectAll: function () {
            this._unselectAllCheckboxes("reservationsFilterList");
        },
        onCategoriesUnselectAll: function () {
            this._unselectAllCheckboxes("categoriesFilterList");
        },
        onShowAsUnselectAll: function () {
            this._unselectAllCheckboxes("showAsFilterList");
        },
        onRecurrenceUnselectAll: function () {
            this._unselectAllCheckboxes("recurrenceFilterList");
        },
        onInPersonUnselectAll: function () {
            this._unselectAllCheckboxes("inPersonFilterList");
        },
        _unselectAllCheckboxes: function (sListId) {
            var oList = this.byId(sListId);
            var aItems = oList.getItems();
            aItems.forEach(function (oItem) {
                if (oItem.isA("sap.m.CheckBox")) {
                    oItem.setSelected(false);
                }
            });
        },
        // Filter selection handlers
        onAppointmentsFilterSelect: function (oEvent) {
            this._updateFilterArray("appointments", oEvent);
        },
        onMeetingsFilterSelect: function (oEvent) {
            this._updateFilterArray("meetings", oEvent);
        },
        onReservationsFilterSelect: function (oEvent) {
            this._updateFilterArray("reservations", oEvent);
        },
        onCategoriesFilterSelect: function (oEvent) {
            this._updateFilterArray("categories", oEvent);
        },
        onShowAsFilterSelect: function (oEvent) {
            this._updateFilterArray("showAs", oEvent);
        },
        onRecurrenceFilterSelect: function (oEvent) {
            this._updateFilterArray("recurrence", oEvent);
        },
        onInPersonFilterSelect: function (oEvent) {
            this._updateFilterArray("inPerson", oEvent);
        },
        _updateFilterArray: function (sFilterType, oEvent) {
            var sValue = oEvent.getSource().getText();
            var bSelected = oEvent.getParameter("selected");
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            if (!oFilters[sFilterType]) {
                oFilters[sFilterType] = [];
            }
            if (bSelected) {
                if (oFilters[sFilterType].indexOf(sValue) === -1) {
                    oFilters[sFilterType].push(sValue);
                }
            } else {
                var iIndex = oFilters[sFilterType].indexOf(sValue);
                if (iIndex !== -1) {
                    oFilters[sFilterType].splice(iIndex, 1);
                }
            }
            oViewModel.setProperty("/filters", oFilters);
            this.applyFilters();
        },
        onClearFilters: function () {
            // Reset all filter checkboxes
            var aCheckBoxIds = [
                "appointmentsCheckbox", "meetingsCheckbox", "reservationsCheckbox"
            ];
            aCheckBoxIds.forEach(function (sId) {
                var oCheckBox = this.byId(sId);
                if (oCheckBox) {
                    oCheckBox.setSelected(sId === "appointmentsCheckbox" || sId === "meetingsCheckbox");
                }
            }.bind(this));
            // Reset organizer and attendee filters
            this.byId("sentCheckbox").setSelected(true);
            this.byId("draftCheckbox").setSelected(true);
            this.byId("acceptedCheckbox").setSelected(true);
            this.byId("declinedCheckbox").setSelected(true);
            this.byId("followedCheckbox").setSelected(true);
            this.byId("tentativeCheckbox").setSelected(true);
            this.byId("canceledCheckbox").setSelected(true);
            this.byId("notRespondedCheckbox").setSelected(true);
            // Reset filter arrays in model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/filters", {
                appointments: true,
                meetings: true,
                reservations: false,
                categories: [],
                showAs: [],
                recurrence: [],
                inPerson: [],
                organizer: {
                    sent: true,
                    draft: true
                },
                attendee: {
                    accepted: true,
                    declined: true,
                    followed: true,
                    tentative: true,
                    canceled: true,
                    notResponded: true
                }
            });
            // Apply empty filters
            this._aFilters = [];
            var oCalendar = this.byId("calendar");
            oCalendar.getBinding("rows").filter([]);
            // Update filter button text
            this.byId("_IDGenButton7").setText("Filter applied");
            MessageToast.show("All filters cleared");
        },
        // Drag and Drop functionality
        handleAppointmentDragEnter: function (oEvent) {
            if (this.isAppointmentOverlap(oEvent, oEvent.getParameter("calendarRow"))) {
                oEvent.preventDefault();
            }
        },
        handleAppointmentDrop: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                oCalendarRow = oEvent.getParameter("calendarRow"),
                bCopy = oEvent.getParameter("copy"),
                sTitle = oAppointment.getTitle(),
                oModel = this.getView().getModel(),
                oAppBindingContext = oAppointment.getBindingContext(),
                oRowBindingContext = oCalendarRow.getBindingContext(),
                handleAppointmentDropBetweenRows = function () {
                    var aPath = oAppBindingContext.getPath().split("/");
                    var iIndex = aPath.pop();
                    var sRowAppointmentsPath = aPath.join("/");
                    oRowBindingContext.getObject().appointments.push(
                        oModel.getProperty(oAppBindingContext.getPath())
                    );
                    oModel.getProperty(sRowAppointmentsPath).splice(iIndex, 1);
                };
            if (bCopy) { // "copy" appointment
                var oProps = Object.assign({}, oModel.getProperty(oAppointment.getBindingContext().getPath()));
                oProps.start = oStartDate;
                oProps.end = oEndDate;
                oRowBindingContext.getObject().appointments.push(oProps);
            } else { // "move" appointment
                oModel.setProperty("start", oStartDate, oAppBindingContext);
                oModel.setProperty("end", oEndDate, oAppBindingContext);
                if (oAppointment.getParent() !== oCalendarRow) {
                    handleAppointmentDropBetweenRows();
                }
            }
            oModel.refresh(true);
        },
        handleAppointmentResize: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate");
            if (!this.isAppointmentOverlap(oEvent, oAppointment.getParent())) {
                oAppointment
                    .setStartDate(oStartDate)
                    .setEndDate(oEndDate);
            } else {
                MessageToast.show("As a manager you can not resize events if they overlap with another events");
            }
        },
        // Modified handleAppointmentCreate to open event details fragment
        handleAppointmentCreate: function (oEvent) {
            var oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                oPlanningCalendarRow = oEvent.getParameter("calendarRow"),
                oModel = this.getView().getModel(),
                sPath = oPlanningCalendarRow.getBindingContext().getPath();
            // Create a new appointment object
            var newAppointment = {
                title: "New Appointment",
                start: oStartDate,
                end: oEndDate,
                info: "",
                type: "Type01",
                category: "Appointment",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "In-person",
                organizerStatus: "sent",
                attendeeStatus: "accepted",
                isNew: true // Flag to indicate it's a new appointment
            };
            // Set the selected event in the view model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", newAppointment);
            // Open the event details fragment
            this._openEventDetailsPopover(oEvent.getParameter("domRef"));
            MessageToast.show("New Appointment is created at \n" + oStartDate + "\n and end at \n" + oEndDate + ".");
        },
        isAppointmentOverlap: function (oEvent, oCalendarRow) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                bAppointmentOverlapped;
            if (this.getUserRole() === this.roles.manager) {
                bAppointmentOverlapped = oCalendarRow.getAppointments().some(function (oCurrentAppointment) {
                    if (oCurrentAppointment === oAppointment) {
                        return;
                    }
                    var oAppStartTime = oCurrentAppointment.getStartDate().getTime(),
                        oAppEndTime = oCurrentAppointment.getEndDate().getTime();
                    if (oAppStartTime <= oStartDate.getTime() && oStartDate.getTime() < oAppEndTime) {
                        return true;
                    }
                    if (oAppStartTime < oEndDate.getTime() && oEndDate.getTime() <= oAppEndTime) {
                        return true;
                    }
                    if (oStartDate.getTime() <= oAppStartTime && oAppStartTime < oEndDate.getTime()) {
                        return true;
                    }
                });
            }
            return bAppointmentOverlapped;
        },
        // Toolbar and UI functionality
        onTodayPress: function () {
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/startDate", UI5Date.getInstance());
            MessageToast.show("Navigated to today");
        },
        onViewSelectPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oViewPopover = this.byId("viewPopover");
            // Close other popovers
            this.byId("filterPopover").close();
            this.byId("newEventPopover").close();
            this.byId("eventDetailsPopover").close();
            // Toggle view popover
            if (!oViewPopover.isOpen()) {
                oViewPopover.openBy(oButton);
            } else {
                oViewPopover.close();
            }
        },
        onFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oFilterPopover = this.byId("filterPopover");
            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("newEventPopover").close();
            this.byId("eventDetailsPopover").close();
            // Toggle filter popover
            if (!oFilterPopover.isOpen()) {
                oFilterPopover.openBy(oButton);
            } else {
                oFilterPopover.close();
            }
        },
        onMeetNowPress: function () {
            MessageToast.show("Starting meeting now...");
        },
        onNewEventPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oNewEventPopover = this.byId("newEventPopover");
            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("filterPopover").close();
            this.byId("eventDetailsPopover").close();
            // Toggle new event popover
            if (!oNewEventPopover.isOpen()) {
                oNewEventPopover.openBy(oButton);
            } else {
                oNewEventPopover.close();
            }
        },
        onNotificationPress: function () {
            MessageToast.show("No new notifications");
        },
        // Work week menu functionality
        onWorkWeekMenuPress: function (oEvent) {
            var oViewModel = this.getView().getModel("view");
            var bMenuOpen = oViewModel.getProperty("/workWeekMenuOpen");
            // Toggle the menu visibility
            oViewModel.setProperty("/workWeekMenuOpen", !bMenuOpen);
            // Update the arrow icon direction
            var oButton = this.byId("_IDGenWorkWeekButton");
            oButton.setIcon(!bMenuOpen ? "sap-icon://slim-arrow-down" : "sap-icon://slim-arrow-right");
        },
        // Time scale dropdown change handler
        onTimeScaleChange: function (oEvent) {
            var oViewModel = this.getView().getModel("view");
            var oSource = oEvent.getSource();
            var sSelectedKey = oSource.getSelectedKey();
            // Extract the number of minutes from the selected key
            var iMinutes = parseInt(sSelectedKey);
            // Update the model
            oViewModel.setProperty("/timeScale", iMinutes + " minutes");
            oViewModel.setProperty("/timeScaleMinutes", iMinutes);
            // Get current days to show
            var iDays = oViewModel.getProperty("/daysToShow");
            // Update the button text to show both days and time scale
            var oButton = this.byId("viewSelectButton");
            oButton.setText("Work week (" + iDays + " days, " + iMinutes + " min)");
            // Update the calendar's time scale
            this._updateTimeScale(iMinutes);
            // Make sure we're in Work week view
            var oCalendar = this.byId("calendar");
            oCalendar.setViewKey("Workweek");
            oViewModel.setProperty("/currentView", "Work week");
            MessageToast.show("Time scale changed to: " + iMinutes + " minutes");
        },
        // Days to show dropdown change handler
        onDaysToShowChange: function (oEvent) {
            var oViewModel = this.getView().getModel("view");
            var oSource = oEvent.getSource();
            var iDays = parseInt(oSource.getSelectedKey());
            // Update the model
            oViewModel.setProperty("/daysToShow", iDays);
            // Get current time scale
            var sTimeScale = oViewModel.getProperty("/timeScale");
            var iMinutes = parseInt(sTimeScale.match(/\d+/)[0]);
            // Update the button text to show both days and time scale
            var oButton = this.byId("viewSelectButton");
            oButton.setText("Work week (" + iDays + " days, " + iMinutes + " min)");
            // Update the work week view
            this._updateWorkWeekView(iDays);
            // Make sure we're in Work week view
            var oCalendar = this.byId("calendar");
            oCalendar.setViewKey("Workweek");
            oViewModel.setProperty("/currentView", "Work week");
            MessageToast.show("Work week now shows " + iDays + " days");
        },
        // Days dropdown change handler (main view selection)
        onDaysChange: function (oEvent) {
            var oSource = oEvent.getSource();
            var iDays = parseInt(oSource.getSelectedKey());
            // Update the model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/daysToShow", iDays);
            // Set the current view to Work week
            oViewModel.setProperty("/currentView", "Work week");
            // Update the button text
            var oButton = this.byId("viewSelectButton");
            var sTimeScale = oViewModel.getProperty("/timeScale");
            var iMinutes = parseInt(sTimeScale.match(/\d+/)[0]);
            oButton.setText("Work week (" + iDays + " days, " + iMinutes + " min)");
            // Update the calendar
            var oCalendar = this.byId("calendar");
            oCalendar.setViewKey("Workweek");
            // Update the work week view
            this._updateWorkWeekView(iDays);
            // Close the popover
            this.byId("viewPopover").close();
            MessageToast.show("Work week now shows " + iDays + " days");
        },
        onViewSelected: function (oEvent) {
            var sSelectedView = oEvent.getParameter("listItem").getTitle();
            var oButton = this.byId("viewSelectButton");
            var oCalendar = this.byId("calendar");
            var oViewModel = this.getView().getModel("view");
            // Close the popover first
            this.byId("viewPopover").close();
            // Handle regular view selection
            if (sSelectedView === "Work week") {
                oButton.setText(sSelectedView);
                oViewModel.setProperty("/currentView", sSelectedView);
                // Update calendar view
                oCalendar.setViewKey("Workweek");
                // Get current settings
                var iDaysToShow = oViewModel.getProperty("/daysToShow");
                var sTimeScale = oViewModel.getProperty("/timeScale");
                var iMinutes = parseInt(sTimeScale.match(/\d+/)[0]);
                // Update button text to show both days and time scale
                oButton.setText("Work week (" + iDaysToShow + " days, " + iMinutes + " min)");
                // Update the work week view and time scale
                this._updateWorkWeekView(iDaysToShow);
                this._updateTimeScale(iMinutes);
                MessageToast.show("View changed to: " + sSelectedView);
            } else if (sSelectedView === "Week") {
                oButton.setText(sSelectedView);
                oViewModel.setProperty("/currentView", sSelectedView);
                // Update calendar view
                oCalendar.setViewKey("Week");
                // Force refresh to ensure proper rendering
                oCalendar.rerender();
                MessageToast.show("View changed to: " + sSelectedView);
            } else if (sSelectedView === "Month") {
                oButton.setText(sSelectedView);
                oViewModel.setProperty("/currentView", sSelectedView);
                // Update calendar view
                oCalendar.setViewKey("Month");
                // Force refresh to ensure proper rendering
                oCalendar.rerender();
                MessageToast.show("View changed to: " + sSelectedView);
            } else if (sSelectedView === "Split view") {
                MessageToast.show("Split view feature coming soon");
            }
        },
        _switchCalendarView: function (sViewKey) {
            var oCalendar = this.byId("calendar");
            var oViewModel = this.getView().getModel("view");
            // Set the view key
            oCalendar.setViewKey(sViewKey);
            // Update the current view in the model
            oViewModel.setProperty("/currentView", sViewKey);
            // Force a rerender to ensure proper display
            oCalendar.rerender();
        },
        _updateTimeScale: function (iMinutes) {
            var oCalendar = this.byId("calendar");
            var oViewModel = this.getView().getModel("view");
            var sCurrentView = oViewModel;
            // Only update time scale for Day and Work week views
            if (sCurrentView === "Day" || sCurrentView === "Work week") {
                var oView = oCalendar.getViews().find(function (view) {
                    return view.getKey() === (sCurrentView === "Work week" ? "Workweek" : sCurrentView);
                });
                if (oView) {
                    // Calculate the number of intervals based on the selected minutes
                    var iTotalMinutes = 24 * 60; // 24 hours in minutes
                    var iIntervals = iTotalMinutes / iMinutes;
                    // Update the view settings
                    oView.setIntervalsS(iIntervals);
                    oView.setIntervalsM(iIntervals);
                    oView.setIntervalsL(iIntervals);
                    oView.setIntervalType("Minute"); // Use string value directly
                    // Refresh the calendar
                    oCalendar.rerender();
                }
            }
        },
        _updateWorkWeekView: function (iDays) {
            var oCalendar = this.byId("calendar");
            var oView = oCalendar.getViews().find(function (view) {
                return view.getKey() === "Workweek";
            });
            if (oView) {
                // Update the number of days to show
                oView.setIntervalsS(iDays);
                oView.setIntervalsM(iDays);
                oView.setIntervalsL(iDays);
                // Refresh the calendar
                oCalendar.rerender();
            }
        },
        onSavedViewsPress: function () {
            // MessageToast.show("Saved views feature coming soon");
        },
        onNewEventTypeSelected: function (oEvent) {
            var sEventType = oEvent.getSource().getTitle();
            this.byId("newEventPopover").close();
            if (sEventType === "Channel meeting") {
                this._openChannelMeetingDialog();
            } else if (sEventType === "Event") {
                this._openRemarksDialog();
            } else if (sEventType === "Virtual appointment") {
                this._openVirtualAppointmentDialog();
            } else {
                MessageToast.show("Creating new: " + sEventType);
            }
        },
        // Open the Channel Meeting Dialog
        _openChannelMeetingDialog: function () {
            var that = this;
            if (!this._oChannelMeetingDialog) {
                Fragment.load({
                    id: this.getView().getId(),
                    name: "com.capexrevex.capexrevex.view.ChannelMeetingDialog",
                    controller: this
                }).then(function (oDialog) {
                    that._oChannelMeetingDialog = oDialog;
                    that.getView().addDependent(that._oChannelMeetingDialog);
                    // Set default values for new channel meeting
                    that._setDefaultChannelMeetingValues();
                    // Set the model for the fragment
                    that._oChannelMeetingDialog.setModel(that.getView().getModel());
                    that._oChannelMeetingDialog.setModel(that.getView().getModel("attendees"), "attendees");
                    that._oChannelMeetingDialog.open();
                }).catch(function (error) {
                    console.error("Error loading channel meeting dialog:", error);
                    MessageToast.show("Error loading meeting dialog");
                });
            } else {
                // Set default values for the meeting
                this._setDefaultChannelMeetingValues();
                // Set the model for the fragment
                this._oChannelMeetingDialog.setModel(this.getView().getModel());
                this._oChannelMeetingDialog.setModel(this.getView().getModel("attendees"), "attendees");
                this._oChannelMeetingDialog.open();
            }
        },
        // Open the Virtual Appointment Dialog
        _openVirtualAppointmentDialog: function () {
            var that = this;
            if (!this._oVirtualAppointmentDialog) {
                Fragment.load({
                    id: this.getView().getId(),
                    name: "com.capexrevex.capexrevex.view.VirtualAppointmentDialog",
                    controller: this
                }).then(function (oDialog) {
                    that._oVirtualAppointmentDialog = oDialog;
                    that.getView().addDependent(that._oVirtualAppointmentDialog);
                    // Set default values for virtual appointment
                    that._setDefaultVirtualAppointmentValues();
                    // Set the model for the fragment
                    that._oVirtualAppointmentDialog.setModel(that.getView().getModel());
                    that._oVirtualAppointmentDialog.setModel(that.getView().getModel("attendees"), "attendees");
                    that._oVirtualAppointmentDialog.open();
                }).catch(function (error) {
                    console.error("Error loading virtual appointment dialog:", error);
                    MessageToast.show("Error loading virtual appointment dialog");
                });
            } else {
                // Set default values for the appointment
                this._setDefaultVirtualAppointmentValues();
                // Set the model for the fragment
                this._oVirtualAppointmentDialog.setModel(this.getView().getModel());
                this._oVirtualAppointmentDialog.setModel(this.getView().getModel("attendees"), "attendees");
                this._oVirtualAppointmentDialog.open();
            }
        },
        _setDefaultChannelMeetingValues: function () {
            // Set default date and time (current date, 3:00 PM to 3:30 PM)
            var oNow = UI5Date.getInstance();
            var oStart = UI5Date.getInstance(oNow);
            oStart.setHours(15, 0, 0, 0); // 3:00 PM
            var oEnd = UI5Date.getInstance(oStart);
            oEnd.setHours(15, 30, 0, 0); // 3:30 PM
            // Set values in the dialog if it exists
            if (this._oChannelMeetingDialog) {
                var oStartDate = Fragment.byId(this.getView().getId(), "startDate");
                var oStartTime = Fragment.byId(this.getView().getId(), "startTime");
                var oEndDate = Fragment.byId(this.getView().getId(), "endDate");
                var oEndTime = Fragment.byId(this.getView().getId(), "endTime");
                if (oStartDate) oStartDate.setDateValue(oStart);
                if (oStartTime) oStartTime.setDateValue(oStart);
                if (oEndDate) oEndDate.setDateValue(oEnd);
                if (oEndTime) oEndTime.setDateValue(oEnd);
            }
        },
        _setDefaultVirtualAppointmentValues: function () {
            // Set default date and time (current date, 4:30 PM to 5:00 PM)
            var oNow = UI5Date.getInstance();
            var oStart = UI5Date.getInstance(oNow);
            oStart.setHours(16, 30, 0, 0); // 4:30 PM
            var oEnd = UI5Date.getInstance(oStart);
            oEnd.setHours(17, 0, 0, 0); // 5:00 PM
            // Set values in the dialog if it exists
            if (this._oVirtualAppointmentDialog) {
                var oStartDate = Fragment.byId(this.getView().getId(), "virtualStartDate");
                var oStartTime = Fragment.byId(this.getView().getId(), "virtualStartTime");
                var oEndDate = Fragment.byId(this.getView().getId(), "virtualEndDate");
                var oEndTime = Fragment.byId(this.getView().getId(), "virtualEndTime");
                if (oStartDate) oStartDate.setDateValue(oStart);
                if (oStartTime) {
                    oStartTime.setDateValue(oStart);
                    // Set minutes step based on current time scale
                    var oViewModel = this.getView().getModel("view");
                    var iMinutes = oViewModel.getProperty("/timeScaleMinutes");
                    oStartTime.setMinutesStep(iMinutes);
                }
                if (oEndDate) oEndDate.setDateValue(oEnd);
                if (oEndTime) {
                    oEndTime.setDateValue(oEnd);
                    // Set minutes step based on current time scale
                    var oViewModel = this.getView().getModel("view");
                    var iMinutes = oViewModel.getProperty("/timeScaleMinutes");
                    oEndTime.setMinutesStep(iMinutes);
                }
                // Set default recurrence to "none"
                var oRecurrenceSelect = Fragment.byId(this.getView().getId(), "virtualRecurrence");
                if (oRecurrenceSelect) {
                    oRecurrenceSelect.setSelectedKey("none");
                }
            }
        },
        // Save Channel Meeting
        onSaveChannelMeeting: function () {
            try {
                // Get values from the dialog
                var sTitle = Fragment.byId(this.getView().getId(), "meetingTitle").getValue();
                // Get required attendees
                var oRequiredAttendees = Fragment.byId(this.getView().getId(), "requiredAttendees");
                var aRequiredTokens = oRequiredAttendees.getTokens();
                var sRequiredAttendees = aRequiredTokens.map(function (oToken) {
                    return oToken.getKey();
                }).join("; ");
                // Get optional attendees
                var oOptionalAttendees = Fragment.byId(this.getView().getId(), "optionalAttendees");
                var aOptionalTokens = oOptionalAttendees.getTokens();
                var sOptionalAttendees = aOptionalTokens.map(function (oToken) {
                    return oToken.getKey();
                }).join("; ");
                // Get date and time values properly
                var oStartDateControl = Fragment.byId(this.getView().getId(), "startDate");
                var oStartTimeControl = Fragment.byId(this.getView().getId(), "startTime");
                var oEndDateControl = Fragment.byId(this.getView().getId(), "endDate");
                var oEndTimeControl = Fragment.byId(this.getView().getId(), "endTime");
                var oStartDate = oStartDateControl ? oStartDateControl.getDateValue() : null;
                var oStartTime = oStartTimeControl ? oStartTimeControl.getDateValue() : null;
                var oEndDate = oEndDateControl ? oEndDateControl.getDateValue() : null;
                var oEndTime = oEndTimeControl ? oEndTimeControl.getDateValue() : null;
                var bAllDay = Fragment.byId(this.getView().getId(), "allDayCheckbox").getSelected();
                var sChannel = Fragment.byId(this.getView().getId(), "channelInput").getValue();
                var sLocation = Fragment.byId(this.getView().getId(), "locationInput").getValue();
                var bOnlineMeeting = Fragment.byId(this.getView().getId(), "onlineMeetingCheckbox").getSelected();
                var sDetails = Fragment.byId(this.getView().getId(), "meetingDetails").getValue();
                var sAgenda = Fragment.byId(this.getView().getId(), "meetingAgenda").getValue();
                // Validate required fields
                if (!sTitle) {
                    MessageToast.show("Please enter a title for the meeting");
                    return;
                }
                // Validate date controls exist
                if (!oStartDate || !oEndDate) {
                    MessageToast.show("Please select valid dates");
                    return;
                }
                // Combine date and time
                var oStart = new Date(oStartDate);
                if (!bAllDay && oStartTime) {
                    oStart.setHours(oStartTime.getHours(), oStartTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oStart.setHours(0, 0, 0, 0);
                }
                var oEnd = new Date(oEndDate);
                if (!bAllDay && oEndTime) {
                    oEnd.setHours(oEndTime.getHours(), oEndTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oEnd.setHours(23, 59, 59, 999);
                }
                // Validate that end time is after start time
                if (oEnd <= oStart) {
                    MessageToast.show("End time must be after start time");
                    return;
                }
                // Create the new appointment object
                var newAppointment = {
                    start: oStart,
                    end: oEnd,
                    title: sTitle,
                    info: "Channel: " + sChannel + (sLocation ? " | Location: " + sLocation : ""),
                    type: "Type01",
                    pic: "sap-icon://group",
                    requiredAttendees: sRequiredAttendees,
                    optionalAttendees: sOptionalAttendees,
                    details: sDetails,
                    agenda: sAgenda,
                    allDay: bAllDay,
                    onlineMeeting: bOnlineMeeting,
                    category: "Meeting",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: bOnlineMeeting ? "Virtual" : "In-person",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted"
                };
                // Get the model and add the new appointment to the first person's calendar
                var oModel = this.getView().getModel();
                var aPeople = oModel.getProperty("/people");
                if (aPeople && aPeople.length > 0) {
                    // Add to the first person's appointments
                    aPeople[0].appointments.push(newAppointment);
                    // Update the model
                    oModel.setProperty("/people", aPeople);
                    // Show success message
                    MessageToast.show("Channel meeting '" + sTitle + "' has been created");
                    // Close the dialog
                    this._oChannelMeetingDialog.close();
                    // Refresh the calendar to show the new appointment
                    this.byId("calendar").getBinding("rows").refresh(true);
                } else {
                    MessageToast.show("Error: Could not find calendar to add meeting");
                }
            } catch (error) {
                console.error("Error saving channel meeting:", error);
                MessageToast.show("Error creating meeting. Please try again.");
            }
        },
        // Save Virtual Appointment
        onSaveVirtualAppointment: function () {
            try {
                // Get values from the dialog
                var sTitle = Fragment.byId(this.getView().getId(), "virtualTitle").getValue();
                var sGuestName = Fragment.byId(this.getView().getId(), "guestName").getValue();
                var sGuestEmail = Fragment.byId(this.getView().getId(), "guestEmail").getValue();
                // Get internal attendees
                var oInternalAttendees = Fragment.byId(this.getView().getId(), "internalAttendees");
                var aInternalTokens = oInternalAttendees.getTokens();
                var sInternalAttendees = aInternalTokens.map(function (oToken) {
                    return oToken.getKey();
                }).join("; ");
                // Get date and time values properly
                var oStartDateControl = Fragment.byId(this.getView().getId(), "virtualStartDate");
                var oStartTimeControl = Fragment.byId(this.getView().getId(), "virtualStartTime");
                var oEndDateControl = Fragment.byId(this.getView().getId(), "virtualEndDate");
                var oEndTimeControl = Fragment.byId(this.getView().getId(), "virtualEndTime");
                var oStartDate = oStartDateControl ? oStartDateControl.getDateValue() : null;
                var oStartTime = oStartTimeControl ? oStartTimeControl.getDateValue() : null;
                var oEndDate = oEndDateControl ? oEndDateControl.getDateValue() : null;
                var oEndTime = oEndTimeControl ? oEndTimeControl.getDateValue() : null;
                var bAllDay = Fragment.byId(this.getView().getId(), "virtualAllDay").getSelected();
                var sLocation = Fragment.byId(this.getView().getId(), "virtualLocation").getValue();
                var sPresenterOptions = Fragment.byId(this.getView().getId(), "presenterOptions").getSelectedKey();
                var bRecordAutomatically = Fragment.byId(this.getView().getId(), "recordAutomatically").getSelected();
                var sMeetingChat = Fragment.byId(this.getView().getId(), "meetingChat").getSelectedKey();
                var sMessage = Fragment.byId(this.getView().getId(), "virtualMessage").getValue();
                // Validate required fields
                if (!sTitle) {
                    MessageToast.show("Please enter a title for the appointment");
                    return;
                }
                if (!sGuestName || !sGuestEmail) {
                    MessageToast.show("Please enter guest name and email");
                    return;
                }
                // Validate date controls exist
                if (!oStartDate || !oEndDate) {
                    MessageToast.show("Please select valid dates");
                    return;
                }
                // Combine date and time
                var oStart = new Date(oStartDate);
                if (!bAllDay && oStartTime) {
                    oStart.setHours(oStartTime.getHours(), oStartTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oStart.setHours(0, 0, 0, 0);
                }
                var oEnd = new Date(oEndDate);
                if (!bAllDay && oEndTime) {
                    oEnd.setHours(oEndTime.getHours(), oEndTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oEnd.setHours(23, 59, 59, 999);
                }
                // Validate that end time is after start time
                if (oEnd <= oStart) {
                    MessageToast.show("End time must be after start time");
                    return;
                }
                // Create the new appointment object
                var newAppointment = {
                    start: oStart,
                    end: oEnd,
                    title: sTitle,
                    info: "Virtual Appointment with " + sGuestName + " (" + sGuestEmail + ")",
                    type: "Type01",
                    pic: "sap-icon://video",
                    internalAttendees: sInternalAttendees,
                    location: sLocation,
                    presenterOptions: sPresenterOptions,
                    recordAutomatically: bRecordAutomatically,
                    meetingChat: sMeetingChat,
                    message: sMessage,
                    allDay: bAllDay,
                    isVirtual: true,
                    category: "Appointment",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: "Virtual",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted"
                };
                // Get the model and add the new appointment to the first person's calendar
                var oModel = this.getView().getModel();
                var aPeople = oModel.getProperty("/people");
                if (aPeople && aPeople.length > 0) {
                    // Add to the first person's appointments
                    aPeople[0].appointments.push(newAppointment);
                    // Update the model
                    oModel.setProperty("/people", aPeople);
                    // Show success message
                    MessageToast.show("Virtual appointment '" + sTitle + "' has been created");
                    // Close the dialog
                    this._oVirtualAppointmentDialog.close();
                    // Refresh the calendar to show the new appointment
                    this.byId("calendar").getBinding("rows").refresh(true);
                } else {
                    MessageToast.show("Error: Could not find calendar to add appointment");
                }
            } catch (error) {
                console.error("Error saving virtual appointment:", error);
                MessageToast.show("Error creating appointment. Please try again.");
            }
        },
        // Cancel Channel Meeting
        onCancelChannelMeeting: function () {
            // Close the dialog without saving
            if (this._oChannelMeetingDialog) {
                this._oChannelMeetingDialog.close();
            }
            MessageToast.show("Channel meeting creation cancelled");
        },
        // Cancel Virtual Appointment
        onCancelVirtualAppointment: function () {
            // Close the dialog without saving
            if (this._oVirtualAppointmentDialog) {
                this._oVirtualAppointmentDialog.close();
            }
            MessageToast.show("Virtual appointment creation cancelled");
        },
        // Add additional guest
        onAddGuest: function () {
            MessageToast.show("Additional guest feature coming soon");
        },
        // Handle All Day checkbox changes
        onAllDayChange: function (oEvent) {
            var bAllDay = oEvent.getParameter("state");
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent/allDay", bAllDay);
            if (bAllDay) {
                var oStart = new Date(oViewModel.getProperty("/selectedEvent/start"));
                oStart.setHours(0, 0, 0, 0);
                oViewModel.setProperty("/selectedEvent/start", oStart);
                var oEnd = new Date(oViewModel.getProperty("/selectedEvent/end"));
                oEnd.setHours(23, 59, 59, 999);
                oViewModel.setProperty("/selectedEvent/end", oEnd);
            } else {
                var oStart = new Date(oViewModel.getProperty("/selectedEvent/start"));
                if (oStart.getHours() === 0) {
                    oStart.setHours(10, 0, 0, 0);
                }
                oViewModel.setProperty("/selectedEvent/start", oStart);
                var oEnd = new Date(oViewModel.getProperty("/selectedEvent/end"));
                if (oEnd.getHours() === 23) {
                    oEnd.setHours(10, 30, 0, 0);
                }
                oViewModel.setProperty("/selectedEvent/end", oEnd);
            }
        },
        onStartDateChange: function (oEvent) {
            var oDate = oEvent.getSource().getDateValue();
            if (!oDate) return;
            var oViewModel = this.getView().getModel("view");
            var oStart = new Date(oViewModel.getProperty("/selectedEvent/start"));
            oStart.setFullYear(oDate.getFullYear(), oDate.getMonth(), oDate.getDate());
            oViewModel.setProperty("/selectedEvent/start", oStart);
        },
        onStartTimeChange: function (oEvent) {
            var oTime = oEvent.getSource().getDateValue();
            if (!oTime) return;
            var oViewModel = this.getView().getModel("view");
            var oStart = new Date(oViewModel.getProperty("/selectedEvent/start"));
            oStart.setHours(oTime.getHours(), oTime.getMinutes(), 0, 0);
            oViewModel.setProperty("/selectedEvent/start", oStart);
        },
        onEndDateChange: function (oEvent) {
            var oDate = oEvent.getSource().getDateValue();
            if (!oDate) return;
            var oViewModel = this.getView().getModel("view");
            var oEnd = new Date(oViewModel.getProperty("/selectedEvent/end"));
            oEnd.setFullYear(oDate.getFullYear(), oDate.getMonth(), oDate.getDate());
            oViewModel.setProperty("/selectedEvent/end", oEnd);
        },
        onEndTimeChange: function (oEvent) {
            var oTime = oEvent.getSource().getDateValue();
            if (!oTime) return;
            var oViewModel = this.getView().getModel("view");
            var oEnd = new Date(oViewModel.getProperty("/selectedEvent/end"));
            oEnd.setHours(oTime.getHours(), oTime.getMinutes(), 0, 0);
            oViewModel.setProperty("/selectedEvent/end", oEnd);
        },
        onMoreOptionsPress: function () {
            MessageToast.show("More options coming soon");
        },
        // Modified onAppointmentSelect method
        onAppointmentSelect: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment");
            var oBindingContext = oAppointment.getBindingContext();
            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("filterPopover").close();
            this.byId("newEventPopover").close();
            // Get appointment data
            var oAppointmentData = oBindingContext.getObject();
            // Extract attendees from appointment
            var aAttendees = this._extractAttendeesFromAppointment(oAppointmentData);
            var sTitle = oAppointmentData.title;
            if (sTitle === "new appointment") {
                sTitle = "";
            }
            // Update selected event in model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", {
                title: sTitle,
                start: oAppointmentData.start,
                end: oAppointmentData.end,
                location: oAppointmentData.info || "",
                description: oAppointmentData.description || "",
                allDay: oAppointmentData.allDay || false,
                attendees: aAttendees
            });
            oViewModel.setProperty("/selectedEventPath", oBindingContext.getPath());
            // Open event details popover using the new fragment
            this._openEventDetailsPopover(oEvent.getParameter("domRef"));
        },
        // Modified onIntervalSelect method
        onIntervalSelect: function (oEvent) {
            var oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                oRow = oEvent.getParameter("row"),
                oModel = this.getView().getModel(),
                oAppointment = {
                    start: oStartDate,
                    end: oEndDate,
                    title: "new appointment",
                    info: "",
                    type: "Type01",
                    location: "",
                    description: "",
                    allDay: false,
                    attendees: "",
                    category: "Appointment",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: "In-person",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted"
                };
            var oRowContext = oRow.getBindingContext();
            var sPath = oRowContext.getPath() + "/appointments";
            var aAppointments = oModel.getProperty(sPath) || [];
            aAppointments.push(oAppointment);
            oModel.setProperty(sPath, aAppointments);
            MessageToast.show("New appointment created. Click on it to edit.");
        },
        // Add this method to open the event details popover
        _openEventDetailsPopover: function (oSource) {
            var that = this;
            // Load the fragment if not already loaded
            if (!this._oEventDetailsPopover) {
                Fragment.load({
                    id: this.getView().getId(),
                    name: "com.capexrevex.capexrevex.view.EventDetailsDialog",
                    controller: this
                }).then(function (oPopover) {
                    that._oEventDetailsPopover = oPopover;
                    that.getView().addDependent(that._oEventDetailsPopover);
                    // Set the model for the fragment
                    that._oEventDetailsPopover.setModel(that.getView().getModel("view"), "view");
                    that._oEventDetailsPopover.setModel(that.getView().getModel("attendees"), "attendees");
                    that._oEventDetailsPopover.openBy(oSource);
                    that._setAttendeesTokens();
                });
            } else {
                // Set the model for the fragment
                this._oEventDetailsPopover.setModel(this.getView().getModel("view"), "view");
                this._oEventDetailsPopover.setModel(this.getView().getModel("attendees"), "attendees");
                this._oEventDetailsPopover.openBy(oSource);
                this._setAttendeesTokens();
            }
        },
        _setAttendeesTokens: function () {
            var oViewModel = this.getView().getModel("view");
            var sAttendees = oViewModel.getProperty("/selectedEvent/attendees") || "";
            var oMultiInput = this.byId("eventAttendees");
            oMultiInput.destroyTokens();
            var aAttendees = this._parseAttendees(sAttendees);
            aAttendees.forEach(function (oAttendee) {
                var oToken = new Token({
                    key: oAttendee.email,
                    text: oAttendee.name
                });
                oMultiInput.addToken(oToken);
            });
        },
        // Extract attendees from appointment data
        _extractAttendeesFromAppointment: function (oAppointment) {
            var aAttendees = [];
            // Handle different appointment types
            if (oAppointment.requiredAttendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.requiredAttendees));
            }
            if (oAppointment.optionalAttendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.optionalAttendees));
            }
            if (oAppointment.internalAttendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.internalAttendees));
            }
            if (oAppointment.guestEmail) {
                aAttendees.push({
                    name: oAppointment.guestName || oAppointment.guestEmail,
                    email: oAppointment.guestEmail,
                    status: "Free"
                });
            }
            if (oAppointment.attendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.attendees));
            }
            return aAttendees;
        },
        // Parse attendees string into objects
        _parseAttendees: function (sAttendees) {
            if (!sAttendees) return [];
            return sAttendees.split('; ').map(function (sAttendee) {
                sAttendee = sAttendee.trim();
                if (sAttendee) {
                    return {
                        name: sAttendee,
                        email: sAttendee,
                        status: "Free"
                    };
                }
                return null;
            }).filter(Boolean);
        },
        // Modified onSaveEvent method to handle attendees
        onSaveEvent: function () {
            var oViewModel = this.getView().getModel("view");
            var sPath = oViewModel.getProperty("/selectedEventPath");
            if (!sPath) {
                MessageToast.show("Error saving event");
                return;
            }
            var oModel = this.getView().getModel();
            var sTitle = oViewModel.getProperty("/selectedEvent/title");
            var oStart = oViewModel.getProperty("/selectedEvent/start");
            var oEnd = oViewModel.getProperty("/selectedEvent/end");
            var bAllDay = oViewModel.getProperty("/selectedEvent/allDay");
            var sLocation = oViewModel.getProperty("/selectedEvent/location");
            var sDescription = oViewModel.getProperty("/selectedEvent/description");
            // Get attendees from the MultiInput
            var oAttendeesInput = this.byId("eventAttendees");
            var aTokens = oAttendeesInput.getTokens();
            var sAttendees = aTokens.map(function (oToken) {
                return oToken.getKey();
            }).join("; ");
            // Validate required fields
            if (!sTitle) {
                MessageToast.show("Please enter a title for the event");
                return;
            }
            if (!oStart || !oEnd) {
                MessageToast.show("Please enter valid start and end dates");
                return;
            }
            // Validate that end time is after start time
            if (oEnd <= oStart) {
                MessageToast.show("End time must be after start time");
                return;
            }
            // Update the model via path
            oModel.setProperty(sPath + "/title", sTitle);
            oModel.setProperty(sPath + "/start", oStart);
            oModel.setProperty(sPath + "/end", oEnd);
            oModel.setProperty(sPath + "/allDay", bAllDay);
            oModel.setProperty(sPath + "/info", sLocation);
            oModel.setProperty(sPath + "/location", sLocation);
            oModel.setProperty(sPath + "/description", sDescription);
            oModel.setProperty(sPath + "/attendees", sAttendees);
            MessageToast.show("Event saved successfully");
            // Close the popover
            if (this._oEventDetailsPopover) {
                this._oEventDetailsPopover.close();
            }
            // Refresh the calendar
            this.byId("calendar").getBinding("rows").refresh();
        },
        // Modified onDiscardEvent method
        onDiscardEvent: function () {
            // Close the popover without saving
            if (this._oEventDetailsPopover) {
                this._oEventDetailsPopover.close();
            }
            MessageToast.show("Changes discarded");
        },
        // Fragment handling functions
        _openRemarksDialog: function () {
            if (!this._oRemarksDialog) {
                this._oRemarksDialog = sap.ui.xmlfragment(
                    "com.capexrevex.capexrevex.view.RemarksDialog",
                    this
                );
                this.getView().addDependent(this._oRemarksDialog);
                // Set the model for the fragment
                this._oRemarksDialog.setModel(this.getView().getModel());
                this._oRemarksDialog.setModel(this.getView().getModel("attendees"), "attendees");
            }
            // Set default values for new event (current date from 4:00 PM to 4:30 PM)
            var oEventDate = UI5Date.getInstance();
            oEventDate.setHours(16, 0, 0, 0); // 4:00 PM
            var oEnd = UI5Date.getInstance(oEventDate);
            oEnd.setHours(16, 30, 0, 0); // 4:30 PM
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", {
                title: "",
                start: oEventDate,
                end: oEnd,
                info: "",
                type: "Type01",
                icon: "",
                attendees: [],
                isNew: true // Flag to indicate it's a new appointment
            });
            this._oRemarksDialog.open();
        },
        onSaveEventFromDialog: function () {
            var oViewModel = this.getView().getModel("view");
            var oSelectedEvent = oViewModel.getProperty("/selectedEvent");
            // Get values from the dialog with proper null checks
            var oTitleControl = sap.ui.getCore().byId("eventTitle");
            var oAttendeesControl = sap.ui.getCore().byId("eventAttendees");
            var oMakeRecurringControl = sap.ui.getCore().byId("makeRecurring");
            var oAllDayControl = sap.ui.getCore().byId("allDay");
            var oInPersonControl = sap.ui.getCore().byId("inPerson");
            var oResponseOptionsControl = sap.ui.getCore().byId("responseOptions");
            var oShowAsControl = sap.ui.getCore().byId("showAs");
            var oDescriptionControl = sap.ui.getCore().byId("eventDescription");
            // Get the date and time values with proper null checks
            var oDatePicker = sap.ui.getCore().byId("eventDate");
            var oStartTimePicker = sap.ui.getCore().byId("startTime");
            var oEndTimePicker = sap.ui.getCore().byId("endTime");
            // Validate controls exist
            if (!oDatePicker || !oStartTimePicker || !oEndTimePicker) {
                MessageToast.show("Error: Date or time controls not found");
                return;
            }
            var oDate = oDatePicker.getDateValue();
            var oStartTime = oStartTimePicker.getDateValue();
            var oEndTime = oEndTimePicker.getDateValue();
            // Validate date values
            if (!oDate || !oStartTime || !oEndTime) {
                MessageToast.show("Please enter valid date and time values");
                return;
            }
            // Get other values with null checks
            var sTitle = oTitleControl ? oTitleControl.getValue() : "";
            var sAttendees = oAttendeesControl ? oAttendeesControl.getValue() : "";
            var bMakeRecurring = oMakeRecurringControl ? oMakeRecurringControl.getSelected() : false;
            var bAllDay = oAllDayControl ? oAllDayControl.getSelected() : false;
            var bInPerson = oInPersonControl ? oInPersonControl.getSelected() : "";
            var sResponseOption = oResponseOptionsControl ? oResponseOptionsControl.getSelectedKey() : "";
            var sShowAs = oShowAsControl ? oShowAsControl.getSelectedKey() : "";
            var sDescription = oDescriptionControl ? oDescriptionControl.getValue() : "";
            // Validate required title field
            // if (!sTitle) {
            //     MessageToast.show("Please enter a title for the event");
            //     return;
            // }
            // Combine date and start time
            var oStart = new Date(oDate);
            oStart.setHours(oStartTime.getHours(), oStartTime.getMinutes(), 0, 0);
            var oEnd = new Date(oDate);
            oEnd.setHours(oEndTime.getHours(), oEndTime.getMinutes(), 0, 0);
            // Validate that end time is after start time
            if (oEnd <= oStart) {
                MessageToast.show("End time must be after start time");
                return;
            }
            // Create the new appointment object with the title as the main text
            var newAppointment = {
                start: oStart,
                end: oEnd,
                title: sTitle, // Use the actual title here
                info: bInPerson, // This is secondary info
                type: "Type01",
                attendees: sAttendees,
                description: sDescription,
                recurring: bMakeRecurring,
                allDay: bAllDay,
                responseOption: sResponseOption,
                showAs: sShowAs,
                category: "Appointment",
                recurrence: bMakeRecurring ? "Recurring" : "Non-recurring",
                inPerson: bInPerson,
                organizerStatus: "sent",
                attendeeStatus: "accepted"
            };
            // Get the model and add the new appointment to the first person's calendar
            var oModel = this.getView().getModel();
            var aPeople = oModel.getProperty("/people");
            if (aPeople && aPeople.length > 0) {
                // Add to the first person's appointments
                aPeople[0].appointments.push(newAppointment);
                // Update the model
                oModel.setProperty("/people", aPeople);
                // Close the dialog
                if (this._oRemarksDialog) {
                    this._oRemarksDialog.close();
                }
                // Show success message
                MessageToast.show("Event '" + sTitle + "' has been created");
                // Refresh the calendar to show the new appointment
                this.byId("calendar").getBinding("rows").refresh(true);
            }
        },
        onCancelEventFromDialog: function () {
            // Close the dialog without saving
            if (this._oRemarksDialog) {
                this._oRemarksDialog.close();
            }
        },
        onToggleGroupMode: function () {
            var oViewModel = this.getView().getModel("view");
            var sMode = oViewModel.getProperty("/groupMode");
            oViewModel.setProperty("/groupMode", sMode === "Group" ? "None" : "Group");
            this.byId("calendar").rerender();
        },
        // Modified onExit method
        onExit: function () {
            // Clean up all fragments when the controller is destroyed
            if (this._oRemarksDialog) {
                this._oRemarksDialog.destroy();
                this._oRemarksDialog = null;
            }
            if (this._oChannelMeetingDialog) {
                this._oChannelMeetingDialog.destroy();
                this._oChannelMeetingDialog = null;
            }
            if (this._oVirtualAppointmentDialog) {
                this._oVirtualAppointmentDialog.destroy();
                this._oVirtualAppointmentDialog = null;
            }
            if (this._oEventDetailsPopover) {
                this._oEventDetailsPopover.destroy();
                this._oEventDetailsPopover = null;
            }
        }
    });
});


UPDATED CODE 5

sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/ui/core/date/UI5Date",
    "sap/ui/core/Fragment",
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/m/Token",
    "sap/ui/model/odata/v2/ODataModel"
], function (Controller, JSONModel, MessageToast, UI5Date, Fragment, Filter, FilterOperator, Token, ODataModel) {
    "use strict";
    return Controller.extend("com.capexrevex.capexrevex.controller.View1", {
        onInit: function () {
            // Set initial view to Work week
            this.byId("viewSelectButton").setText("Work week");
            // Set initial time scale and days to show
            this._updateTimeScale(30);
            this._updateWorkWeekView(5);
            // Get today's date
            var today = UI5Date.getInstance();
            // Set the calendar to start from today
            var startDate = UI5Date.getInstance(
                today.getFullYear(),
                today.getMonth(),
                today.getDate(),
                8, 0 // Start at 8 AM
            );
            // Create appointments starting from today
            var appointments = [];
            // Today's appointments
            appointments.push({
                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 9, 0),
                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 10, 0),
                title: "Team sync",
                info: "Canteen",
                type: "Type07",
                pic: "sap-icon://family-care",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "In-person",
                organizerStatus: "sent",
                attendeeStatus: "accepted"
            });
            appointments.push({
                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 11, 0),
                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 12, 0),
                title: "Client Meeting",
                info: "Conference Room",
                type: "Type01",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "In-person",
                organizerStatus: "sent",
                attendeeStatus: "tentative"
            });
            // Tomorrow's appointments
            var tomorrow = UI5Date.getInstance(today);
            tomorrow.setDate(tomorrow.getDate() + 1);
            appointments.push({
                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 10, 0),
                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 11, 30),
                title: "Project Review",
                info: "In Progress",
                type: "Type01",
                pic: "sap-icon://business-objects-experience",
                category: "Appointment",
                showAs: "Busy",
                recurrence: "Recurring",
                inPerson: "Virtual",
                organizerStatus: "draft",
                attendeeStatus: "notResponded"
            });
            appointments.push({
                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 14, 0),
                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 15, 0),
                title: "Training Session",
                info: "Online",
                type: "Type03",
                pic: "sap-icon://learning-assistant",
                category: "Appointment",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "Virtual",
                organizerStatus: "sent",
                attendeeStatus: "accepted"
            });
            // Day after tomorrow
            var dayAfter = UI5Date.getInstance(tomorrow);
            dayAfter.setDate(dayAfter.getDate() + 1);
            appointments.push({
                start: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 9, 0),
                end: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 10, 0),
                title: "Team Standup",
                info: "Daily meeting",
                type: "Type07",
                pic: "sap-icon://group",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Recurring",
                inPerson: "Hybrid",
                organizerStatus: "sent",
                attendeeStatus: "accepted"
            });
            appointments.push({
                start: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 13, 0),
                end: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 14, 30),
                title: "Lunch with Client",
                info: "Restaurant",
                type: "Type02",
                pic: "sap-icon://food",
                category: "Appointment",
                showAs: "Free",
                recurrence: "Non-recurring",
                inPerson: "In-person",
                organizerStatus: "sent",
                attendeeStatus: "declined"
            });
            // Fourth day
            var fourthDay = UI5Date.getInstance(dayAfter);
            fourthDay.setDate(fourthDay.getDate() + 1);
            appointments.push({
                start: UI5Date.getInstance(fourthDay.getFullYear(), fourthDay.getMonth(), fourthDay.getDate(), 11, 0),
                end: UI5Date.getInstance(fourthDay.getFullYear(), fourthDay.getMonth(), fourthDay.getDate(), 12, 0),
                title: "Product Demo",
                info: "Showcase new features",
                type: "Type04",
                pic: "sap-icon://presentation",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "In-person",
                organizerStatus: "sent",
                attendeeStatus: "followed"
            });
            // Fifth day
            var fifthDay = UI5Date.getInstance(fourthDay);
            fifthDay.setDate(fifthDay.getDate() + 1);
            appointments.push({
                start: UI5Date.getInstance(fifthDay.getFullYear(), fifthDay.getMonth(), fifthDay.getDate(), 10, 0),
                end: UI5Date.getInstance(fifthDay.getFullYear(), fifthDay.getMonth(), fifthDay.getDate(), 11, 30),
                title: "Planning Session",
                info: "Quarterly planning",
                type: "Type05",
                pic: "sap-icon://calendar",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Recurring",
                inPerson: "Virtual",
                organizerStatus: "sent",
                attendeeStatus: "canceled"
            });
            // Initialize the view model with data
            var oViewModel = new JSONModel({
                startDate: startDate,
                people: [
                    {
                        name: "John Doe",
                        role: "Developer",
                        appointments: appointments
                    }
                ],
                selectedEvent: {
                    title: "",
                    start: UI5Date.getInstance(),
                    end: UI5Date.getInstance(),
                    info: "",
                    type: "Type01",
                    isNew: true // Flag to identify new appointments
                },
                filters: {
                    appointments: true,
                    meetings: true,
                    reservations: false,
                    categories: [],
                    showAs: [],
                    recurrence: [],
                    inPerson: [],
                    organizer: {
                        sent: true,
                        draft: true
                    },
                    attendee: {
                        accepted: true,
                        declined: true,
                        followed: true,
                        tentative: true,
                        canceled: true,
                        notResponded: true
                    }
                },
                currentView: "Work week", // Track the current calendar view
                timeScale: "30 minutes", // Track the current time scale
                daysToShow: 5, // Track the number of days to show in work week view
                workWeekMenuOpen: false, // Track if work week submenu is open
                timeScaleMinutes: 30 // Add numeric value for time scale
            });
            // Create additional model with extended data using UI5Date
            var oModel = new JSONModel();
            oModel.setData({
                startDate: startDate,
                people: [
                    {
                        pic: "sap-icon://hr-approval/",
                        name: "John Miller",
                        role: "team member",
                        appointments: [
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 8, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 9, 0),
                                title: "Team sync",
                                info: "Canteen",
                                type: "Type07",
                                pic: "sap-icon://family-care",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "accepted"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 9, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 11, 0),
                                title: "Morning Sync",
                                info: "I call you",
                                type: "Type01",
                                pic: "sap-icon://call",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Recurring",
                                inPerson: "Virtual",
                                organizerStatus: "sent",
                                attendeeStatus: "tentative"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 10, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 12, 0),
                                title: "Sync Bill",
                                info: "Online",
                                type: "Type03",
                                category: "Appointment",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "Virtual",
                                organizerStatus: "draft",
                                attendeeStatus: "notResponded"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 10, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 13, 0),
                                title: "Check Flights",
                                info: "no room",
                                type: "Type09",
                                pic: "sap-icon://flight",
                                category: "Appointment",
                                showAs: "Free",
                                recurrence: "Non-recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "declined"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 13, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 14, 0),
                                title: "Lunch",
                                info: "canteen",
                                type: "Type05",
                                pic: "sap-icon://private",
                                category: "Appointment",
                                showAs: "Free",
                                recurrence: "Non-recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "accepted"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 18, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 20, 0),
                                title: "Discussion of the plan",
                                info: "Online meeting",
                                type: "Type04",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "Virtual",
                                organizerStatus: "sent",
                                attendeeStatus: "followed"
                            }
                        ]
                    },
                    {
                        pic: "sap-icon://hr-approval",
                        name: "Donna Moore",
                        role: "team member",
                        appointments: [
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 8, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 9, 26),
                                title: "Team sync",
                                info: "Canteen",
                                type: "Type07",
                                pic: "sap-icon://family-care",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "accepted"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 10, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 12, 0),
                                title: "Sync John",
                                info: "Online",
                                type: "Type03",
                                category: "Appointment",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "Virtual",
                                organizerStatus: "draft",
                                attendeeStatus: "notResponded"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 11, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 12, 0),
                                title: "Prep for planning",
                                info: "room 5",
                                type: "Type01",
                                pic: "sap-icon://family-care",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "canceled"
                            }
                        ]
                    },
                    {
                        pic: "sap-icon://hr-approval",
                        name: "Alex Johnson",
                        role: "team member",
                        appointments: [
                            {
                                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 9, 0),
                                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 10, 0),
                                title: "Team sync",
                                info: "Canteen",
                                type: "Type07",
                                pic: "sap-icon://family-care",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "accepted"
                            },
                            {
                                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 10, 0),
                                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 12, 0),
                                title: "Project Planning",
                                info: "Conference Room",
                                type: "Type01",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "tentative"
                            },
                            {
                                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 14, 0),
                                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 15, 0),
                                title: "Client Call",
                                info: "Online",
                                type: "Type03",
                                category: "Appointment",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "Virtual",
                                organizerStatus: "draft",
                                attendeeStatus: "notResponded"
                            }
                        ]
                    },
                    {
                        pic: "sap-icon://hr-approval",
                        name: "Sarah Williams",
                        role: "team member",
                        appointments: [
                            {
                                start: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 9, 0),
                                end: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 10, 0),
                                title: "Team sync",
                                info: "Canteen",
                                type: "Type07",
                                pic: "sap-icon://family-care",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "accepted"
                            },
                            {
                                start: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 11, 0),
                                end: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 12, 30),
                                title: "Design Review",
                                info: "Conference Room",
                                type: "Type01",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "declined"
                            }
                        ]
                    }
                ]
            });
            // Set both models to the view
            this.getView().setModel(oViewModel, "view");
            this.getView().setModel(oModel);
            // Initialize filter arrays
            this._aFilters = [];
            // Update date display in filter popover
            this._updateDateDisplay();
            // Set initial view to Work week
            this.byId("viewSelectButton").setText("Work week");
            // Set initial time scale and days to show
            this._updateTimeScale(30);
            this._updateWorkWeekView(5);
            // Create attendees model with proper structure
            var oAttendeesModel = new JSONModel({
                attendees: [
                    { name: "Ankit Jha", email: "ankit.jha@sumodigitech.com", status: "Free" },
                    { name: "Vikrant Raj", email: "vikrant.raj@sumodigitech.com", status: "Free" },
                    { name: "Pushpak Jha", email: "pushpak.jha@sumodigitech.com", status: "Busy" },
                    { name: "Pushkar Kumar Jha", email: "pushkar.jha@sumodigitech.com", status: "Tentative" },
                    { name: "Sumit Jhaldiyal", email: "sumit.jhaldiyal@sumodigitech.com", status: "Free" },
                    { name: "Mohd Aakib", email: "mohd.aakib@sumodigitech.com", status: "Free" },
                    { name: "Vikash Ojha", email: "vikash.ojha@sumodigitech.com", status: "Free" },
                    { name: "Yugal Kishore", email: "yugal.kishore@sumodigitech.com", status: "Busy" },
                ]
            });
            this.getView().setModel(oAttendeesModel, "attendees");
            // Initialize OData model for scheduling service
            var oSchedulingModel = new ODataModel({
                serviceUrl: "/schedulingservice/",
                useBatch: false
            });
            this.getView().setModel(oSchedulingModel, "scheduling");
            // Load attendees data
            this._loadAttendees();
        },
        // Load attendees from scheduling service
        _loadAttendees: function () {
            var oSchedulingModel = this.getView().getModel("scheduling");
            var oAttendeesModel = this.getView().getModel("attendees");
            var that = this;
            oSchedulingModel.read("/MeetingSchedulingSet", {
                success: function (oData) {
                    var aAttendees = [];
                    if (oData && oData.results) {
                        oData.results.forEach(function (oAttendee) {
                            aAttendees.push({
                                id: oAttendee.AttendeeID,
                                name: oAttendee.AttendeeName,
                                email: oAttendee.AttendeeEmail,
                                role: oAttendee.Role || "Attendee",
                                status: oAttendee.Status || "Free"
                            });
                        });
                    }
                    oAttendeesModel.setProperty("/attendees", aAttendees);
                    MessageToast.show("Attendees loaded successfully: " + aAttendees.length + " found");
                },
                error: function (oError) {
                    console.error("Error loading attendees:", oError);
                    MessageToast.show("Error loading attendees from service");
                }
            });
        },
        // Handle attendee suggestions in MultiInput
        onAttendeeSuggest: function (oEvent) {
            var sTerm = oEvent.getParameter("suggestValue");
            var oMultiInput = oEvent.getSource();
            var oAttendeesModel = this.getView().getModel("attendees");
            if (!oAttendeesModel) {
                return;
            }
            var aAttendees = oAttendeesModel.getProperty("/attendees") || [];
            var aFilteredAttendees = [];
            if (sTerm) {
                // Filter attendees based on search term
                aFilteredAttendees = aAttendees.filter(function (oAttendee) {
                    return oAttendee.name.toLowerCase().includes(sTerm.toLowerCase()) ||
                        oAttendee.email.toLowerCase().includes(sTerm.toLowerCase());
                });
            } else {
                aFilteredAttendees = aAttendees;
            }
            // Update suggestion items
            oMultiInput.destroySuggestionItems();
            aFilteredAttendees.forEach(function (oAttendee) {
                // Create a custom suggestion item with name, email, and status
                var oSuggestionItem = new sap.m.SuggestionItem({
                    key: oAttendee.email,
                    text: oAttendee.name,
                    description: oAttendee.email,
                    additionalText: oAttendee.status
                });
                
                // Set different icons based on status
                switch (oAttendee.status.toLowerCase()) {
                    case "free":
                        oSuggestionItem.setIcon("sap-icon://accept");
                        break;
                    case "busy":
                        oSuggestionItem.setIcon("sap-icon://busy");
                        break;
                    case "tentative":
                        oSuggestionItem.setIcon("sap-icon://question-mark");
                        break;
                    default:
                        oSuggestionItem.setIcon("sap-icon://employee");
                }
                
                oMultiInput.addSuggestionItem(oSuggestionItem);
            });
        },
        // Handle token addition in MultiInput
        onAttendeeTokenChange: function (oEvent) {
            var oMultiInput = oEvent.getSource();
            var sInputValue = oMultiInput.getValue().trim();
            if (!sInputValue) {
                return;
            }
            // Check if input is an email or should be treated as search
            if (this._isEmailValid(sInputValue)) {
                // Create token for manually entered email
                var oToken = new Token({
                    key: sInputValue,
                    text: sInputValue
                });
                oMultiInput.addToken(oToken);
                oMultiInput.setValue("");
            } else {
                // Trigger suggestion for non-email input
                this.onAttendeeSuggest(oEvent);
            }
        },
        // Validate email format
        _isEmailValid: function (sEmail) {
            var re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            return re.test(sEmail);
        },
        // Create meeting scheduling
        createMeetingScheduling: function (oMeetingData) {
            var oSchedulingModel = this.getView().getModel("scheduling");
            var that = this;
            oSchedulingModel.create("/MeetingSchedulingSet", oMeetingData, {
                success: function (oData) {
                    MessageToast.show("Meeting scheduled successfully!");
                    // Refresh attendees after creating meeting
                    that._loadAttendees();
                    // Add the meeting to the calendar
                    that._addMeetingToCalendar(oData);
                },
                error: function (oError) {
                    console.error("Error scheduling meeting:", oError);
                    MessageToast.show("Failed to schedule meeting");
                    // Fallback: Add to local calendar
                    that._addMeetingToCalendar(oMeetingData);
                }
            });
        },
        // Helper method to add meeting to calendar
        _addMeetingToCalendar: function (oMeetingData) {
            var oModel = this.getView().getModel();
            var aPeople = oModel.getProperty("/people");
            if (aPeople && aPeople.length > 0) {
                var newAppointment = {
                    start: new Date(oMeetingData.StartDateTime),
                    end: new Date(oMeetingData.EndDateTime),
                    title: oMeetingData.MeetingTitle,
                    info: oMeetingData.Location || "Online Meeting",
                    type: "Type01",
                    pic: "sap-icon://group",
                    category: "Meeting",
                    showAs: "Busy",
                    recurrence: oMeetingData.IsRecurring ? "Recurring" : "Non-recurring",
                    inPerson: oMeetingData.IsVirtual ? "Virtual" : "In-person",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted",
                    attendees: oMeetingData.Attendees || []
                };
                aPeople[0].appointments.push(newAppointment);
                oModel.setProperty("/people", aPeople);
                // Refresh calendar
                this.byId("calendar").getBinding("rows").refresh(true);
            }
        },
        // Update date display in filter popover
        _updateDateDisplay: function () {
            var oDateDisplay = this.byId("dateDisplay");
            if (oDateDisplay) {
                var today = UI5Date.getInstance();
                var options = { weekday: 'long', day: 'numeric' };
                var dateText = today.toLocaleDateString('en-US', options);
                oDateDisplay.setText(dateText);
            }
        },
        // Role-based functionality
        roles: {
            donna: "Donna Moore",
            manager: "manager",
            admin: "admin"
        },
        handleRoleChange: function () {
            this.getView().getModel().refresh(true);
        },
        getUserRole: function () {
            return this.roles[this.byId("userRole").getSelectedKey()];
        },
        canModifyAppointments: function (sRole) {
            var sUserRole = this.getUserRole();
            if (sUserRole === this.roles.manager || sUserRole === this.roles.admin || sUserRole === sRole) {
                return true;
            }
            return false;
        },
        // Filter functionality
        onFilterChange: function (oEvent) {
            var sFilterType = oEvent.getSource().getId().replace("Checkbox", "");
            var bSelected = oEvent.getParameter("selected");
            // Update filter model
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            oFilters[sFilterType.toLowerCase()] = bSelected;
            oViewModel.setProperty("/filters", oFilters);
            // Apply filters
            this.applyFilters();
        },
        applyFilters: function () {
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            // Clear existing filters
            this._aFilters = [];
            // Apply category filters
            if (!oFilters.appointments) {
                this._aFilters.push(new Filter("category", FilterOperator.NE, "Appointment"));
            }
            if (!oFilters.meetings) {
                this._aFilters.push(new Filter("category", FilterOperator.NE, "Meeting"));
            }
            if (!oFilters.reservations) {
                this._aFilters.push(new Filter("category", FilterOperator.NE, "Reservation"));
            }
            // Apply additional filters based on selected options
            if (oFilters.categories && oFilters.categories.length > 0) {
                this._aFilters.push(new Filter("category", FilterOperator.Contains, oFilters.categories.join("|")));
            }
            if (oFilters.showAs && oFilters.showAs.length > 0) {
                this._aFilters.push(new Filter("showAs", FilterOperator.Contains, oFilters.showAs.join("|")));
            }
            if (oFilters.recurrence && oFilters.recurrence.length > 0) {
                this._aFilters.push(new Filter("recurrence", FilterOperator.Contains, oFilters.recurrence.join("|")));
            }
            if (oFilters.inPerson && oFilters.inPerson.length > 0) {
                this._aFilters.push(new Filter("inPerson", FilterOperator.Contains, oFilters.inPerson.join("|")));
            }
            // Apply organizer filters
            var aOrganizerFilters = [];
            if (oFilters.organizer.sent) {
                aOrganizerFilters.push(new Filter("organizerStatus", FilterOperator.EQ, "sent"));
            }
            if (oFilters.organizer.draft) {
                aOrganizerFilters.push(new Filter("organizerStatus", FilterOperator.EQ, "draft"));
            }
            if (aOrganizerFilters.length > 0) {
                this._aFilters.push(new Filter({
                    filters: aOrganizerFilters,
                    and: false
                }));
            }
            // Apply attendee filters
            var aAttendeeFilters = [];
            if (oFilters.attendee.accepted) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "accepted"));
            }
            if (oFilters.attendee.declined) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "declined"));
            }
            if (oFilters.attendee.followed) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "followed"));
            }
            if (oFilters.attendee.tentative) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "tentative"));
            }
            if (oFilters.attendee.canceled) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "canceled"));
            }
            if (oFilters.attendee.notResponded) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "notResponded"));
            }
            if (aAttendeeFilters.length > 0) {
                this._aFilters.push(new Filter({
                    filters: aAttendeeFilters,
                    and: false
                }));
            }
            // Apply filters to the calendar
            var oCalendar = this.byId("calendar");
            var oBinding = oCalendar.getBinding("rows");
            if (this._aFilters.length > 0) {
                oBinding.filter(this._aFilters);
            } else {
                oBinding.filter([]);
            }
            // Update filter button text
            var oFilterButton = this.byId("_IDGenButton7");
            var iFilterCount = this._aFilters.length;
            oFilterButton.setText(iFilterCount > 0 ? "Filter applied (" + iFilterCount + ")" : "Filter applied");
        },
        // Filter popover handlers
        onAppointmentsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("appointmentsFilterPopover").openBy(oButton);
        },
        onMeetingsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("meetingsFilterPopover").openBy(oButton);
        },
        onReservationsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("reservationsFilterPopover").openBy(oButton);
        },
        onCategoriesFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("categoriesFilterPopover").openBy(oButton);
        },
        onShowAsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("showAsFilterPopover").openBy(oButton);
        },
        onRecurrenceFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("recurrenceFilterPopover").openBy(oButton);
        },
        onInPersonFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("inPersonFilterPopover").openBy(oButton);
        },
        // Organizer and Attendee filter handlers
        onOrganizerFilterPress: function (oEvent) {
            var oOptionsBox = this.byId("organizerOptions");
            oOptionsBox.setVisible(!oOptionsBox.getVisible());
        },
        onAttendeeFilterPress: function (oEvent) {
            var oOptionsBox = this.byId("attendeeOptions");
            oOptionsBox.setVisible(!oOptionsBox.getVisible());
        },
        onOrganizerFilterChange: function (oEvent) {
            var sId = oEvent.getSource().getId();
            var bSelected = oEvent.getParameter("selected");
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            // Update the corresponding filter property
            if (sId === "sentCheckbox") {
                oFilters.organizer.sent = bSelected;
            } else if (sId === "draftCheckbox") {
                oFilters.organizer.draft = bSelected;
            }
            oViewModel.setProperty("/filters", oFilters);
            this.applyFilters();
        },
        onAttendeeFilterChange: function (oEvent) {
            var sId = oEvent.getSource().getId();
            var bSelected = oEvent.getParameter("selected");
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            // Update the corresponding filter property
            if (sId === "acceptedCheckbox") {
                oFilters.attendee.accepted = bSelected;
            } else if (sId === "declinedCheckbox") {
                oFilters.attendee.declined = bSelected;
            } else if (sId === "followedCheckbox") {
                oFilters.attendee.followed = bSelected;
            } else if (sId === "tentativeCheckbox") {
                oFilters.attendee.tentative = bSelected;
            } else if (sId === "canceledCheckbox") {
                oFilters.attendee.canceled = bSelected;
            } else if (sId === "notRespondedCheckbox") {
                oFilters.attendee.notResponded = bSelected;
            }
            oViewModel.setProperty("/filters", oFilters);
            this.applyFilters();
        },
        onUnselectAllRight: function () {
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            // Reset organizer filters
            oFilters.organizer.sent = false;
            oFilters.organizer.draft = false;
            // Reset attendee filters
            oFilters.attendee.accepted = false;
            oFilters.attendee.declined = false;
            oFilters.attendee.followed = false;
            oFilters.attendee.tentative = false;
            oFilters.attendee.canceled = false;
            oFilters.attendee.notResponded = false;
            oViewModel.setProperty("/filters", oFilters);
            // Update the checkboxes
            this.byId("sentCheckbox").setSelected(false);
            this.byId("draftCheckbox").setSelected(false);
            this.byId("acceptedCheckbox").setSelected(false);
            this.byId("declinedCheckbox").setSelected(false);
            this.byId("followedCheckbox").setSelected(false);
            this.byId("tentativeCheckbox").setSelected(false);
            this.byId("canceledCheckbox").setSelected(false);
            this.byId("notRespondedCheckbox").setSelected(false);
            this.applyFilters();
        },
        // Unselect all handlers
        onAppointmentsUnselectAll: function () {
            this._unselectAllCheckboxes("appointmentsFilterList");
        },
        onMeetingsUnselectAll: function () {
            this._unselectAllCheckboxes("meetingsFilterList");
        },
        onReservationsUnselectAll: function () {
            this._unselectAllCheckboxes("reservationsFilterList");
        },
        onCategoriesUnselectAll: function () {
            this._unselectAllCheckboxes("categoriesFilterList");
        },
        onShowAsUnselectAll: function () {
            this._unselectAllCheckboxes("showAsFilterList");
        },
        onRecurrenceUnselectAll: function () {
            this._unselectAllCheckboxes("recurrenceFilterList");
        },
        onInPersonUnselectAll: function () {
            this._unselectAllCheckboxes("inPersonFilterList");
        },
        _unselectAllCheckboxes: function (sListId) {
            var oList = this.byId(sListId);
            var aItems = oList.getItems();
            aItems.forEach(function (oItem) {
                if (oItem.isA("sap.m.CheckBox")) {
                    oItem.setSelected(false);
                }
            });
        },
        // Filter selection handlers
        onAppointmentsFilterSelect: function (oEvent) {
            this._updateFilterArray("appointments", oEvent);
        },
        onMeetingsFilterSelect: function (oEvent) {
            this._updateFilterArray("meetings", oEvent);
        },
        onReservationsFilterSelect: function (oEvent) {
            this._updateFilterArray("reservations", oEvent);
        },
        onCategoriesFilterSelect: function (oEvent) {
            this._updateFilterArray("categories", oEvent);
        },
        onShowAsFilterSelect: function (oEvent) {
            this._updateFilterArray("showAs", oEvent);
        },
        onRecurrenceFilterSelect: function (oEvent) {
            this._updateFilterArray("recurrence", oEvent);
        },
        onInPersonFilterSelect: function (oEvent) {
            this._updateFilterArray("inPerson", oEvent);
        },
        _updateFilterArray: function (sFilterType, oEvent) {
            var sValue = oEvent.getSource().getText();
            var bSelected = oEvent.getParameter("selected");
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            if (!oFilters[sFilterType]) {
                oFilters[sFilterType] = [];
            }
            if (bSelected) {
                if (oFilters[sFilterType].indexOf(sValue) === -1) {
                    oFilters[sFilterType].push(sValue);
                }
            } else {
                var iIndex = oFilters[sFilterType].indexOf(sValue);
                if (iIndex !== -1) {
                    oFilters[sFilterType].splice(iIndex, 1);
                }
            }
            oViewModel.setProperty("/filters", oFilters);
            this.applyFilters();
        },
        onClearFilters: function () {
            // Reset all filter checkboxes
            var aCheckBoxIds = [
                "appointmentsCheckbox", "meetingsCheckbox", "reservationsCheckbox"
            ];
            aCheckBoxIds.forEach(function (sId) {
                var oCheckBox = this.byId(sId);
                if (oCheckBox) {
                    oCheckBox.setSelected(sId === "appointmentsCheckbox" || sId === "meetingsCheckbox");
                }
            }.bind(this));
            // Reset organizer and attendee filters
            this.byId("sentCheckbox").setSelected(true);
            this.byId("draftCheckbox").setSelected(true);
            this.byId("acceptedCheckbox").setSelected(true);
            this.byId("declinedCheckbox").setSelected(true);
            this.byId("followedCheckbox").setSelected(true);
            this.byId("tentativeCheckbox").setSelected(true);
            this.byId("canceledCheckbox").setSelected(true);
            this.byId("notRespondedCheckbox").setSelected(true);
            // Reset filter arrays in model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/filters", {
                appointments: true,
                meetings: true,
                reservations: false,
                categories: [],
                showAs: [],
                recurrence: [],
                inPerson: [],
                organizer: {
                    sent: true,
                    draft: true
                },
                attendee: {
                    accepted: true,
                    declined: true,
                    followed: true,
                    tentative: true,
                    canceled: true,
                    notResponded: true
                }
            });
            // Apply empty filters
            this._aFilters = [];
            var oCalendar = this.byId("calendar");
            oCalendar.getBinding("rows").filter([]);
            // Update filter button text
            this.byId("_IDGenButton7").setText("Filter applied");
            MessageToast.show("All filters cleared");
        },
        // Drag and Drop functionality
        handleAppointmentDragEnter: function (oEvent) {
            if (this.isAppointmentOverlap(oEvent, oEvent.getParameter("calendarRow"))) {
                oEvent.preventDefault();
            }
        },
        handleAppointmentDrop: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                oCalendarRow = oEvent.getParameter("calendarRow"),
                bCopy = oEvent.getParameter("copy"),
                sTitle = oAppointment.getTitle(),
                oModel = this.getView().getModel(),
                oAppBindingContext = oAppointment.getBindingContext(),
                oRowBindingContext = oCalendarRow.getBindingContext(),
                handleAppointmentDropBetweenRows = function () {
                    var aPath = oAppBindingContext.getPath().split("/"),
                        iIndex = aPath.pop(),
                        sRowAppointmentsPath = aPath.join("/");
                    oRowBindingContext.getObject().appointments.push(
                        oModel.getProperty(oAppBindingContext.getPath())
                    );
                    oModel.getProperty(sRowAppointmentsPath).splice(iIndex, 1);
                };
            if (bCopy) { // "copy" appointment
                var oProps = Object.assign({}, oModel.getProperty(oAppointment.getBindingContext().getPath()));
                oProps.start = oStartDate;
                oProps.end = oEndDate;
                oRowBindingContext.getObject().appointments.push(oProps);
            } else { // "move" appointment
                oModel.setProperty("start", oStartDate, oAppBindingContext);
                oModel.setProperty("end", oEndDate, oAppBindingContext);
                if (oAppointment.getParent() !== oCalendarRow) {
                    handleAppointmentDropBetweenRows();
                }
            }
            oModel.refresh(true);
        },
        handleAppointmentResize: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate");
            if (!this.isAppointmentOverlap(oEvent, oAppointment.getParent())) {
                oAppointment
                    .setStartDate(oStartDate)
                    .setEndDate(oEndDate);
            } else {
                MessageToast.show("As a manager you can not resize events if they overlap with another events");
            }
        },
        // Modified handleAppointmentCreate to open event details fragment
        handleAppointmentCreate: function (oEvent) {
            var oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                oPlanningCalendarRow = oEvent.getParameter("calendarRow"),
                oModel = this.getView().getModel(),
                sPath = oPlanningCalendarRow.getBindingContext().getPath();
            // Create a new appointment object
            var newAppointment = {
                title: "New Appointment",
                start: oStartDate,
                end: oEndDate,
                info: "",
                type: "Type01",
                category: "Appointment",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "In-person",
                organizerStatus: "sent",
                attendeeStatus: "accepted",
                isNew: true // Flag to indicate it's a new appointment
            };
            // Set the selected event in the view model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", newAppointment);
            // Open the event details fragment
            this._openEventDetailsPopover(oEvent.getParameter("domRef"));
            MessageToast.show("New Appointment is created at \n" + oStartDate + "\n and end at \n" + oEndDate + ".");
        },
        isAppointmentOverlap: function (oEvent, oCalendarRow) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                bAppointmentOverlapped;
            if (this.getUserRole() === this.roles.manager) {
                bAppointmentOverlapped = oCalendarRow.getAppointments().some(function (oCurrentAppointment) {
                    if (oCurrentAppointment === oAppointment) {
                        return;
                    }
                    var oAppStartTime = oCurrentAppointment.getStartDate().getTime(),
                        oAppEndTime = oCurrentAppointment.getEndDate().getTime();
                    if (oAppStartTime <= oStartDate.getTime() && oStartDate.getTime() < oAppEndTime) {
                        return true;
                    }
                    if (oAppStartTime < oEndDate.getTime() && oEndDate.getTime() <= oAppEndTime) {
                        return true;
                    }
                    if (oStartDate.getTime() <= oAppStartTime && oAppStartTime < oEndDate.getTime()) {
                        return true;
                    }
                });
            }
            return bAppointmentOverlapped;
        },
        // Toolbar and UI functionality
        onTodayPress: function () {
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/startDate", UI5Date.getInstance());
            MessageToast.show("Navigated to today");
        },
        onViewSelectPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oViewPopover = this.byId("viewPopover");
            // Close other popovers
            this.byId("filterPopover").close();
            this.byId("newEventPopover").close();
            this.byId("eventDetailsPopover").close();
            // Toggle view popover
            if (!oViewPopover.isOpen()) {
                oViewPopover.openBy(oButton);
            } else {
                oViewPopover.close();
            }
        },
        onFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oFilterPopover = this.byId("filterPopover");
            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("newEventPopover").close();
            this.byId("eventDetailsPopover").close();
            // Toggle filter popover
            if (!oFilterPopover.isOpen()) {
                oFilterPopover.openBy(oButton);
            } else {
                oFilterPopover.close();
            }
        },
        onMeetNowPress: function () {
            MessageToast.show("Starting meeting now...");
        },
        onNewEventPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oNewEventPopover = this.byId("newEventPopover");
            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("filterPopover").close();
            this.byId("eventDetailsPopover").close();
            // Toggle new event popover
            if (!oNewEventPopover.isOpen()) {
                oNewEventPopover.openBy(oButton);
            } else {
                oNewEventPopover.close();
            }
        },
        onNotificationPress: function () {
            MessageToast.show("No new notifications");
        },
        // Work week menu functionality
        onWorkWeekMenuPress: function (oEvent) {
            var oViewModel = this.getView().getModel("view");
            var bMenuOpen = oViewModel.getProperty("/workWeekMenuOpen");
            // Toggle the menu visibility
            oViewModel.setProperty("/workWeekMenuOpen", !bMenuOpen);
            // Update the arrow icon direction
            var oButton = this.byId("_IDGenWorkWeekButton");
            oButton.setIcon(!bMenuOpen ? "sap-icon://slim-arrow-down" : "sap-icon://slim-arrow-right");
        },
        // Time scale dropdown change handler
        onTimeScaleChange: function (oEvent) {
            var oViewModel = this.getView().getModel("view");
            var oSource = oEvent.getSource();
            var sSelectedKey = oSource.getSelectedKey();
            // Extract the number of minutes from the selected key
            var iMinutes = parseInt(sSelectedKey);
            // Update the model
            oViewModel.setProperty("/timeScale", iMinutes + " minutes");
            oViewModel.setProperty("/timeScaleMinutes", iMinutes);
            // Get current days to show
            var iDays = oViewModel.getProperty("/daysToShow");
            // Update the button text to show both days and time scale
            var oButton = this.byId("viewSelectButton");
            oButton.setText("Work week (" + iDays + " days, " + iMinutes + " min)");
            // Update the calendar's time scale
            this._updateTimeScale(iMinutes);
            // Make sure we're in Work week view
            var oCalendar = this.byId("calendar");
            oCalendar.setViewKey("Workweek");
            oViewModel.setProperty("/currentView", "Work week");
            MessageToast.show("Time scale changed to: " + iMinutes + " minutes");
        },
        // Days to show dropdown change handler
        onDaysToShowChange: function (oEvent) {
            var oViewModel = this.getView().getModel("view");
            var oSource = oEvent.getSource();
            var iDays = parseInt(oSource.getSelectedKey());
            // Update the model
            oViewModel.setProperty("/daysToShow", iDays);
            // Get current time scale
            var sTimeScale = oViewModel.getProperty("/timeScale");
            var iMinutes = parseInt(sTimeScale.match(/\d+/)[0]);
            // Update the button text to show both days and time scale
            var oButton = this.byId("viewSelectButton");
            oButton.setText("Work week (" + iDays + " days, " + iMinutes + " min)");
            // Update the work week view
            this._updateWorkWeekView(iDays);
            // Make sure we're in Work week view
            var oCalendar = this.byId("calendar");
            oCalendar.setViewKey("Workweek");
            oViewModel.setProperty("/currentView", "Work week");
            MessageToast.show("Work week now shows " + iDays + " days");
        },
        // Days dropdown change handler (main view selection)
        onDaysChange: function (oEvent) {
            var oSource = oEvent.getSource();
            var iDays = parseInt(oSource.getSelectedKey());
            // Update the model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/daysToShow", iDays);
            // Set the current view to Work week
            oViewModel.setProperty("/currentView", "Work week");
            // Update the button text
            var oButton = this.byId("viewSelectButton");
            var sTimeScale = oViewModel.getProperty("/timeScale");
            var iMinutes = parseInt(sTimeScale.match(/\d+/)[0]);
            oButton.setText("Work week (" + iDays + " days, " + iMinutes + " min)");
            // Update the calendar
            var oCalendar = this.byId("calendar");
            oCalendar.setViewKey("Workweek");
            // Update the work week view
            this._updateWorkWeekView(iDays);
            // Close the popover
            this.byId("viewPopover").close();
            MessageToast.show("Work week now shows " + iDays + " days");
        },
        onViewSelected: function (oEvent) {
            var sSelectedView = oEvent.getParameter("listItem").getTitle();
            var oButton = this.byId("viewSelectButton");
            var oCalendar = this.byId("calendar");
            var oViewModel = this.getView().getModel("view");
            // Close the popover first
            this.byId("viewPopover").close();
            // Handle regular view selection
            if (sSelectedView === "Work week") {
                oButton.setText(sSelectedView);
                oViewModel.setProperty("/currentView", sSelectedView);
                // Update calendar view
                oCalendar.setViewKey("Workweek");
                // Get current settings
                var iDaysToShow = oViewModel.getProperty("/daysToShow");
                var sTimeScale = oViewModel.getProperty("/timeScale");
                var iMinutes = parseInt(sTimeScale.match(/\d+/)[0]);
                // Update button text to show both days and time scale
                oButton.setText("Work week (" + iDaysToShow + " days, " + iMinutes + " min)");
                // Update the work week view and time scale
                this._updateWorkWeekView(iDaysToShow);
                this._updateTimeScale(iMinutes);
                MessageToast.show("View changed to: " + sSelectedView);
            } else if (sSelectedView === "Week") {
                oButton.setText(sSelectedView);
                oViewModel.setProperty("/currentView", sSelectedView);
                // Update calendar view
                oCalendar.setViewKey("Week");
                // Force refresh to ensure proper rendering
                oCalendar.rerender();
                MessageToast.show("View changed to: " + sSelectedView);
            } else if (sSelectedView === "Month") {
                oButton.setText(sSelectedView);
                oViewModel.setProperty("/currentView", sSelectedView);
                // Update calendar view
                oCalendar.setViewKey("Month");
                // Force refresh to ensure proper rendering
                oCalendar.rerender();
                MessageToast.show("View changed to: " + sSelectedView);
            } else if (sSelectedView === "Split view") {
                MessageToast.show("Split view feature coming soon");
            }
        },
        _switchCalendarView: function (sViewKey) {
            var oCalendar = this.byId("calendar");
            var oViewModel = this.getView().getModel("view");
            // Set the view key
            oCalendar.setViewKey(sViewKey);
            // Update the current view in the model
            oViewModel.setProperty("/currentView", sViewKey);
            // Force a rerender to ensure proper display
            oCalendar.rerender();
        },
        _updateTimeScale: function (iMinutes) {
            var oCalendar = this.byId("calendar");
            var oViewModel = this.getView().getModel("view");
            var sCurrentView = oViewModel;
            // Only update time scale for Day and Work week views
            if (sCurrentView === "Day" || sCurrentView === "Work week") {
                var oView = oCalendar.getViews().find(function (view) {
                    return view.getKey() === (sCurrentView === "Work week" ? "Workweek" : sCurrentView);
                });
                if (oView) {
                    // Calculate the number of intervals based on the selected minutes
                    var iTotalMinutes = 24 * 60; // 24 hours in minutes
                    var iIntervals = iTotalMinutes / iMinutes;
                    // Update the view settings
                    oView.setIntervalsS(iIntervals);
                    oView.setIntervalsM(iIntervals);
                    oView.setIntervalsL(iIntervals);
                    oView.setIntervalType("Minute"); // Use string value directly
                    // Refresh the calendar
                    oCalendar.rerender();
                }
            }
        },
        _updateWorkWeekView: function (iDays) {
            var oCalendar = this.byId("calendar");
            var oView = oCalendar.getViews().find(function (view) {
                return view.getKey() === "Workweek";
            });
            if (oView) {
                // Update the number of days to show
                oView.setIntervalsS(iDays);
                oView.setIntervalsM(iDays);
                oView.setIntervalsL(iDays);
                // Refresh the calendar
                oCalendar.rerender();
            }
        },
        onSavedViewsPress: function () {
            // MessageToast.show("Saved views feature coming soon");
        },
        onNewEventTypeSelected: function (oEvent) {
            var sEventType = oEvent.getSource().getTitle();
            this.byId("newEventPopover").close();
            if (sEventType === "Channel meeting") {
                this._openChannelMeetingDialog();
            } else if (sEventType === "Event") {
                this._openRemarksDialog();
            } else if (sEventType === "Virtual appointment") {
                this._openVirtualAppointmentDialog();
            } else {
                MessageToast.show("Creating new: " + sEventType);
            }
        },
        // Open the Channel Meeting Dialog
        _openChannelMeetingDialog: function () {
            var that = this;
            if (!this._oChannelMeetingDialog) {
                Fragment.load({
                    id: this.getView().getId(),
                    name: "com.capexrevex.capexrevex.view.ChannelMeetingDialog",
                    controller: this
                }).then(function (oDialog) {
                    that._oChannelMeetingDialog = oDialog;
                    that.getView().addDependent(that._oChannelMeetingDialog);
                    // Set default values for new channel meeting
                    that._setDefaultChannelMeetingValues();
                    // Set the model for the fragment
                    that._oChannelMeetingDialog.setModel(that.getView().getModel());
                    that._oChannelMeetingDialog.setModel(that.getView().getModel("attendees"), "attendees");
                    that._oChannelMeetingDialog.open();
                }).catch(function (error) {
                    console.error("Error loading channel meeting dialog:", error);
                    MessageToast.show("Error loading meeting dialog");
                });
            } else {
                // Set default values for the meeting
                this._setDefaultChannelMeetingValues();
                // Set the model for the fragment
                this._oChannelMeetingDialog.setModel(this.getView().getModel());
                this._oChannelMeetingDialog.setModel(this.getView().getModel("attendees"), "attendees");
                this._oChannelMeetingDialog.open();
            }
        },
        // Open the Virtual Appointment Dialog
        _openVirtualAppointmentDialog: function () {
            var that = this;
            if (!this._oVirtualAppointmentDialog) {
                Fragment.load({
                    id: this.getView().getId(),
                    name: "com.capexrevex.capexrevex.view.VirtualAppointmentDialog",
                    controller: this
                }).then(function (oDialog) {
                    that._oVirtualAppointmentDialog = oDialog;
                    that.getView().addDependent(that._oVirtualAppointmentDialog);
                    // Set default values for virtual appointment
                    that._setDefaultVirtualAppointmentValues();
                    // Set the model for the fragment
                    that._oVirtualAppointmentDialog.setModel(that.getView().getModel());
                    that._oVirtualAppointmentDialog.setModel(that.getView().getModel("attendees"), "attendees");
                    that._oVirtualAppointmentDialog.open();
                }).catch(function (error) {
                    console.error("Error loading virtual appointment dialog:", error);
                    MessageToast.show("Error loading virtual appointment dialog");
                });
            } else {
                // Set default values for the appointment
                this._setDefaultVirtualAppointmentValues();
                // Set the model for the fragment
                this._oVirtualAppointmentDialog.setModel(this.getView().getModel());
                this._oVirtualAppointmentDialog.setModel(this.getView().getModel("attendees"), "attendees");
                this._oVirtualAppointmentDialog.open();
            }
        },
        _setDefaultChannelMeetingValues: function () {
            // Set default date and time (current date, 3:00 PM to 3:30 PM)
            var oNow = UI5Date.getInstance();
            var oStart = UI5Date.getInstance(oNow);
            oStart.setHours(15, 0, 0, 0); // 3:00 PM
            var oEnd = UI5Date.getInstance(oStart);
            oEnd.setHours(15, 30, 0, 0); // 3:30 PM
            // Set values in the dialog if it exists
            if (this._oChannelMeetingDialog) {
                var oStartDate = Fragment.byId(this.getView().getId(), "startDate");
                var oStartTime = Fragment.byId(this.getView().getId(), "startTime");
                var oEndDate = Fragment.byId(this.getView().getId(), "endDate");
                var oEndTime = Fragment.byId(this.getView().getId(), "endTime");
                if (oStartDate) oStartDate.setDateValue(oStart);
                if (oStartTime) oStartTime.setDateValue(oStart);
                if (oEndDate) oEndDate.setDateValue(oEnd);
                if (oEndTime) oEndTime.setDateValue(oEnd);
            }
        },
        _setDefaultVirtualAppointmentValues: function () {
            // Set default date and time (current date, 4:30 PM to 5:00 PM)
            var oNow = UI5Date.getInstance();
            var oStart = UI5Date.getInstance(oNow);
            oStart.setHours(16, 30, 0, 0); // 4:30 PM
            var oEnd = UI5Date.getInstance(oStart);
            oEnd.setHours(17, 0, 0, 0); // 5:00 PM
            // Set values in the dialog if it exists
            if (this._oVirtualAppointmentDialog) {
                var oStartDate = Fragment.byId(this.getView().getId(), "virtualStartDate");
                var oStartTime = Fragment.byId(this.getView().getId(), "virtualStartTime");
                var oEndDate = Fragment.byId(this.getView().getId(), "virtualEndDate");
                var oEndTime = Fragment.byId(this.getView().getId(), "virtualEndTime");
                if (oStartDate) oStartDate.setDateValue(oStart);
                if (oStartTime) {
                    oStartTime.setDateValue(oStart);
                    // Set minutes step based on current time scale
                    var oViewModel = this.getView().getModel("view");
                    var iMinutes = oViewModel.getProperty("/timeScaleMinutes");
                    oStartTime.setMinutesStep(iMinutes);
                }
                if (oEndDate) oEndDate.setDateValue(oEnd);
                if (oEndTime) {
                    oEndTime.setDateValue(oEnd);
                    // Set minutes step based on current time scale
                    var oViewModel = this.getView().getModel("view");
                    var iMinutes = oViewModel.getProperty("/timeScaleMinutes");
                    oEndTime.setMinutesStep(iMinutes);
                }
                // Set default recurrence to "none"
                var oRecurrenceSelect = Fragment.byId(this.getView().getId(), "virtualRecurrence");
                if (oRecurrenceSelect) {
                    oRecurrenceSelect.setSelectedKey("none");
                }
            }
        },
        // Save Channel Meeting
        onSaveChannelMeeting: function () {
            try {
                // Get values from the dialog
                var sTitle = Fragment.byId(this.getView().getId(), "meetingTitle").getValue();
                // Get required attendees
                var oRequiredAttendees = Fragment.byId(this.getView().getId(), "requiredAttendees");
                var aRequiredTokens = oRequiredAttendees.getTokens();
                var sRequiredAttendees = aRequiredTokens.map(function (oToken) {
                    return oToken.getKey();
                }).join("; ");
                // Get optional attendees
                var oOptionalAttendees = Fragment.byId(this.getView().getId(), "optionalAttendees");
                var aOptionalTokens = oOptionalAttendees.getTokens();
                var sOptionalAttendees = aOptionalTokens.map(function (oToken) {
                    return oToken.getKey();
                }).join("; ");
                
                // Get date and time values properly
                var oStartDateControl = Fragment.byId(this.getView().getId(), "startDate");
                var oStartTimeControl = Fragment.byId(this.getView().getId(), "startTime");
                var oEndDateControl = Fragment.byId(this.getView().getId(), "endDate");
                var oEndTimeControl = Fragment.byId(this.getView().getId(), "endTime");
                
                var oStartDate = oStartDateControl ? oStartDateControl.getDateValue() : null;
                var oStartTime = oStartTimeControl ? oStartTimeControl.getDateValue() : null;
                var oEndDate = oEndDateControl ? oEndDateControl.getDateValue() : null;
                var oEndTime = oEndTimeControl ? oEndTimeControl.getDateValue() : null;
                
                var bAllDay = Fragment.byId(this.getView().getId(), "allDayCheckbox").getSelected();
                var sChannel = Fragment.byId(this.getView().getId(), "channelInput").getValue();
                var sLocation = Fragment.byId(this.getView().getId(), "locationInput").getValue();
                var bOnlineMeeting = Fragment.byId(this.getView().getId(), "onlineMeetingCheckbox").getSelected();
                var sDetails = Fragment.byId(this.getView().getId(), "meetingDetails").getValue();
                var sAgenda = Fragment.byId(this.getView().getId(), "meetingAgenda").getValue();
                
                // Validate required fields
                if (!sTitle) {
                    MessageToast.show("Please enter a title for the meeting");
                    return;
                }
                
                // Validate date controls exist
                if (!oStartDate || !oEndDate) {
                    MessageToast.show("Please select valid dates");
                    return;
                }
                
                // Combine date and time
                var oStart = new Date(oStartDate);
                if (!bAllDay && oStartTime) {
                    oStart.setHours(oStartTime.getHours(), oStartTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oStart.setHours(0, 0, 0, 0);
                }
                
                var oEnd = new Date(oEndDate);
                if (!bAllDay && oEndTime) {
                    oEnd.setHours(oEndTime.getHours(), oEndTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oEnd.setHours(23, 59, 59, 999);
                }
                
                // Validate that end time is after start time
                if (oEnd <= oStart) {
                    MessageToast.show("End time must be after start time");
                    return;
                }
                
                // Create the new appointment object
                var newAppointment = {
                    start: oStart,
                    end: oEnd,
                    title: sTitle,
                    info: "Channel: " + sChannel + (sLocation ? " | Location: " + sLocation : ""),
                    type: "Type01",
                    pic: "sap-icon://group",
                    requiredAttendees: sRequiredAttendees,
                    optionalAttendees: sOptionalAttendees,
                    details: sDetails,
                    agenda: sAgenda,
                    allDay: bAllDay,
                    onlineMeeting: bOnlineMeeting,
                    category: "Meeting",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: bOnlineMeeting ? "Virtual" : "In-person",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted"
                };
                
                // Get the model and add the new appointment to the first person's calendar
                var oModel = this.getView().getModel();
                var aPeople = oModel.getProperty("/people");
                if (aPeople && aPeople.length > 0) {
                    // Add to the first person's appointments
                    aPeople[0].appointments.push(newAppointment);
                    // Update the model
                    oModel.setProperty("/people", aPeople);
                    // Show success message
                    MessageToast.show("Channel meeting '" + sTitle + "' has been created");
                    // Close the dialog
                    this._oChannelMeetingDialog.close();
                    // Refresh the calendar to show the new appointment
                    this.byId("calendar").getBinding("rows").refresh(true);
                } else {
                    MessageToast.show("Error: Could not find calendar to add meeting");
                }
            } catch (error) {
                console.error("Error saving channel meeting:", error);
                MessageToast.show("Error creating meeting. Please try again.");
            }
        },
        // Save Virtual Appointment
        onSaveVirtualAppointment: function () {
            try {
                // Get values from the dialog
                var sTitle = Fragment.byId(this.getView().getId(), "virtualTitle").getValue();
                var sGuestName = Fragment.byId(this.getView().getId(), "guestName").getValue();
                var sGuestEmail = Fragment.byId(this.getView().getId(), "guestEmail").getValue();
                
                // Get internal attendees
                var oInternalAttendees = Fragment.byId(this.getView().getId(), "internalAttendees");
                var aInternalTokens = oInternalAttendees.getTokens();
                var sInternalAttendees = aInternalTokens.map(function (oToken) {
                    return oToken.getKey();
                }).join("; ");
                
                // Get date and time values properly
                var oStartDateControl = Fragment.byId(this.getView().getId(), "virtualStartDate");
                var oStartTimeControl = Fragment.byId(this.getView().getId(), "virtualStartTime");
                var oEndDateControl = Fragment.byId(this.getView().getId(), "virtualEndDate");
                var oEndTimeControl = Fragment.byId(this.getView().getId(), "virtualEndTime");
                
                var oStartDate = oStartDateControl ? oStartDateControl.getDateValue() : null;
                var oStartTime = oStartTimeControl ? oStartTimeControl.getDateValue() : null;
                var oEndDate = oEndDateControl ? oEndDateControl.getDateValue() : null;
                var oEndTime = oEndTimeControl ? oEndTimeControl.getDateValue() : null;
                
                var bAllDay = Fragment.byId(this.getView().getId(), "virtualAllDay").getSelected();
                var sLocation = Fragment.byId(this.getView().getId(), "virtualLocation").getValue();
                var sPresenterOptions = Fragment.byId(this.getView().getId(), "presenterOptions").getSelectedKey();
                var bRecordAutomatically = Fragment.byId(this.getView().getId(), "recordAutomatically").getSelected();
                var sMeetingChat = Fragment.byId(this.getView().getId(), "meetingChat").getSelectedKey();
                var sMessage = Fragment.byId(this.getView().getId(), "virtualMessage").getValue();
                
                // Validate required fields
                if (!sTitle) {
                    MessageToast.show("Please enter a title for the appointment");
                    return;
                }
                
                if (!sGuestName || !sGuestEmail) {
                    MessageToast.show("Please enter guest name and email");
                    return;
                }
                
                // Validate date controls exist
                if (!oStartDate || !oEndDate) {
                    MessageToast.show("Please select valid dates");
                    return;
                }
                
                // Combine date and time
                var oStart = new Date(oStartDate);
                if (!bAllDay && oStartTime) {
                    oStart.setHours(oStartTime.getHours(), oStartTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oStart.setHours(0, 0, 0, 0);
                }
                
                var oEnd = new Date(oEndDate);
                if (!bAllDay && oEndTime) {
                    oEnd.setHours(oEndTime.getHours(), oEndTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oEnd.setHours(23, 59, 59, 999);
                }
                
                // Validate that end time is after start time
                if (oEnd <= oStart) {
                    MessageToast.show("End time must be after start time");
                    return;
                }
                
                // Create the new appointment object
                var newAppointment = {
                    start: oStart,
                    end: oEnd,
                    title: sTitle,
                    info: "Virtual Appointment with " + sGuestName + " (" + sGuestEmail + ")",
                    type: "Type01",
                    pic: "sap-icon://video",
                    internalAttendees: sInternalAttendees,
                    location: sLocation,
                    presenterOptions: sPresenterOptions,
                    recordAutomatically: bRecordAutomatically,
                    meetingChat: sMeetingChat,
                    message: sMessage,
                    allDay: bAllDay,
                    isVirtual: true,
                    category: "Appointment",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: "Virtual",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted"
                };
                
                // Get the model and add the new appointment to the first person's calendar
                var oModel = this.getView().getModel();
                var aPeople = oModel.getProperty("/people");
                if (aPeople && aPeople.length > 0) {
                    // Add to the first person's appointments
                    aPeople[0].appointments.push(newAppointment);
                    // Update the model
                    oModel.setProperty("/people", aPeople);
                    // Show success message
                    MessageToast.show("Virtual appointment '" + sTitle + "' has been created");
                    // Close the dialog
                    this._oVirtualAppointmentDialog.close();
                    // Refresh the calendar to show the new appointment
                    this.byId("calendar").getBinding("rows").refresh(true);
                } else {
                    MessageToast.show("Error: Could not find calendar to add appointment");
                }
            } catch (error) {
                console.error("Error saving virtual appointment:", error);
                MessageToast.show("Error creating appointment. Please try again.");
            }
        },
        // Cancel Channel Meeting
        onCancelChannelMeeting: function () {
            // Close the dialog without saving
            if (this._oChannelMeetingDialog) {
                this._oChannelMeetingDialog.close();
            }
            MessageToast.show("Channel meeting creation cancelled");
        },
        // Cancel Virtual Appointment
        onCancelVirtualAppointment: function () {
            // Close the dialog without saving
            if (this._oVirtualAppointmentDialog) {
                this._oVirtualAppointmentDialog.close();
            }
            MessageToast.show("Virtual appointment creation cancelled");
        },
        // Add additional guest
        onAddGuest: function () {
            MessageToast.show("Additional guest feature coming soon");
        },
        // Handle All Day checkbox changes
        onAllDayChange: function (oEvent) {
            var bAllDay = oEvent.getParameter("selected");
            var oStartInput = this.byId("eventStart");
            var oEndInput = this.byId("eventEnd");
            if (bAllDay) {
                // Hide time part for all-day events
                oStartInput.setDisplayFormat("MM/dd/yyyy");
                oEndInput.setDisplayFormat("MM/dd/yyyy");
                // Set times to beginning and end of day
                var oStart = oStartInput.getDateValue();
                var oEnd = oEndInput.getDateValue();
                if (oStart) {
                    oStart.setHours(0, 0, 0, 0);
                    oStartInput.setDateValue(oStart);
                }
                if (oEnd) {
                    oEnd.setHours(23, 59, 59, 999);
                    oEndInput.setDateValue(oEnd);
                }
            } else {
                // Show date and time
                oStartInput.setDisplayFormat("MM/dd/yyyy hh:mm a");
                oEndInput.setDisplayFormat("MM/dd/yyyy hh:mm a");
                // Set default times if they were set to beginning/end of day
                var oStart = oStartInput.getDateValue();
                var oEnd = oEndInput.getDateValue();
                if (oStart && oStart.getHours() === 0) {
                    oStart.setHours(9, 0, 0, 0); // Default to 9 AM
                    oStartInput.setDateValue(oStart);
                }
                if (oEnd && oEnd.getHours() === 23) {
                    oEnd.setHours(10, 0, 0, 0); // Default to 10 AM
                    oEndInput.setDateValue(oEnd);
                }
            }
        },
        // Modified onAppointmentSelect method
        onAppointmentSelect: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment");
            var oBindingContext = oAppointment.getBindingContext();
            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("filterPopover").close();
            this.byId("newEventPopover").close();
            // Get appointment data
            var oAppointmentData = oBindingContext.getObject();
            // Extract attendees from appointment
            var aAttendees = this._extractAttendeesFromAppointment(oAppointmentData);
            // Update selected event in model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", {
                title: oAppointmentData.title,
                start: oAppointmentData.start,
                end: oAppointmentData.end,
                info: oAppointmentData.info || "",
                type: oAppointmentData.type || "Type01",
                icon: oAppointmentData.icon || "",
                location: oAppointmentData.location || "",
                description: oAppointmentData.description || "",
                allDay: oAppointmentData.allDay || false,
                attendees: aAttendees,
                isNew: false // Flag to indicate it's an existing appointment
            });
            // Open event details popover using the new fragment
            this._openEventDetailsPopover(oEvent.getParameter("domRef"));
        },
        // Modified onIntervalSelect method
        onIntervalSelect: function (oEvent) {
            var oInterval = oEvent.getParameter("interval");
            var oStartDate = oInterval.getStartDate();
            var oEndDate = oInterval.getEndDate();
            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("filterPopover").close();
            this.byId("newEventPopover").close();
            // Update selected event in model with new interval
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", {
                title: "New Event",
                start: oStartDate,
                end: oEndDate,
                info: "",
                type: "Type01",
                icon: "",
                location: "",
                description: "",
                allDay: false,
                attendees: [],
                isNew: true // Flag to indicate it's a new appointment
            });
            // Open event details popover using the new fragment
            this._openEventDetailsPopover(oEvent.getParameter("domRef"));
        },
        // Add this method to open the event details popover
        _openEventDetailsPopover: function (oSource) {
            var that = this;
            // Load the fragment if not already loaded
            if (!this._oEventDetailsPopover) {
                Fragment.load({
                    id: this.getView().getId(),
                    name: "com.capexrevex.capexrevex.view.EventDetailsDialog",
                    controller: this
                }).then(function (oPopover) {
                    that._oEventDetailsPopover = oPopover;
                    that.getView().addDependent(that._oEventDetailsPopover);
                    // Set the model for the fragment
                    that._oEventDetailsPopover.setModel(that.getView().getModel());
                    that._oEventDetailsPopover.setModel(that.getView().getModel("attendees"), "attendees");
                    that._oEventDetailsPopover.openBy(oSource);
                });
            } else {
                // Set the model for the fragment
                this._oEventDetailsPopover.setModel(this.getView().getModel());
                this._oEventDetailsPopover.setModel(this.getView().getModel("attendees"), "attendees");
                this._oEventDetailsPopover.openBy(oSource);
            }
        },
        // Extract attendees from appointment data
        _extractAttendeesFromAppointment: function (oAppointment) {
            var aAttendees = [];
            // Handle different appointment types
            if (oAppointment.requiredAttendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.requiredAttendees));
            }
            if (oAppointment.optionalAttendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.optionalAttendees));
            }
            if (oAppointment.internalAttendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.internalAttendees));
            }
            if (oAppointment.guestEmail) {
                aAttendees.push({
                    name: oAppointment.guestName || oAppointment.guestEmail,
                    email: oAppointment.guestEmail,
                    status: "Free"
                });
            }
            if (oAppointment.attendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.attendees));
            }
            return aAttendees;
        },
        // Parse attendees string into objects
        _parseAttendees: function (sAttendees) {
            if (!sAttendees) return [];
            return sAttendees.split(';').map(function (sAttendee) {
                sAttendee = sAttendee.trim();
                if (sAttendee) {
                    return {
                        name: sAttendee,
                        email: sAttendee,
                        status: "Free"
                    };
                }
                return null;
            }).filter(Boolean);
        },
        // Modified onSaveEvent method to handle attendees
        onSaveEvent: function () {
            var oViewModel = this.getView().getModel("view");
            var oSelectedEvent = oViewModel.getProperty("/selectedEvent");
            // Get values from the form
            var sTitle = this.byId("eventTitle").getValue();
            var oStart = this.byId("eventStart").getDateValue();
            var oEnd = this.byId("eventEnd").getDateValue();
            var bAllDay = this.byId("allDayCheckbox").getSelected();
            var sLocation = this.byId("eventLocation").getValue();
            var sDescription = this.byId("eventDescription").getValue();
            // Get attendees from the MultiInput
            var oAttendeesInput = this.byId("eventAttendees");
            var aTokens = oAttendeesInput.getTokens();
            var aAttendees = aTokens.map(function (oToken) {
                return {
                    name: oToken.getText(),
                    email: oToken.getKey()
                };
            });
            // Validate required fields
            if (!sTitle) {
                MessageToast.show("Please enter a title for the event");
                return;
            }
            if (!oStart || !oEnd) {
                MessageToast.show("Please enter valid start and end dates");
                return;
            }
            // Validate that end time is after start time
            if (oEnd <= oStart) {
                MessageToast.show("End time must be after start time");
                return;
            }
            // Update the selected event with form values
            oSelectedEvent.title = sTitle;
            oSelectedEvent.start = oStart;
            oSelectedEvent.end = oEnd;
            oSelectedEvent.allDay = bAllDay;
            oSelectedEvent.location = sLocation;
            oSelectedEvent.description = sDescription;
            oSelectedEvent.attendees = aAttendees;
            // If this is a new event, add it to the model
            if (oSelectedEvent.isNew) {
                var oModel = this.getView().getModel();
                var aPeople = oModel.getProperty("/people");
                if (aPeople && aPeople.length > 0) {
                    // Format attendees for storage
                    var sAttendeesString = aAttendees.map(function (att) {
                        return att.email;
                    }).join("; ");
                    // Add to the first person's appointments
                    aPeople[0].appointments.push({
                        start: oStart,
                        end: oEnd,
                        title: sTitle,
                        info: sLocation,
                        type: "Type01",
                        pic: "sap-icon://calendar",
                        location: sLocation,
                        description: sDescription,
                        allDay: bAllDay,
                        attendees: sAttendeesString,
                        category: "Appointment",
                        showAs: "Busy",
                        recurrence: "Non-recurring",
                        inPerson: "In-person",
                        organizerStatus: "sent",
                        attendeeStatus: "accepted"
                    });
                    // Update the model
                    oModel.setProperty("/people", aPeople);
                    // Show success message
                    MessageToast.show("Event '" + sTitle + "' has been created");
                }
            } else {
                // Update existing event
                MessageToast.show("Event updated successfully");
            }
            // Close the popover
            if (this._oEventDetailsPopover) {
                this._oEventDetailsPopover.close();
            }
            // Refresh the calendar to show the new/updated event
            this.byId("calendar").getBinding("rows").refresh();
        },
        // Modified onDiscardEvent method
        onDiscardEvent: function () {
            // Close the popover without saving
            if (this._oEventDetailsPopover) {
                this._oEventDetailsPopover.close();
            }
            MessageToast.show("Changes discarded");
        },
        // Fragment handling functions
        _openRemarksDialog: function () {
            if (!this._oRemarksDialog) {
                this._oRemarksDialog = sap.ui.xmlfragment(
                    "com.capexrevex.capexrevex.view.RemarksDialog",
                    this
                );
                this.getView().addDependent(this._oRemarksDialog);
                // Set the model for the fragment
                this._oRemarksDialog.setModel(this.getView().getModel());
                this._oRemarksDialog.setModel(this.getView().getModel("attendees"), "attendees");
            }
            // Set default values for new event (current date from 4:00 PM to 4:30 PM)
            var oEventDate = UI5Date.getInstance();
            oEventDate.setHours(16, 0, 0, 0); // 4:00 PM
            var oEnd = UI5Date.getInstance(oEventDate);
            oEnd.setHours(16, 30, 0, 0); // 4:30 PM
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", {
                title: "",
                start: oEventDate,
                end: oEnd,
                info: "",
                type: "Type01",
                icon: "",
                attendees: [],
                isNew: true // Flag to indicate it's a new appointment
            });
            this._oRemarksDialog.open();
        },
        onSaveEventFromDialog: function () {
            var oViewModel = this.getView().getModel("view");
            var oSelectedEvent = oViewModel.getProperty("/selectedEvent");
            
            // Get values from the dialog with proper null checks
            var oTitleControl = sap.ui.getCore().byId("eventTitle");
            var oAttendeesControl = sap.ui.getCore().byId("eventAttendees");
            var oMakeRecurringControl = sap.ui.getCore().byId("makeRecurring");
            var oAllDayControl = sap.ui.getCore().byId("allDay");
            var oInPersonControl = sap.ui.getCore().byId("inPerson");
            var oResponseOptionsControl = sap.ui.getCore().byId("responseOptions");
            var oShowAsControl = sap.ui.getCore().byId("showAs");
            var oDescriptionControl = sap.ui.getCore().byId("eventDescription");
            
            // Get the date and time values with proper null checks
            var oDatePicker = sap.ui.getCore().byId("eventDate");
            var oStartTimePicker = sap.ui.getCore().byId("startTime");
            var oEndTimePicker = sap.ui.getCore().byId("endTime");
            
            // Validate controls exist
            if (!oDatePicker || !oStartTimePicker || !oEndTimePicker) {
                MessageToast.show("Error: Date or time controls not found");
                return;
            }
            
            var oDate = oDatePicker.getDateValue();
            var oStartTime = oStartTimePicker.getDateValue();
            var oEndTime = oEndTimePicker.getDateValue();
            
            // Validate date values
            if (!oDate || !oStartTime || !oEndTime) {
                MessageToast.show("Please enter valid date and time values");
                return;
            }
            
            // Get other values with null checks
            var sTitle = oTitleControl ? oTitleControl.getValue() : "";
            var sAttendees = oAttendeesControl ? oAttendeesControl.getValue() : "";
            var bMakeRecurring = oMakeRecurringControl ? oMakeRecurringControl.getSelected() : false;
            var bAllDay = oAllDayControl ? oAllDayControl.getSelected() : false;
            var bInPerson = oInPersonControl ? oInPersonControl.getSelected() : true;
            var sResponseOption = oResponseOptionsControl ? oResponseOptionsControl.getSelectedKey() : "";
            var sShowAs = oShowAsControl ? oShowAsControl.getSelectedKey() : "";
            var sDescription = oDescriptionControl ? oDescriptionControl.getValue() : "";
            
            // Combine date and start time
            var oStart = new Date(oDate);
            oStart.setHours(oStartTime.getHours(), oStartTime.getMinutes(), 0, 0);
            var oEnd = new Date(oDate);
            oEnd.setHours(oEndTime.getHours(), oEndTime.getMinutes(), 0, 0);
            
            // Validate that end time is after start time
            if (oEnd <= oStart) {
                MessageToast.show("End time must be after start time");
                return;
            }
            
            // Create the new appointment object
            var newAppointment = {
                start: oStart,
                end: oEnd,
                info: bInPerson ? "In-person event" : "Online event",
                type: "Type01",
                attendees: sAttendees,
                description: sDescription,
                recurring: bMakeRecurring,
                allDay: bAllDay,
                responseOption: sResponseOption,
                showAs: sShowAs,
                category: "Appointment",
                recurrence: bMakeRecurring ? "Recurring" : "Non-recurring",
                inPerson: bInPerson ? "In-person" : "Virtual",
                organizerStatus: "sent",
                attendeeStatus: "accepted"
            };
            
            // Get the model and add the new appointment to the first person's calendar
            var oModel = this.getView().getModel();
            var aPeople = oModel.getProperty("/people");
            if (aPeople && aPeople.length > 0) {
                // Add to the first person's appointments
                aPeople[0].appointments.push(newAppointment);
                // Update the model
                oModel.setProperty("/people", aPeople);
                // Close the dialog
                if (this._oRemarksDialog) {
                    this._oRemarksDialog.close();
                }
                // Refresh the calendar to show the new appointment
                this.byId("calendar").getBinding("rows").refresh(true);
            }
        },
        onCancelEventFromDialog: function () {
            // Close the dialog without saving
            if (this._oRemarksDialog) {
                this._oRemarksDialog.close();
            }
        },
        // Modified onExit method
        onExit: function () {
            // Clean up all fragments when the controller is destroyed
            if (this._oRemarksDialog) {
                this._oRemarksDialog.destroy();
                this._oRemarksDialog = null;
            }
            if (this._oChannelMeetingDialog) {
                this._oChannelMeetingDialog.destroy();
                this._oChannelMeetingDialog = null;
            }
            if (this._oVirtualAppointmentDialog) {
                this._oVirtualAppointmentDialog.destroy();
                this._oVirtualAppointmentDialog = null;
            }
            if (this._oEventDetailsPopover) {
                this._oEventDetailsPopover.destroy();
                this._oEventDetailsPopover = null;
            }
        }
    });
});

UPDATED CODE 4

sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/ui/core/date/UI5Date",
    "sap/ui/core/Fragment",
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/m/Token",
    "sap/ui/model/odata/v2/ODataModel"
], function (Controller, JSONModel, MessageToast, UI5Date, Fragment, Filter, FilterOperator, Token, ODataModel) {
    "use strict";
    return Controller.extend("com.capexrevex.capexrevex.controller.View1", {
        onInit: function () {
            // Set initial view to Work week
            this.byId("viewSelectButton").setText("Work week");

            // Set initial time scale and days to show
            this._updateTimeScale(30);
            this._updateWorkWeekView(5);

            // Get today's date
            var today = UI5Date.getInstance();

            // Set the calendar to start from today
            var startDate = UI5Date.getInstance(
                today.getFullYear(),
                today.getMonth(),
                today.getDate(),
                8, 0 // Start at 8 AM
            );

            // Create appointments starting from today
            var appointments = [];

            // Today's appointments
            appointments.push({
                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 9, 0),
                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 10, 0),
                title: "Team sync",
                info: "Canteen",
                type: "Type07",
                pic: "sap-icon://family-care",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "In-person",
                organizerStatus: "sent",
                attendeeStatus: "accepted"
            });

            appointments.push({
                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 11, 0),
                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 12, 0),
                title: "Client Meeting",
                info: "Conference Room",
                type: "Type01",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "In-person",
                organizerStatus: "sent",
                attendeeStatus: "tentative"
            });

            // Tomorrow's appointments
            var tomorrow = UI5Date.getInstance(today);
            tomorrow.setDate(tomorrow.getDate() + 1);

            appointments.push({
                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 10, 0),
                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 11, 30),
                title: "Project Review",
                info: "In Progress",
                type: "Type01",
                pic: "sap-icon://business-objects-experience",
                category: "Appointment",
                showAs: "Busy",
                recurrence: "Recurring",
                inPerson: "Virtual",
                organizerStatus: "draft",
                attendeeStatus: "notResponded"
            });

            appointments.push({
                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 14, 0),
                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 15, 0),
                title: "Training Session",
                info: "Online",
                type: "Type03",
                pic: "sap-icon://learning-assistant",
                category: "Appointment",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "Virtual",
                organizerStatus: "sent",
                attendeeStatus: "accepted"
            });

            // Day after tomorrow
            var dayAfter = UI5Date.getInstance(tomorrow);
            dayAfter.setDate(dayAfter.getDate() + 1);

            appointments.push({
                start: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 9, 0),
                end: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 10, 0),
                title: "Team Standup",
                info: "Daily meeting",
                type: "Type07",
                pic: "sap-icon://group",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Recurring",
                inPerson: "Hybrid",
                organizerStatus: "sent",
                attendeeStatus: "accepted"
            });

            appointments.push({
                start: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 13, 0),
                end: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 14, 30),
                title: "Lunch with Client",
                info: "Restaurant",
                type: "Type02",
                pic: "sap-icon://food",
                category: "Appointment",
                showAs: "Free",
                recurrence: "Non-recurring",
                inPerson: "In-person",
                organizerStatus: "sent",
                attendeeStatus: "declined"
            });

            // Fourth day
            var fourthDay = UI5Date.getInstance(dayAfter);
            fourthDay.setDate(fourthDay.getDate() + 1);

            appointments.push({
                start: UI5Date.getInstance(fourthDay.getFullYear(), fourthDay.getMonth(), fourthDay.getDate(), 11, 0),
                end: UI5Date.getInstance(fourthDay.getFullYear(), fourthDay.getMonth(), fourthDay.getDate(), 12, 0),
                title: "Product Demo",
                info: "Showcase new features",
                type: "Type04",
                pic: "sap-icon://presentation",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "In-person",
                organizerStatus: "sent",
                attendeeStatus: "followed"
            });

            // Fifth day
            var fifthDay = UI5Date.getInstance(fourthDay);
            fifthDay.setDate(fifthDay.getDate() + 1);

            appointments.push({
                start: UI5Date.getInstance(fifthDay.getFullYear(), fifthDay.getMonth(), fifthDay.getDate(), 10, 0),
                end: UI5Date.getInstance(fifthDay.getFullYear(), fifthDay.getMonth(), fifthDay.getDate(), 11, 30),
                title: "Planning Session",
                info: "Quarterly planning",
                type: "Type05",
                pic: "sap-icon://calendar",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Recurring",
                inPerson: "Virtual",
                organizerStatus: "sent",
                attendeeStatus: "canceled"
            });

            // Initialize the view model with data
            var oViewModel = new JSONModel({
                startDate: startDate,
                people: [
                    {
                        name: "John Doe",
                        role: "Developer",
                        appointments: appointments
                    }
                ],
                selectedEvent: {
                    title: "",
                    start: UI5Date.getInstance(),
                    end: UI5Date.getInstance(),
                    info: "",
                    type: "Type01",
                    isNew: true // Flag to identify new appointments
                },
                filters: {
                    appointments: true,
                    meetings: true,
                    reservations: false,
                    categories: [],
                    showAs: [],
                    recurrence: [],
                    inPerson: [],
                    organizer: {
                        sent: true,
                        draft: true
                    },
                    attendee: {
                        accepted: true,
                        declined: true,
                        followed: true,
                        tentative: true,
                        canceled: true,
                        notResponded: true
                    }
                },
                currentView: "Work week", // Track the current calendar view
                timeScale: "30 minutes", // Track the current time scale
                daysToShow: 5, // Track the number of days to show in work week view
                workWeekMenuOpen: false, // Track if work week submenu is open
                timeScaleMinutes: 30 // Add numeric value for time scale
            });

            // Create additional model with extended data using UI5Date
            var oModel = new JSONModel();
            oModel.setData({
                startDate: startDate,
                people: [
                    {
                        pic: "sap-icon://hr-approval/",
                        name: "John Miller",
                        role: "team member",
                        appointments: [
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 8, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 9, 0),
                                title: "Team sync",
                                info: "Canteen",
                                type: "Type07",
                                pic: "sap-icon://family-care",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "accepted"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 9, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 11, 0),
                                title: "Morning Sync",
                                info: "I call you",
                                type: "Type01",
                                pic: "sap-icon://call",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Recurring",
                                inPerson: "Virtual",
                                organizerStatus: "sent",
                                attendeeStatus: "tentative"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 10, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 12, 0),
                                title: "Sync Bill",
                                info: "Online",
                                type: "Type03",
                                category: "Appointment",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "Virtual",
                                organizerStatus: "draft",
                                attendeeStatus: "notResponded"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 10, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 13, 0),
                                title: "Check Flights",
                                info: "no room",
                                type: "Type09",
                                pic: "sap-icon://flight",
                                category: "Appointment",
                                showAs: "Free",
                                recurrence: "Non-recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "declined"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 13, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 14, 0),
                                title: "Lunch",
                                info: "canteen",
                                type: "Type05",
                                pic: "sap-icon://private",
                                category: "Appointment",
                                showAs: "Free",
                                recurrence: "Non-recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "accepted"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 18, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 20, 0),
                                title: "Discussion of the plan",
                                info: "Online meeting",
                                type: "Type04",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "Virtual",
                                organizerStatus: "sent",
                                attendeeStatus: "followed"
                            }
                        ]
                    },
                    {
                        pic: "sap-icon://hr-approval",
                        name: "Donna Moore",
                        role: "team member",
                        appointments: [
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 8, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 9, 26),
                                title: "Team sync",
                                info: "Canteen",
                                type: "Type07",
                                pic: "sap-icon://family-care",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "accepted"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 10, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 12, 0),
                                title: "Sync John",
                                info: "Online",
                                type: "Type03",
                                category: "Appointment",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "Virtual",
                                organizerStatus: "draft",
                                attendeeStatus: "notResponded"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 11, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 12, 0),
                                title: "Prep for planning",
                                info: "room 5",
                                type: "Type01",
                                pic: "sap-icon://family-care",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "canceled"
                            }
                        ]
                    },
                    {
                        pic: "sap-icon://hr-approval",
                        name: "Alex Johnson",
                        role: "team member",
                        appointments: [
                            {
                                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 9, 0),
                                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 10, 0),
                                title: "Team sync",
                                info: "Canteen",
                                type: "Type07",
                                pic: "sap-icon://family-care",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "accepted"
                            },
                            {
                                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 10, 0),
                                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 12, 0),
                                title: "Project Planning",
                                info: "Conference Room",
                                type: "Type01",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "tentative"
                            },
                            {
                                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 14, 0),
                                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 15, 0),
                                title: "Client Call",
                                info: "Online",
                                type: "Type03",
                                category: "Appointment",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "Virtual",
                                organizerStatus: "draft",
                                attendeeStatus: "notResponded"
                            }
                        ]
                    },
                    {
                        pic: "sap-icon://hr-approval",
                        name: "Sarah Williams",
                        role: "team member",
                        appointments: [
                            {
                                start: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 9, 0),
                                end: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 10, 0),
                                title: "Team sync",
                                info: "Canteen",
                                type: "Type07",
                                pic: "sap-icon://family-care",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "accepted"
                            },
                            {
                                start: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 11, 0),
                                end: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 12, 30),
                                title: "Design Review",
                                info: "Conference Room",
                                type: "Type01",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "declined"
                            }
                        ]
                    }
                ]
            });

            // Set both models to the view
            this.getView().setModel(oViewModel, "view");
            this.getView().setModel(oModel);

            // Initialize filter arrays
            this._aFilters = [];

            // Update date display in filter popover
            this._updateDateDisplay();

            // Set initial view to Work week
            this.byId("viewSelectButton").setText("Work week");

            // Set initial time scale and days to show
            this._updateTimeScale(30);
            this._updateWorkWeekView(5);

            // Create attendees model with proper structure
            var oAttendeesModel = new JSONModel({
                attendees: [
                    { name: "Ankit Jha", email: "ankit.jha@sumodigitech.com", status: "Free" },
                    { name: "Vikrant Raj", email: "vikrant.raj@sumodigitech.com", status: "Free" },
                    { name: "Pushpak Jha", email: "pushpak.jha@sumodigitech.com", status: "Busy" },
                    { name: "Pushkar Kumar Jha", email: "pushkar.jha@sumodigitech.com", status: "Tentative" },
                    { name: "Sumit Jhaldiyal", email: "sumit.jhaldiyal@sumodigitech.com", status: "Free" },
                    { name: "Mohd Aakib", email: "mohd.aakib@sumodigitech.com", status: "Free" },
                    { name: "Vikash Ojha", email: "vikash.ojha@sumodigitech.com", status: "Free" },
                    { name: "Yugal Kishore", email: "yugal.kishore@sumodigitech.com", status: "Busy" },
                ]
            });
            this.getView().setModel(oAttendeesModel, "attendees");

            // Initialize OData model for scheduling service
            var oSchedulingModel = new ODataModel({
                serviceUrl: "/schedulingservice/",
                useBatch: false
            });
            this.getView().setModel(oSchedulingModel, "scheduling");

            // Load attendees data
            this._loadAttendees();
        },

        // Load attendees from scheduling service
        // === Load Attendees ===
        // === Load Attendees ===
        _loadAttendees: function () {
            var oSchedulingModel = this.getView().getModel("scheduling");
            var oAttendeesModel = this.getView().getModel("attendees");
            var that = this;

            oSchedulingModel.read("/MeetingSchedulingSet", { // Changed to directly read from AttendeeSet
                success: function (oData) {
                    var aAttendees = [];

                    if (oData && oData.results) {
                        oData.results.forEach(function (oAttendee) {
                            aAttendees.push({
                                id: oAttendee.AttendeeID,
                                name: oAttendee.AttendeeName,
                                email: oAttendee.AttendeeEmail,
                                role: oAttendee.Role || "Attendee",
                                status: "Free"
                            });
                        });
                    }

                    oAttendeesModel.setProperty("/attendees", aAttendees);
                    MessageToast.show("Attendees loaded successfully: " + aAttendees.length + " found");
                },
                error: function (oError) {
                    console.error("Error loading attendees:", oError);
                    MessageToast.show("Error loading attendees from service");
                }
            });
        },

        // Handle attendee suggestions in MultiInput
        onAttendeeSuggest: function (oEvent) {
            var sTerm = oEvent.getParameter("suggestValue");
            var oMultiInput = oEvent.getSource();
            var oAttendeesModel = this.getView().getModel("attendees");

            if (!oAttendeesModel) {
                return;
            }

            var aAttendees = oAttendeesModel.getProperty("/attendees") || [];
            var aFilteredAttendees = [];

            if (sTerm) {
                // Filter attendees based on search term
                aFilteredAttendees = aAttendees.filter(function (oAttendee) {
                    return oAttendee.name.toLowerCase().includes(sTerm.toLowerCase()) ||
                        oAttendee.email.toLowerCase().includes(sTerm.toLowerCase());
                });
            } else {
                aFilteredAttendees = aAttendees;
            }

            // Update suggestion items
            oMultiInput.destroySuggestionItems();
            aFilteredAttendees.forEach(function (oAttendee) {
                oMultiInput.addSuggestionItem(new sap.ui.core.Item({
                    text: oAttendee.name,
                    additionalText: oAttendee.email,
                    key: oAttendee.email
                }));
            });
        },

        // Handle token addition in MultiInput
        onAttendeeTokenChange: function (oEvent) {
            var oMultiInput = oEvent.getSource();
            var sInputValue = oMultiInput.getValue().trim();

            if (!sInputValue) {
                return;
            }

            // Check if input is an email or should be treated as search
            if (this._isEmailValid(sInputValue)) {
                // Create token for manually entered email
                var oToken = new Token({
                    key: sInputValue,
                    text: sInputValue
                });
                oMultiInput.addToken(oToken);
                oMultiInput.setValue("");
            } else {
                // Trigger suggestion for non-email input
                this.onAttendeeSuggest(oEvent);
            }
        },

        // Validate email format
        _isEmailValid: function (sEmail) {
            var re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            return re.test(sEmail);
        },

        // Create meeting scheduling
        createMeetingScheduling: function (oMeetingData) {
            var oSchedulingModel = this.getView().getModel("scheduling");
            var that = this;

            // === Create Meeting ===
            oSchedulingModel.create("/MeetingSchedulingSet", oMeetingData, {
                success: function (oData) {
                    MessageToast.show("Meeting scheduled successfully!");

                    // Refresh attendees after creating meeting
                    that._loadAttendees();

                    // Add the meeting to the calendar
                    that._addMeetingToCalendar(oData);
                },
                error: function (oError) {
                    console.error("Error scheduling meeting:", oError);
                    MessageToast.show("Failed to schedule meeting");

                    // Fallback: Add to local calendar
                    that._addMeetingToCalendar(oMeetingData);
                }
            });
        },

        // Helper method to add meeting to calendar
        _addMeetingToCalendar: function (oMeetingData) {
            var oModel = this.getView().getModel();
            var aPeople = oModel.getProperty("/people");

            if (aPeople && aPeople.length > 0) {
                var newAppointment = {
                    start: new Date(oMeetingData.StartDateTime),
                    end: new Date(oMeetingData.EndDateTime),
                    title: oMeetingData.MeetingTitle,
                    info: oMeetingData.Location || "Online Meeting",
                    type: "Type01",
                    pic: "sap-icon://group",
                    category: "Meeting",
                    showAs: "Busy",
                    recurrence: oMeetingData.IsRecurring ? "Recurring" : "Non-recurring",
                    inPerson: oMeetingData.IsVirtual ? "Virtual" : "In-person",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted",
                    attendees: oMeetingData.Attendees || []
                };

                aPeople[0].appointments.push(newAppointment);
                oModel.setProperty("/people", aPeople);

                // Refresh calendar
                this.byId("calendar").getBinding("rows").refresh(true);
            }
        },

        // Update date display in filter popover
        _updateDateDisplay: function () {
            var oDateDisplay = this.byId("dateDisplay");
            if (oDateDisplay) {
                var today = UI5Date.getInstance();
                var options = { weekday: 'long', day: 'numeric' };
                var dateText = today.toLocaleDateString('en-US', options);
                oDateDisplay.setText(dateText);
            }
        },

        // Role-based functionality
        roles: {
            donna: "Donna Moore",
            manager: "manager",
            admin: "admin"
        },

        handleRoleChange: function () {
            this.getView().getModel().refresh(true);
        },

        getUserRole: function () {
            return this.roles[this.byId("userRole").getSelectedKey()];
        },

        canModifyAppointments: function (sRole) {
            var sUserRole = this.getUserRole();
            if (sUserRole === this.roles.manager || sUserRole === this.roles.admin || sUserRole === sRole) {
                return true;
            }
            return false;
        },

        // Filter functionality
        onFilterChange: function (oEvent) {
            var sFilterType = oEvent.getSource().getId().replace("Checkbox", "");
            var bSelected = oEvent.getParameter("selected");

            // Update filter model
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            oFilters[sFilterType.toLowerCase()] = bSelected;
            oViewModel.setProperty("/filters", oFilters);

            // Apply filters
            this.applyFilters();
        },

        applyFilters: function () {
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");

            // Clear existing filters
            this._aFilters = [];

            // Apply category filters
            if (!oFilters.appointments) {
                this._aFilters.push(new Filter("category", FilterOperator.NE, "Appointment"));
            }

            if (!oFilters.meetings) {
                this._aFilters.push(new Filter("category", FilterOperator.NE, "Meeting"));
            }

            if (!oFilters.reservations) {
                this._aFilters.push(new Filter("category", FilterOperator.NE, "Reservation"));
            }

            // Apply additional filters based on selected options
            if (oFilters.categories && oFilters.categories.length > 0) {
                this._aFilters.push(new Filter("category", FilterOperator.Contains, oFilters.categories.join("|")));
            }

            if (oFilters.showAs && oFilters.showAs.length > 0) {
                this._aFilters.push(new Filter("showAs", FilterOperator.Contains, oFilters.showAs.join("|")));
            }

            if (oFilters.recurrence && oFilters.recurrence.length > 0) {
                this._aFilters.push(new Filter("recurrence", FilterOperator.Contains, oFilters.recurrence.join("|")));
            }

            if (oFilters.inPerson && oFilters.inPerson.length > 0) {
                this._aFilters.push(new Filter("inPerson", FilterOperator.Contains, oFilters.inPerson.join("|")));
            }

            // Apply organizer filters
            var aOrganizerFilters = [];
            if (oFilters.organizer.sent) {
                aOrganizerFilters.push(new Filter("organizerStatus", FilterOperator.EQ, "sent"));
            }
            if (oFilters.organizer.draft) {
                aOrganizerFilters.push(new Filter("organizerStatus", FilterOperator.EQ, "draft"));
            }
            if (aOrganizerFilters.length > 0) {
                this._aFilters.push(new Filter({
                    filters: aOrganizerFilters,
                    and: false
                }));
            }

            // Apply attendee filters
            var aAttendeeFilters = [];
            if (oFilters.attendee.accepted) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "accepted"));
            }
            if (oFilters.attendee.declined) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "declined"));
            }
            if (oFilters.attendee.followed) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "followed"));
            }
            if (oFilters.attendee.tentative) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "tentative"));
            }
            if (oFilters.attendee.canceled) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "canceled"));
            }
            if (oFilters.attendee.notResponded) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "notResponded"));
            }
            if (aAttendeeFilters.length > 0) {
                this._aFilters.push(new Filter({
                    filters: aAttendeeFilters,
                    and: false
                }));
            }

            // Apply filters to the calendar
            var oCalendar = this.byId("calendar");
            var oBinding = oCalendar.getBinding("rows");

            if (this._aFilters.length > 0) {
                oBinding.filter(this._aFilters);
            } else {
                oBinding.filter([]);
            }

            // Update filter button text
            var oFilterButton = this.byId("_IDGenButton7");
            var iFilterCount = this._aFilters.length;
            oFilterButton.setText(iFilterCount > 0 ? "Filter applied (" + iFilterCount + ")" : "Filter applied");
        },

        // Filter popover handlers
        onAppointmentsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("appointmentsFilterPopover").openBy(oButton);
        },

        onMeetingsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("meetingsFilterPopover").openBy(oButton);
        },

        onReservationsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("reservationsFilterPopover").openBy(oButton);
        },

        onCategoriesFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("categoriesFilterPopover").openBy(oButton);
        },

        onShowAsFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("showAsFilterPopover").openBy(oButton);
        },

        onRecurrenceFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("recurrenceFilterPopover").openBy(oButton);
        },

        onInPersonFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            this.byId("inPersonFilterPopover").openBy(oButton);
        },

        // Organizer and Attendee filter handlers
        onOrganizerFilterPress: function (oEvent) {
            var oOptionsBox = this.byId("organizerOptions");
            oOptionsBox.setVisible(!oOptionsBox.getVisible());
        },

        onAttendeeFilterPress: function (oEvent) {
            var oOptionsBox = this.byId("attendeeOptions");
            oOptionsBox.setVisible(!oOptionsBox.getVisible());
        },

        onOrganizerFilterChange: function (oEvent) {
            var sId = oEvent.getSource().getId();
            var bSelected = oEvent.getParameter("selected");
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");

            // Update the corresponding filter property
            if (sId === "sentCheckbox") {
                oFilters.organizer.sent = bSelected;
            } else if (sId === "draftCheckbox") {
                oFilters.organizer.draft = bSelected;
            }

            oViewModel.setProperty("/filters", oFilters);
            this.applyFilters();
        },

        onAttendeeFilterChange: function (oEvent) {
            var sId = oEvent.getSource().getId();
            var bSelected = oEvent.getParameter("selected");
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");

            // Update the corresponding filter property
            if (sId === "acceptedCheckbox") {
                oFilters.attendee.accepted = bSelected;
            } else if (sId === "declinedCheckbox") {
                oFilters.attendee.declined = bSelected;
            } else if (sId === "followedCheckbox") {
                oFilters.attendee.followed = bSelected;
            } else if (sId === "tentativeCheckbox") {
                oFilters.attendee.tentative = bSelected;
            } else if (sId === "canceledCheckbox") {
                oFilters.attendee.canceled = bSelected;
            } else if (sId === "notRespondedCheckbox") {
                oFilters.attendee.notResponded = bSelected;
            }

            oViewModel.setProperty("/filters", oFilters);
            this.applyFilters();
        },

        onUnselectAllRight: function () {
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");

            // Reset organizer filters
            oFilters.organizer.sent = false;
            oFilters.organizer.draft = false;

            // Reset attendee filters
            oFilters.attendee.accepted = false;
            oFilters.attendee.declined = false;
            oFilters.attendee.followed = false;
            oFilters.attendee.tentative = false;
            oFilters.attendee.canceled = false;
            oFilters.attendee.notResponded = false;

            oViewModel.setProperty("/filters", oFilters);

            // Update the checkboxes
            this.byId("sentCheckbox").setSelected(false);
            this.byId("draftCheckbox").setSelected(false);
            this.byId("acceptedCheckbox").setSelected(false);
            this.byId("declinedCheckbox").setSelected(false);
            this.byId("followedCheckbox").setSelected(false);
            this.byId("tentativeCheckbox").setSelected(false);
            this.byId("canceledCheckbox").setSelected(false);
            this.byId("notRespondedCheckbox").setSelected(false);

            this.applyFilters();
        },

        // Unselect all handlers
        onAppointmentsUnselectAll: function () {
            this._unselectAllCheckboxes("appointmentsFilterList");
        },

        onMeetingsUnselectAll: function () {
            this._unselectAllCheckboxes("meetingsFilterList");
        },

        onReservationsUnselectAll: function () {
            this._unselectAllCheckboxes("reservationsFilterList");
        },

        onCategoriesUnselectAll: function () {
            this._unselectAllCheckboxes("categoriesFilterList");
        },

        onShowAsUnselectAll: function () {
            this._unselectAllCheckboxes("showAsFilterList");
        },

        onRecurrenceUnselectAll: function () {
            this._unselectAllCheckboxes("recurrenceFilterList");
        },

        onInPersonUnselectAll: function () {
            this._unselectAllCheckboxes("inPersonFilterList");
        },

        _unselectAllCheckboxes: function (sListId) {
            var oList = this.byId(sListId);
            var aItems = oList.getItems();

            aItems.forEach(function (oItem) {
                if (oItem.isA("sap.m.CheckBox")) {
                    oItem.setSelected(false);
                }
            });
        },

        // Filter selection handlers
        onAppointmentsFilterSelect: function (oEvent) {
            this._updateFilterArray("appointments", oEvent);
        },

        onMeetingsFilterSelect: function (oEvent) {
            this._updateFilterArray("meetings", oEvent);
        },

        onReservationsFilterSelect: function (oEvent) {
            this._updateFilterArray("reservations", oEvent);
        },

        onCategoriesFilterSelect: function (oEvent) {
            this._updateFilterArray("categories", oEvent);
        },

        onShowAsFilterSelect: function (oEvent) {
            this._updateFilterArray("showAs", oEvent);
        },

        onRecurrenceFilterSelect: function (oEvent) {
            this._updateFilterArray("recurrence", oEvent);
        },

        onInPersonFilterSelect: function (oEvent) {
            this._updateFilterArray("inPerson", oEvent);
        },

        _updateFilterArray: function (sFilterType, oEvent) {
            var sValue = oEvent.getSource().getText();
            var bSelected = oEvent.getParameter("selected");

            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");

            if (!oFilters[sFilterType]) {
                oFilters[sFilterType] = [];
            }

            if (bSelected) {
                if (oFilters[sFilterType].indexOf(sValue) === -1) {
                    oFilters[sFilterType].push(sValue);
                }
            } else {
                var iIndex = oFilters[sFilterType].indexOf(sValue);
                if (iIndex !== -1) {
                    oFilters[sFilterType].splice(iIndex, 1);
                }
            }

            oViewModel.setProperty("/filters", oFilters);
            this.applyFilters();
        },

        onClearFilters: function () {
            // Reset all filter checkboxes
            var aCheckBoxIds = [
                "appointmentsCheckbox", "meetingsCheckbox", "reservationsCheckbox"
            ];

            aCheckBoxIds.forEach(function (sId) {
                var oCheckBox = this.byId(sId);
                if (oCheckBox) {
                    oCheckBox.setSelected(sId === "appointmentsCheckbox" || sId === "meetingsCheckbox");
                }
            }.bind(this));

            // Reset organizer and attendee filters
            this.byId("sentCheckbox").setSelected(true);
            this.byId("draftCheckbox").setSelected(true);
            this.byId("acceptedCheckbox").setSelected(true);
            this.byId("declinedCheckbox").setSelected(true);
            this.byId("followedCheckbox").setSelected(true);
            this.byId("tentativeCheckbox").setSelected(true);
            this.byId("canceledCheckbox").setSelected(true);
            this.byId("notRespondedCheckbox").setSelected(true);

            // Reset filter arrays in model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/filters", {
                appointments: true,
                meetings: true,
                reservations: false,
                categories: [],
                showAs: [],
                recurrence: [],
                inPerson: [],
                organizer: {
                    sent: true,
                    draft: true
                },
                attendee: {
                    accepted: true,
                    declined: true,
                    followed: true,
                    tentative: true,
                    canceled: true,
                    notResponded: true
                }
            });

            // Apply empty filters
            this._aFilters = [];
            var oCalendar = this.byId("calendar");
            oCalendar.getBinding("rows").filter([]);

            // Update filter button text
            this.byId("_IDGenButton7").setText("Filter applied");

            MessageToast.show("All filters cleared");
        },

        // Drag and Drop functionality
        handleAppointmentDragEnter: function (oEvent) {
            if (this.isAppointmentOverlap(oEvent, oEvent.getParameter("calendarRow"))) {
                oEvent.preventDefault();
            }
        },

        handleAppointmentDrop: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                oCalendarRow = oEvent.getParameter("calendarRow"),
                bCopy = oEvent.getParameter("copy"),
                sTitle = oAppointment.getTitle(),
                oModel = this.getView().getModel(),
                oAppBindingContext = oAppointment.getBindingContext(),
                oRowBindingContext = oCalendarRow.getBindingContext(),
                handleAppointmentDropBetweenRows = function () {
                    var aPath = oAppBindingContext.getPath().split("/"),
                        iIndex = aPath.pop(),
                        sRowAppointmentsPath = aPath.join("/");
                    oRowBindingContext.getObject().appointments.push(
                        oModel.getProperty(oAppBindingContext.getPath())
                    );
                    oModel.getProperty(sRowAppointmentsPath).splice(iIndex, 1);
                };
            if (bCopy) { // "copy" appointment
                var oProps = Object.assign({}, oModel.getProperty(oAppointment.getBindingContext().getPath()));
                oProps.start = oStartDate;
                oProps.end = oEndDate;
                oRowBindingContext.getObject().appointments.push(oProps);
            } else { // "move" appointment
                oModel.setProperty("start", oStartDate, oAppBindingContext);
                oModel.setProperty("end", oEndDate, oAppBindingContext);
                if (oAppointment.getParent() !== oCalendarRow) {
                    handleAppointmentDropBetweenRows();
                }
            }
            oModel.refresh(true);
        },

        handleAppointmentResize: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate");
            if (!this.isAppointmentOverlap(oEvent, oAppointment.getParent())) {
                oAppointment
                    .setStartDate(oStartDate)
                    .setEndDate(oEndDate);
            } else {
                MessageToast.show("As a manager you can not resize events if they overlap with another events");
            }
        },

        // Modified handleAppointmentCreate to open event details fragment
        handleAppointmentCreate: function (oEvent) {
            var oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                oPlanningCalendarRow = oEvent.getParameter("calendarRow"),
                oModel = this.getView().getModel(),
                sPath = oPlanningCalendarRow.getBindingContext().getPath();

            // Create a new appointment object
            var newAppointment = {
                title: "New Appointment",
                start: oStartDate,
                end: oEndDate,
                info: "",
                type: "Type01",
                category: "Appointment",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "In-person",
                organizerStatus: "sent",
                attendeeStatus: "accepted",
                isNew: true // Flag to indicate it's a new appointment
            };

            // Set the selected event in the view model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", newAppointment);

            // Open the event details fragment
            this._openEventDetailsPopover(oEvent.getParameter("domRef"));

            MessageToast.show("New Appointment is created at \n" + oStartDate + "\n and end at \n" + oEndDate + ".");
        },

        isAppointmentOverlap: function (oEvent, oCalendarRow) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                bAppointmentOverlapped;
            if (this.getUserRole() === this.roles.manager) {
                bAppointmentOverlapped = oCalendarRow.getAppointments().some(function (oCurrentAppointment) {
                    if (oCurrentAppointment === oAppointment) {
                        return;
                    }
                    var oAppStartTime = oCurrentAppointment.getStartDate().getTime(),
                        oAppEndTime = oCurrentAppointment.getEndDate().getTime();
                    if (oAppStartTime <= oStartDate.getTime() && oStartDate.getTime() < oAppEndTime) {
                        return true;
                    }
                    if (oAppStartTime < oEndDate.getTime() && oEndDate.getTime() <= oAppEndTime) {
                        return true;
                    }
                    if (oStartDate.getTime() <= oAppStartTime && oAppStartTime < oEndDate.getTime()) {
                        return true;
                    }
                });
            }
            return bAppointmentOverlapped;
        },

        // Toolbar and UI functionality
        onTodayPress: function () {
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/startDate", UI5Date.getInstance());
            MessageToast.show("Navigated to today");
        },

        onViewSelectPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oViewPopover = this.byId("viewPopover");

            // Close other popovers
            this.byId("filterPopover").close();
            this.byId("newEventPopover").close();
            this.byId("eventDetailsPopover").close();

            // Toggle view popover
            if (!oViewPopover.isOpen()) {
                oViewPopover.openBy(oButton);
            } else {
                oViewPopover.close();
            }
        },

        onFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oFilterPopover = this.byId("filterPopover");

            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("newEventPopover").close();
            this.byId("eventDetailsPopover").close();

            // Toggle filter popover
            if (!oFilterPopover.isOpen()) {
                oFilterPopover.openBy(oButton);
            } else {
                oFilterPopover.close();
            }
        },

        onMeetNowPress: function () {
            MessageToast.show("Starting meeting now...");
        },

        onNewEventPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oNewEventPopover = this.byId("newEventPopover");

            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("filterPopover").close();
            this.byId("eventDetailsPopover").close();

            // Toggle new event popover
            if (!oNewEventPopover.isOpen()) {
                oNewEventPopover.openBy(oButton);
            } else {
                oNewEventPopover.close();
            }
        },

        onNotificationPress: function () {
            MessageToast.show("No new notifications");
        },

        // Work week menu functionality
        onWorkWeekMenuPress: function (oEvent) {
            var oViewModel = this.getView().getModel("view");
            var bMenuOpen = oViewModel.getProperty("/workWeekMenuOpen");

            // Toggle the menu visibility
            oViewModel.setProperty("/workWeekMenuOpen", !bMenuOpen);

            // Update the arrow icon direction
            var oButton = this.byId("_IDGenWorkWeekButton");
            oButton.setIcon(!bMenuOpen ? "sap-icon://slim-arrow-down" : "sap-icon://slim-arrow-right");
        },

        // Time scale dropdown change handler
        onTimeScaleChange: function (oEvent) {
            var oViewModel = this.getView().getModel("view");
            var oSource = oEvent.getSource();
            var sSelectedKey = oSource.getSelectedKey();

            // Extract the number of minutes from the selected key
            var iMinutes = parseInt(sSelectedKey);

            // Update the model
            oViewModel.setProperty("/timeScale", iMinutes + " minutes");
            oViewModel.setProperty("/timeScaleMinutes", iMinutes);

            // Get current days to show
            var iDays = oViewModel.getProperty("/daysToShow");

            // Update the button text to show both days and time scale
            var oButton = this.byId("viewSelectButton");
            oButton.setText("Work week (" + iDays + " days, " + iMinutes + " min)");

            // Update the calendar's time scale
            this._updateTimeScale(iMinutes);

            // Make sure we're in Work week view
            var oCalendar = this.byId("calendar");
            oCalendar.setViewKey("Workweek");
            oViewModel.setProperty("/currentView", "Work week");

            MessageToast.show("Time scale changed to: " + iMinutes + " minutes");
        },

        // Days to show dropdown change handler
        onDaysToShowChange: function (oEvent) {
            var oViewModel = this.getView().getModel("view");
            var oSource = oEvent.getSource();
            var iDays = parseInt(oSource.getSelectedKey());

            // Update the model
            oViewModel.setProperty("/daysToShow", iDays);

            // Get current time scale
            var sTimeScale = oViewModel.getProperty("/timeScale");
            var iMinutes = parseInt(sTimeScale.match(/\d+/)[0]);

            // Update the button text to show both days and time scale
            var oButton = this.byId("viewSelectButton");
            oButton.setText("Work week (" + iDays + " days, " + iMinutes + " min)");

            // Update the work week view
            this._updateWorkWeekView(iDays);

            // Make sure we're in Work week view
            var oCalendar = this.byId("calendar");
            oCalendar.setViewKey("Workweek");
            oViewModel.setProperty("/currentView", "Work week");

            MessageToast.show("Work week now shows " + iDays + " days");
        },

        // Days dropdown change handler (main view selection)
        onDaysChange: function (oEvent) {
            var oSource = oEvent.getSource();
            var iDays = parseInt(oSource.getSelectedKey());

            // Update the model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/daysToShow", iDays);

            // Set the current view to Work week
            oViewModel.setProperty("/currentView", "Work week");

            // Update the button text
            var oButton = this.byId("viewSelectButton");
            var sTimeScale = oViewModel.getProperty("/timeScale");
            var iMinutes = parseInt(sTimeScale.match(/\d+/)[0]);
            oButton.setText("Work week (" + iDays + " days, " + iMinutes + " min)");

            // Update the calendar
            var oCalendar = this.byId("calendar");
            oCalendar.setViewKey("Workweek");

            // Update the work week view
            this._updateWorkWeekView(iDays);

            // Close the popover
            this.byId("viewPopover").close();

            MessageToast.show("Work week now shows " + iDays + " days");
        },

        onViewSelected: function (oEvent) {
            var sSelectedView = oEvent.getParameter("listItem").getTitle();
            var oButton = this.byId("viewSelectButton");
            var oCalendar = this.byId("calendar");
            var oViewModel = this.getView().getModel("view");

            // Close the popover first
            this.byId("viewPopover").close();

            // Handle regular view selection
            if (sSelectedView === "Work week") {
                oButton.setText(sSelectedView);
                oViewModel.setProperty("/currentView", sSelectedView);

                // Update calendar view
                oCalendar.setViewKey("Workweek");

                // Get current settings
                var iDaysToShow = oViewModel.getProperty("/daysToShow");
                var sTimeScale = oViewModel.getProperty("/timeScale");
                var iMinutes = parseInt(sTimeScale.match(/\d+/)[0]);

                // Update button text to show both days and time scale
                oButton.setText("Work week (" + iDaysToShow + " days, " + iMinutes + " min)");

                // Update the work week view and time scale
                this._updateWorkWeekView(iDaysToShow);
                this._updateTimeScale(iMinutes);

                MessageToast.show("View changed to: " + sSelectedView);
            } else if (sSelectedView === "Week") {
                oButton.setText(sSelectedView);
                oViewModel.setProperty("/currentView", sSelectedView);

                // Update calendar view
                oCalendar.setViewKey("Week");

                // Force refresh to ensure proper rendering
                oCalendar.rerender();

                MessageToast.show("View changed to: " + sSelectedView);
            } else if (sSelectedView === "Month") {
                oButton.setText(sSelectedView);
                oViewModel.setProperty("/currentView", sSelectedView);

                // Update calendar view
                oCalendar.setViewKey("Month");

                // Force refresh to ensure proper rendering
                oCalendar.rerender();

                MessageToast.show("View changed to: " + sSelectedView);
            } else if (sSelectedView === "Split view") {
                MessageToast.show("Split view feature coming soon");
            }
        },

        _switchCalendarView: function (sViewKey) {
            var oCalendar = this.byId("calendar");
            var oViewModel = this.getView().getModel("view");

            // Set the view key
            oCalendar.setViewKey(sViewKey);

            // Update the current view in the model
            oViewModel.setProperty("/currentView", sViewKey);

            // Force a rerender to ensure proper display
            oCalendar.rerender();
        },

        _updateTimeScale: function (iMinutes) {
            var oCalendar = this.byId("calendar");
            var oViewModel = this.getView().getModel("view");
            var sCurrentView = oViewModel;

            // Only update time scale for Day and Work week views
            if (sCurrentView === "Day" || sCurrentView === "Work week") {
                var oView = oCalendar.getViews().find(function (view) {
                    return view.getKey() === (sCurrentView === "Work week" ? "Workweek" : sCurrentView);
                });

                if (oView) {
                    // Calculate the number of intervals based on the selected minutes
                    var iTotalMinutes = 24 * 60; // 24 hours in minutes
                    var iIntervals = iTotalMinutes / iMinutes;

                    // Update the view settings
                    oView.setIntervalsS(iIntervals);
                    oView.setIntervalsM(iIntervals);
                    oView.setIntervalsL(iIntervals);
                    oView.setIntervalType("Minute"); // Use string value directly

                    // Refresh the calendar
                    oCalendar.rerender();
                }
            }
        },

        _updateWorkWeekView: function (iDays) {
            var oCalendar = this.byId("calendar");
            var oView = oCalendar.getViews().find(function (view) {
                return view.getKey() === "Workweek";
            });

            if (oView) {
                // Update the number of days to show
                oView.setIntervalsS(iDays);
                oView.setIntervalsM(iDays);
                oView.setIntervalsL(iDays);

                // Refresh the calendar
                oCalendar.rerender();
            }
        },

        onSavedViewsPress: function () {
            // MessageToast.show("Saved views feature coming soon");
        },

        onNewEventTypeSelected: function (oEvent) {
            var sEventType = oEvent.getSource().getTitle();
            this.byId("newEventPopover").close();

            if (sEventType === "Channel meeting") {
                this._openChannelMeetingDialog();
            } else if (sEventType === "Event") {
                this._openRemarksDialog();
            } else if (sEventType === "Virtual appointment") {
                this._openVirtualAppointmentDialog();
            } else {
                MessageToast.show("Creating new: " + sEventType);
            }
        },

        // Open the Channel Meeting Dialog
        _openChannelMeetingDialog: function () {
            var that = this;
            if (!this._oChannelMeetingDialog) {
                Fragment.load({
                    id: this.getView().getId(),
                    name: "com.capexrevex.capexrevex.view.ChannelMeetingDialog",
                    controller: this
                }).then(function (oDialog) {
                    that._oChannelMeetingDialog = oDialog;
                    that.getView().addDependent(that._oChannelMeetingDialog);

                    // Set default values for new channel meeting
                    that._setDefaultChannelMeetingValues();

                    // Set the model for the fragment
                    that._oChannelMeetingDialog.setModel(that.getView().getModel());
                    that._oChannelMeetingDialog.setModel(that.getView().getModel("attendees"), "attendees");

                    that._oChannelMeetingDialog.open();
                }).catch(function (error) {
                    console.error("Error loading channel meeting dialog:", error);
                    MessageToast.show("Error loading meeting dialog");
                });
            } else {
                // Set default values for the meeting
                this._setDefaultChannelMeetingValues();

                // Set the model for the fragment
                this._oChannelMeetingDialog.setModel(this.getView().getModel());
                this._oChannelMeetingDialog.setModel(this.getView().getModel("attendees"), "attendees");

                this._oChannelMeetingDialog.open();
            }
        },

        // Open the Virtual Appointment Dialog
        _openVirtualAppointmentDialog: function () {
            var that = this;
            if (!this._oVirtualAppointmentDialog) {
                Fragment.load({
                    id: this.getView().getId(),
                    name: "com.capexrevex.capexrevex.view.VirtualAppointmentDialog",
                    controller: this
                }).then(function (oDialog) {
                    that._oVirtualAppointmentDialog = oDialog;
                    that.getView().addDependent(that._oVirtualAppointmentDialog);

                    // Set default values for virtual appointment
                    that._setDefaultVirtualAppointmentValues();

                    // Set the model for the fragment
                    that._oVirtualAppointmentDialog.setModel(that.getView().getModel());
                    that._oVirtualAppointmentDialog.setModel(that.getView().getModel("attendees"), "attendees");

                    that._oVirtualAppointmentDialog.open();
                }).catch(function (error) {
                    console.error("Error loading virtual appointment dialog:", error);
                    MessageToast.show("Error loading virtual appointment dialog");
                });
            } else {
                // Set default values for the appointment
                this._setDefaultVirtualAppointmentValues();

                // Set the model for the fragment
                this._oVirtualAppointmentDialog.setModel(this.getView().getModel());
                this._oVirtualAppointmentDialog.setModel(this.getView().getModel("attendees"), "attendees");

                this._oVirtualAppointmentDialog.open();
            }
        },

        _setDefaultChannelMeetingValues: function () {
            // Set default date and time (current date, 3:00 PM to 3:30 PM)
            var oNow = UI5Date.getInstance();
            var oStart = UI5Date.getInstance(oNow);
            oStart.setHours(15, 0, 0, 0); // 3:00 PM

            var oEnd = UI5Date.getInstance(oStart);
            oEnd.setHours(15, 30, 0, 0); // 3:30 PM

            // Set values in the dialog if it exists
            if (this._oChannelMeetingDialog) {
                var oStartDate = Fragment.byId(this.getView().getId(), "startDate");
                var oStartTime = Fragment.byId(this.getView().getId(), "startTime");
                var oEndDate = Fragment.byId(this.getView().getId(), "endDate");
                var oEndTime = Fragment.byId(this.getView().getId(), "endTime");

                if (oStartDate) oStartDate.setDateValue(oStart);
                if (oStartTime) oStartTime.setDateValue(oStart);
                if (oEndDate) oEndDate.setDateValue(oEnd);
                if (oEndTime) oEndTime.setDateValue(oEnd);
            }
        },

        _setDefaultVirtualAppointmentValues: function () {
            // Set default date and time (current date, 4:30 PM to 5:00 PM)
            var oNow = UI5Date.getInstance();
            var oStart = UI5Date.getInstance(oNow);
            oStart.setHours(16, 30, 0, 0); // 4:30 PM

            var oEnd = UI5Date.getInstance(oStart);
            oEnd.setHours(17, 0, 0, 0); // 5:00 PM

            // Set values in the dialog if it exists
            if (this._oVirtualAppointmentDialog) {
                var oStartDate = Fragment.byId(this.getView().getId(), "virtualStartDate");
                var oStartTime = Fragment.byId(this.getView().getId(), "virtualStartTime");
                var oEndDate = Fragment.byId(this.getView().getId(), "virtualEndDate");
                var oEndTime = Fragment.byId(this.getView().getId(), "virtualEndTime");

                if (oStartDate) oStartDate.setDateValue(oStart);
                if (oStartTime) {
                    oStartTime.setDateValue(oStart);
                    // Set minutes step based on current time scale
                    var oViewModel = this.getView().getModel("view");
                    var iMinutes = oViewModel.getProperty("/timeScaleMinutes");
                    oStartTime.setMinutesStep(iMinutes);
                }
                if (oEndDate) oEndDate.setDateValue(oEnd);
                if (oEndTime) {
                    oEndTime.setDateValue(oEnd);
                    // Set minutes step based on current time scale
                    var oViewModel = this.getView().getModel("view");
                    var iMinutes = oViewModel.getProperty("/timeScaleMinutes");
                    oEndTime.setMinutesStep(iMinutes);
                }

                // Set default recurrence to "none"
                var oRecurrenceSelect = Fragment.byId(this.getView().getId(), "virtualRecurrence");
                if (oRecurrenceSelect) {
                    oRecurrenceSelect.setSelectedKey("none");
                }
            }
        },

        // Save Channel Meeting
        onSaveChannelMeeting: function () {
            try {
                // Get values from the dialog
                var sTitle = Fragment.byId(this.getView().getId(), "meetingTitle").getValue();

                // Get required attendees
                var oRequiredAttendees = Fragment.byId(this.getView().getId(), "requiredAttendees");
                var aRequiredTokens = oRequiredAttendees.getTokens();
                var sRequiredAttendees = aRequiredTokens.map(function (oToken) {
                    return oToken.getKey();
                }).join("; ");

                // Get optional attendees
                var oOptionalAttendees = Fragment.byId(this.getView().getId(), "optionalAttendees");
                var aOptionalTokens = oOptionalAttendees.getTokens();
                var sOptionalAttendees = aOptionalTokens.map(function (oToken) {
                    return oToken.getKey();
                }).join("; ");

                var oStartDate = Fragment.byId(this.getView().getId(), "startDate").getDateValue();
                var oStartTime = Fragment.byId(this.getView().getId(), "startTime").getDateValue();
                var oEndDate = Fragment.byId(this.getView().getId(), "endDate").getDateValue();
                var oEndTime = Fragment.byId(this.getView().getId(), "endTime").getDateValue();

                var bAllDay = Fragment.byId(this.getView().getId(), "allDayCheckbox").getSelected();
                var sChannel = Fragment.byId(this.getView().getId(), "channelInput").getValue();
                var sLocation = Fragment.byId(this.getView().getId(), "locationInput").getValue();
                var bOnlineMeeting = Fragment.byId(this.getView().getId(), "onlineMeetingCheckbox").getSelected();
                var sDetails = Fragment.byId(this.getView().getId(), "meetingDetails").getValue();
                var sAgenda = Fragment.byId(this.getView().getId(), "meetingAgenda").getValue();

                // Validate required fields
                if (!sTitle) {
                    MessageToast.show("Please enter a title for the meeting");
                    return;
                }

                // Combine date and time
                var oStart = new Date(oStartDate);
                if (!bAllDay && oStartTime) {
                    oStart.setHours(oStartTime.getHours(), oStartTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oStart.setHours(0, 0, 0, 0);
                }

                var oEnd = new Date(oEndDate || oStartDate);
                if (!bAllDay && oEndTime) {
                    oEnd.setHours(oEndTime.getHours(), oEndTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oEnd.setHours(23, 59, 59, 999);
                }

                // Validate that end time is after start time
                if (oEnd <= oStart) {
                    MessageToast.show("End time must be after start time");
                    return;
                }

                // Create the new appointment object
                var newAppointment = {
                    start: oStart,
                    end: oEnd,
                    title: sTitle,
                    info: "Channel: " + sChannel + (sLocation ? " | Location: " + sLocation : ""),
                    type: "Type01",
                    pic: "sap-icon://group",
                    requiredAttendees: sRequiredAttendees,
                    optionalAttendees: sOptionalAttendees,
                    details: sDetails,
                    agenda: sAgenda,
                    allDay: bAllDay,
                    onlineMeeting: bOnlineMeeting,
                    category: "Meeting",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: bOnlineMeeting ? "Virtual" : "In-person",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted"
                };

                // Get the model and add the new appointment to the first person's calendar
                var oModel = this.getView().getModel();
                var aPeople = oModel.getProperty("/people");

                if (aPeople && aPeople.length > 0) {
                    // Add to the first person's appointments
                    aPeople[0].appointments.push(newAppointment);

                    // Update the model
                    oModel.setProperty("/people", aPeople);

                    // Show success message
                    MessageToast.show("Channel meeting '" + sTitle + "' has been created");

                    // Close the dialog
                    this._oChannelMeetingDialog.close();

                    // Refresh the calendar to show the new appointment
                    this.byId("calendar").getBinding("rows").refresh(true);
                } else {
                    MessageToast.show("Error: Could not find calendar to add meeting");
                }
            } catch (error) {
                console.error("Error saving channel meeting:", error);
                MessageToast.show("Error creating meeting. Please try again.");
            }
        },

        // Save Virtual Appointment
        onSaveVirtualAppointment: function () {
            try {
                // Get values from the dialog
                var sTitle = Fragment.byId(this.getView().getId(), "virtualTitle").getValue();
                var sGuestName = Fragment.byId(this.getView().getId(), "guestName").getValue();
                var sGuestEmail = Fragment.byId(this.getView().getId(), "guestEmail").getValue();

                // Get internal attendees
                var oInternalAttendees = Fragment.byId(this.getView().getId(), "internalAttendees");
                var aInternalTokens = oInternalAttendees.getTokens();
                var sInternalAttendees = aInternalTokens.map(function (oToken) {
                    return oToken.getKey();
                }).join("; ");

                var oStartDate = Fragment.byId(this.getView().getId(), "virtualStartDate").getDateValue();
                var oStartTime = Fragment.byId(this.getView().getId(), "virtualStartTime").getDateValue();
                var oEndDate = Fragment.byId(this.getView().getId(), "virtualEndDate").getDateValue();
                var oEndTime = Fragment.byId(this.getView().getId(), "virtualEndTime").getDateValue();

                var bAllDay = Fragment.byId(this.getView().getId(), "virtualAllDay").getSelected();
                var sLocation = Fragment.byId(this.getView().getId(), "virtualLocation").getValue();
                var sPresenterOptions = Fragment.byId(this.getView().getId(), "presenterOptions").getSelectedKey();
                var bRecordAutomatically = Fragment.byId(this.getView().getId(), "recordAutomatically").getSelected();
                var sMeetingChat = Fragment.byId(this.getView().getId(), "meetingChat").getSelectedKey();
                var sMessage = Fragment.byId(this.getView().getId(), "virtualMessage").getValue();

                // Validate required fields
                if (!sTitle) {
                    MessageToast.show("Please enter a title for the appointment");
                    return;
                }

                if (!sGuestName || !sGuestEmail) {
                    MessageToast.show("Please enter guest name and email");
                    return;
                }

                // Combine date and time
                var oStart = new Date(oStartDate);
                if (!bAllDay && oStartTime) {
                    oStart.setHours(oStartTime.getHours(), oStartTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oStart.setHours(0, 0, 0, 0);
                }

                var oEnd = new Date(oEndDate || oStartDate);
                if (!bAllDay && oEndTime) {
                    oEnd.setHours(oEndTime.getHours(), oEndTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oEnd.setHours(23, 59, 59, 999);
                }

                // Validate that end time is after start time
                if (oEnd <= oStart) {
                    MessageToast.show("End time must be after start time");
                    return;
                }

                // Create the new appointment object
                var newAppointment = {
                    start: oStart,
                    end: oEnd,
                    title: sTitle,
                    info: "Virtual Appointment with " + sGuestName + " (" + sGuestEmail + ")",
                    type: "Type01",
                    pic: "sap-icon://video",
                    internalAttendees: sInternalAttendees,
                    location: sLocation,
                    presenterOptions: sPresenterOptions,
                    recordAutomatically: bRecordAutomatically,
                    meetingChat: sMeetingChat,
                    message: sMessage,
                    allDay: bAllDay,
                    isVirtual: true,
                    category: "Appointment",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: "Virtual",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted"
                };

                // Get the model and add the new appointment to the first person's calendar
                var oModel = this.getView().getModel();
                var aPeople = oModel.getProperty("/people");

                if (aPeople && aPeople.length > 0) {
                    // Add to the first person's appointments
                    aPeople[0].appointments.push(newAppointment);

                    // Update the model
                    oModel.setProperty("/people", aPeople);

                    // Show success message
                    MessageToast.show("Virtual appointment '" + sTitle + "' has been created");

                    // Close the dialog
                    this._oVirtualAppointmentDialog.close();

                    // Refresh the calendar to show the new appointment
                    this.byId("calendar").getBinding("rows").refresh(true);
                } else {
                    MessageToast.show("Error: Could not find calendar to add appointment");
                }
            } catch (error) {
                console.error("Error saving virtual appointment:", error);
                MessageToast.show("Error creating appointment. Please try again.");
            }
        },

        // Cancel Channel Meeting
        onCancelChannelMeeting: function () {
            // Close the dialog without saving
            if (this._oChannelMeetingDialog) {
                this._oChannelMeetingDialog.close();
            }
            MessageToast.show("Channel meeting creation cancelled");
        },

        // Cancel Virtual Appointment
        onCancelVirtualAppointment: function () {
            // Close the dialog without saving
            if (this._oVirtualAppointmentDialog) {
                this._oVirtualAppointmentDialog.close();
            }
            MessageToast.show("Virtual appointment creation cancelled");
        },

        // Add additional guest
        onAddGuest: function () {
            MessageToast.show("Additional guest feature coming soon");
        },

        // Handle All Day checkbox changes
        onAllDayChange: function (oEvent) {
            var bAllDay = oEvent.getParameter("selected");
            var oStartInput = this.byId("eventStart");
            var oEndInput = this.byId("eventEnd");

            if (bAllDay) {
                // Hide time part for all-day events
                oStartInput.setDisplayFormat("MM/dd/yyyy");
                oEndInput.setDisplayFormat("MM/dd/yyyy");

                // Set times to beginning and end of day
                var oStart = oStartInput.getDateValue();
                var oEnd = oEndInput.getDateValue();

                if (oStart) {
                    oStart.setHours(0, 0, 0, 0);
                    oStartInput.setDateValue(oStart);
                }

                if (oEnd) {
                    oEnd.setHours(23, 59, 59, 999);
                    oEndInput.setDateValue(oEnd);
                }
            } else {
                // Show date and time
                oStartInput.setDisplayFormat("MM/dd/yyyy hh:mm a");
                oEndInput.setDisplayFormat("MM/dd/yyyy hh:mm a");

                // Set default times if they were set to beginning/end of day
                var oStart = oStartInput.getDateValue();
                var oEnd = oEndInput.getDateValue();

                if (oStart && oStart.getHours() === 0) {
                    oStart.setHours(9, 0, 0, 0); // Default to 9 AM
                    oStartInput.setDateValue(oStart);
                }

                if (oEnd && oEnd.getHours() === 23) {
                    oEnd.setHours(10, 0, 0, 0); // Default to 10 AM
                    oEndInput.setDateValue(oEnd);
                }
            }
        },

        // Modified onAppointmentSelect method
        onAppointmentSelect: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment");
            var oBindingContext = oAppointment.getBindingContext();

            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("filterPopover").close();
            this.byId("newEventPopover").close();

            // Get appointment data
            var oAppointmentData = oBindingContext.getObject();

            // Extract attendees from appointment
            var aAttendees = this._extractAttendeesFromAppointment(oAppointmentData);

            // Update selected event in model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", {
                title: oAppointmentData.title,
                start: oAppointmentData.start,
                end: oAppointmentData.end,
                info: oAppointmentData.info || "",
                type: oAppointmentData.type || "Type01",
                icon: oAppointmentData.icon || "",
                location: oAppointmentData.location || "",
                description: oAppointmentData.description || "",
                allDay: oAppointmentData.allDay || false,
                attendees: aAttendees,
                isNew: false // Flag to indicate it's an existing appointment
            });

            // Open event details popover using the new fragment
            this._openEventDetailsPopover(oEvent.getParameter("domRef"));
        },

        // Modified onIntervalSelect method
        onIntervalSelect: function (oEvent) {
            var oInterval = oEvent.getParameter("interval");
            var oStartDate = oInterval.getStartDate();
            var oEndDate = oInterval.getEndDate();

            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("filterPopover").close();
            this.byId("newEventPopover").close();

            // Update selected event in model with new interval
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", {
                title: "New Event",
                start: oStartDate,
                end: oEndDate,
                info: "",
                type: "Type01",
                icon: "",
                location: "",
                description: "",
                allDay: false,
                attendees: [],
                isNew: true // Flag to indicate it's a new appointment
            });

            // Open event details popover using the new fragment
            this._openEventDetailsPopover(oEvent.getParameter("domRef"));
        },

        // Add this method to open the event details popover
        _openEventDetailsPopover: function (oSource) {
            var that = this;

            // Load the fragment if not already loaded
            if (!this._oEventDetailsPopover) {
                Fragment.load({
                    id: this.getView().getId(),
                    name: "com.capexrevex.capexrevex.view.EventDetailsDialog",
                    controller: this
                }).then(function (oPopover) {
                    that._oEventDetailsPopover = oPopover;
                    that.getView().addDependent(that._oEventDetailsPopover);

                    // Set the model for the fragment
                    that._oEventDetailsPopover.setModel(that.getView().getModel());
                    that._oEventDetailsPopover.setModel(that.getView().getModel("attendees"), "attendees");

                    that._oEventDetailsPopover.openBy(oSource);
                });
            } else {
                // Set the model for the fragment
                this._oEventDetailsPopover.setModel(this.getView().getModel());
                this._oEventDetailsPopover.setModel(this.getView().getModel("attendees"), "attendees");

                this._oEventDetailsPopover.openBy(oSource);
            }
        },

        // Extract attendees from appointment data
        _extractAttendeesFromAppointment: function (oAppointment) {
            var aAttendees = [];

            // Handle different appointment types
            if (oAppointment.requiredAttendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.requiredAttendees));
            }

            if (oAppointment.optionalAttendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.optionalAttendees));
            }

            if (oAppointment.internalAttendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.internalAttendees));
            }

            if (oAppointment.guestEmail) {
                aAttendees.push({
                    name: oAppointment.guestName || oAppointment.guestEmail,
                    email: oAppointment.guestEmail,
                    status: "Free"
                });
            }

            if (oAppointment.attendees) {
                aAttendees = aAttendees.concat(this._parseAttendees(oAppointment.attendees));
            }

            return aAttendees;
        },

        // Parse attendees string into objects
        _parseAttendees: function (sAttendees) {
            if (!sAttendees) return [];

            return sAttendees.split(';').map(function (sAttendee) {
                sAttendee = sAttendee.trim();
                if (sAttendee) {
                    return {
                        name: sAttendee,
                        email: sAttendee,
                        status: "Free"
                    };
                }
                return null;
            }).filter(Boolean);
        },

        // Modified onSaveEvent method to handle attendees
        onSaveEvent: function () {
            var oViewModel = this.getView().getModel("view");
            var oSelectedEvent = oViewModel.getProperty("/selectedEvent");

            // Get values from the form
            var sTitle = this.byId("eventTitle").getValue();
            var oStart = this.byId("eventStart").getDateValue();
            var oEnd = this.byId("eventEnd").getDateValue();
            var bAllDay = this.byId("allDayCheckbox").getSelected();
            var sLocation = this.byId("eventLocation").getValue();
            var sDescription = this.byId("eventDescription").getValue();

            // Get attendees from the MultiInput
            var oAttendeesInput = this.byId("eventAttendees");
            var aTokens = oAttendeesInput.getTokens();
            var aAttendees = aTokens.map(function (oToken) {
                return {
                    name: oToken.getText(),
                    email: oToken.getKey()
                };
            });

            // Validate required fields
            if (!sTitle) {
                MessageToast.show("Please enter a title for the event");
                return;
            }

            if (!oStart || !oEnd) {
                MessageToast.show("Please enter valid start and end dates");
                return;
            }

            // Validate that end time is after start time
            if (oEnd <= oStart) {
                MessageToast.show("End time must be after start time");
                return;
            }

            // Update the selected event with form values
            oSelectedEvent.title = sTitle;
            oSelectedEvent.start = oStart;
            oSelectedEvent.end = oEnd;
            oSelectedEvent.allDay = bAllDay;
            oSelectedEvent.location = sLocation;
            oSelectedEvent.description = sDescription;
            oSelectedEvent.attendees = aAttendees;

            // If this is a new event, add it to the model
            if (oSelectedEvent.isNew) {
                var oModel = this.getView().getModel();
                var aPeople = oModel.getProperty("/people");

                if (aPeople && aPeople.length > 0) {
                    // Format attendees for storage
                    var sAttendeesString = aAttendees.map(function (att) {
                        return att.email;
                    }).join("; ");

                    // Add to the first person's appointments
                    aPeople[0].appointments.push({
                        start: oStart,
                        end: oEnd,
                        title: sTitle,
                        info: sLocation,
                        type: "Type01",
                        pic: "sap-icon://calendar",
                        location: sLocation,
                        description: sDescription,
                        allDay: bAllDay,
                        attendees: sAttendeesString,
                        category: "Appointment",
                        showAs: "Busy",
                        recurrence: "Non-recurring",
                        inPerson: "In-person",
                        organizerStatus: "sent",
                        attendeeStatus: "accepted"
                    });

                    // Update the model
                    oModel.setProperty("/people", aPeople);

                    // Show success message
                    MessageToast.show("Event '" + sTitle + "' has been created");
                }
            } else {
                // Update existing event
                MessageToast.show("Event updated successfully");
            }

            // Close the popover
            if (this._oEventDetailsPopover) {
                this._oEventDetailsPopover.close();
            }

            // Refresh the calendar to show the new/updated event
            this.byId("calendar").getBinding("rows").refresh();
        },

        // Modified onDiscardEvent method
        onDiscardEvent: function () {
            // Close the popover without saving
            if (this._oEventDetailsPopover) {
                this._oEventDetailsPopover.close();
            }
            MessageToast.show("Changes discarded");
        },

        // Fragment handling functions
        _openRemarksDialog: function () {
            if (!this._oRemarksDialog) {
                this._oRemarksDialog = sap.ui.xmlfragment(
                    "com.capexrevex.capexrevex.view.RemarksDialog",
                    this
                );
                this.getView().addDependent(this._oRemarksDialog);

                // Set the model for the fragment
                this._oRemarksDialog.setModel(this.getView().getModel());
                this._oRemarksDialog.setModel(this.getView().getModel("attendees"), "attendees");
            }

            // Set default values for new event (current date from 4:00 PM to 4:30 PM)
            var oEventDate = UI5Date.getInstance();
            oEventDate.setHours(16, 0, 0, 0); // 4:00 PM

            var oEnd = UI5Date.getInstance(oEventDate);
            oEnd.setHours(16, 30, 0, 0); // 4:30 PM

            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", {
                title: "",
                start: oEventDate,
                end: oEnd,
                info: "",
                type: "Type01",
                icon: "",
                attendees: [],
                isNew: true // Flag to indicate it's a new appointment
            });

            this._oRemarksDialog.open();
        },

        onSaveEventFromDialog: function () {
            var oViewModel = this.getView().getModel("view");
            var oSelectedEvent = oViewModel.getProperty("/selectedEvent");

            // Get values from the dialog
            var sTitle = sap.ui.getCore().byId("eventTitle")
            var sAttendees = sap.ui.getCore().byId("eventAttendees")
            var bMakeRecurring = sap.ui.getCore().byId("makeRecurring")
            var bAllDay = sap.ui.getCore().byId("allDay")
            var bInPerson = sap.ui.getCore().byId("inPerson")
            var sResponseOption = sap.ui.getCore().byId("responseOptions")
            var sShowAs = sap.ui.getCore().byId("showAs")
            var sDescription = sap.ui.getCore().byId("eventDescription")

            // Get the date and time values
            var oDatePicker = sap.ui.getCore().byId("eventDate");
            var oStartTimePicker = sap.ui.getCore().byId("startTime");
            var oEndTimePicker = sap.ui.getCore().byId("endTime");

            var oDate = oDatePicker.getDateValue();
            var oStartTime = oStartTimePicker.getDateValue();
            var oEndTime = oEndTimePicker.getDateValue();

            // Combine date and start time
            var oStart = new Date(oDate);
            oStart.setHours(oStartTime.getHours(), oStartTime.getMinutes(), 0, 0);

            var oEnd = new Date(oDate);
            oEnd.setHours(oEndTime.getHours(), oEndTime.getMinutes(), 0, 0);

            // Validate that end time is after start time
            if (oEnd <= oStart) {
                return;
            }

            // Create the new appointment object
            var newAppointment = {
                start: oStart,
                end: oEnd,
                info: bInPerson ? "In-person event" : "Online event",
                type: "Type01",
                attendees: sAttendees,
                description: sDescription,
                recurring: bMakeRecurring,
                allDay: bAllDay,
                responseOption: sResponseOption,
                showAs: sShowAs,
                category: "Appointment",
                recurrence: bMakeRecurring ? "Recurring" : "Non-recurring",
                inPerson: bInPerson ? "In-person" : "Virtual",
                organizerStatus: "sent",
                attendeeStatus: "accepted"
            };

            // Get the model and add the new appointment to the first person's calendar
            var oModel = this.getView().getModel();
            var aPeople = oModel.getProperty("/people");

            if (aPeople && aPeople.length > 0) {
                // Add to the first person's appointments
                aPeople[0].appointments.push(newAppointment);

                // Update the model
                oModel.setProperty("/people", aPeople);

                // Close the dialog
                if (this._oRemarksDialog) {
                    this._oRemarksDialog.close();
                }

                // Refresh the calendar to show the new appointment
                this.byId("calendar").getBinding("rows").refresh(true);
            }
        },

        onCancelEventFromDialog: function () {
            // Close the dialog without saving
            if (this._oRemarksDialog) {
                this._oRemarksDialog.close();
            }
        },

        // Modified onExit method
        onExit: function () {
            // Clean up all fragments when the controller is destroyed
            if (this._oRemarksDialog) {
                this._oRemarksDialog.destroy();
                this._oRemarksDialog = null;
            }
            if (this._oChannelMeetingDialog) {
                this._oChannelMeetingDialog.destroy();
                this._oChannelMeetingDialog = null;
            }
            if (this._oVirtualAppointmentDialog) {
                this._oVirtualAppointmentDialog.destroy();
                this._oVirtualAppointmentDialog = null;
            }
            if (this._oEventDetailsPopover) {
                this._oEventDetailsPopover.destroy();
                this._oEventDetailsPopover = null;
            }
        }
    });
});

UPDATED CODE 3
sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/ui/core/date/UI5Date",
    "sap/ui/core/Fragment",
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/ui/unified/CalendarIntervalType"
], function (Controller, JSONModel, MessageToast, UI5Date, Fragment, Filter, FilterOperator, CalendarIntervalType) {
    "use strict";
    return Controller.extend("com.capexrevex.capexravex.controller.capexrevex", {
        onInit: function () {
            // Get today's date
            var today = UI5Date.getInstance();
            
            // Set the calendar to start from today
            var startDate = UI5Date.getInstance(
                today.getFullYear(), 
                today.getMonth(), 
                today.getDate(), 
                8, 0 // Start at 8 AM
            );
            
            // Create appointments starting from today
            var appointments = [];
            
            // Today's appointments
            appointments.push({
                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 9, 0),
                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 10, 0),
                title: "Team sync",
                info: "Canteen",
                type: "Type07",
                pic: "sap-icon://family-care",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "In-person",
                organizerStatus: "sent",
                attendeeStatus: "accepted"
            });
            
            appointments.push({
                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 11, 0),
                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 12, 0),
                title: "Client Meeting",
                info: "Conference Room",
                type: "Type01",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "In-person",
                organizerStatus: "sent",
                attendeeStatus: "tentative"
            });
            
            // Tomorrow's appointments
            var tomorrow = UI5Date.getInstance(today);
            tomorrow.setDate(tomorrow.getDate() + 1);
            
            appointments.push({
                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 10, 0),
                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 11, 30),
                title: "Project Review",
                info: "In Progress",
                type: "Type01",
                pic: "sap-icon://business-objects-experience",
                category: "Appointment",
                showAs: "Busy",
                recurrence: "Recurring",
                inPerson: "Virtual",
                organizerStatus: "draft",
                attendeeStatus: "notResponded"
            });
            
            appointments.push({
                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 14, 0),
                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 15, 0),
                title: "Training Session",
                info: "Online",
                type: "Type03",
                pic: "sap-icon://learning-assistant",
                category: "Appointment",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "Virtual",
                organizerStatus: "sent",
                attendeeStatus: "accepted"
            });
            
            // Day after tomorrow
            var dayAfter = UI5Date.getInstance(tomorrow);
            dayAfter.setDate(dayAfter.getDate() + 1);
            
            appointments.push({
                start: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 9, 0),
                end: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 10, 0),
                title: "Team Standup",
                info: "Daily meeting",
                type: "Type07",
                pic: "sap-icon://group",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Recurring",
                inPerson: "Hybrid",
                organizerStatus: "sent",
                attendeeStatus: "accepted"
            });
            
            appointments.push({
                start: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 13, 0),
                end: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 14, 30),
                title: "Lunch with Client",
                info: "Restaurant",
                type: "Type02",
                pic: "sap-icon://food",
                category: "Appointment",
                showAs: "Free",
                recurrence: "Non-recurring",
                inPerson: "In-person",
                organizerStatus: "sent",
                attendeeStatus: "declined"
            });
            
            // Fourth day
            var fourthDay = UI5Date.getInstance(dayAfter);
            fourthDay.setDate(fourthDay.getDate() + 1);
            
            appointments.push({
                start: UI5Date.getInstance(fourthDay.getFullYear(), fourthDay.getMonth(), fourthDay.getDate(), 11, 0),
                end: UI5Date.getInstance(fourthDay.getFullYear(), fourthDay.getMonth(), fourthDay.getDate(), 12, 0),
                title: "Product Demo",
                info: "Showcase new features",
                type: "Type04",
                pic: "sap-icon://presentation",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "In-person",
                organizerStatus: "sent",
                attendeeStatus: "followed"
            });
            
            // Fifth day
            var fifthDay = UI5Date.getInstance(fourthDay);
            fifthDay.setDate(fifthDay.getDate() + 1);
            
            appointments.push({
                start: UI5Date.getInstance(fifthDay.getFullYear(), fifthDay.getMonth(), fifthDay.getDate(), 10, 0),
                end: UI5Date.getInstance(fifthDay.getFullYear(), fifthDay.getMonth(), fifthDay.getDate(), 11, 30),
                title: "Planning Session",
                info: "Quarterly planning",
                type: "Type05",
                pic: "sap-icon://calendar",
                category: "Meeting",
                showAs: "Busy",
                recurrence: "Recurring",
                inPerson: "Virtual",
                organizerStatus: "sent",
                attendeeStatus: "canceled"
            });
            
            // Initialize the view model with data
            var oViewModel = new JSONModel({
                startDate: startDate,
                people: [
                    {
                        name: "John Doe",
                        role: "Developer",
                        appointments: appointments
                    }
                ],
                selectedEvent: {
                    title: "",
                    start: UI5Date.getInstance(),
                    end: UI5Date.getInstance(),
                    info: "",
                    type: "Type01"
                },
                filters: {
                    appointments: true,
                    meetings: true,
                    reservations: false,
                    categories: [],
                    showAs: [],
                    recurrence: [],
                    inPerson: [],
                    organizer: {
                        sent: true,
                        draft: true
                    },
                    attendee: {
                        accepted: true,
                        declined: true,
                        followed: true,
                        tentative: true,
                        canceled: true,
                        notResponded: true
                    }
                },
                currentView: "Work week", // Track the current calendar view
                timeScale: "30 minutes", // Track the current time scale
                daysToShow: 5, // Track the number of days to show in work week view
                workWeekMenuOpen: false // Track if work week submenu is open
            });
            
            // Create additional model with extended data using UI5Date
            var oModel = new JSONModel();
            oModel.setData({
                startDate: startDate,
                people: [
                    {
                        pic: "sap-icon://hr-approval/",
                        name: "John Miller",
                        role: "team member",
                        appointments: [
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 8, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 9, 0),
                                title: "Team sync",
                                info: "Canteen",
                                type: "Type07",
                                pic: "sap-icon://family-care",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "accepted"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 9, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 11, 0),
                                title: "Morning Sync",
                                info: "I call you",
                                type: "Type01",
                                pic: "sap-icon://call",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Recurring",
                                inPerson: "Virtual",
                                organizerStatus: "sent",
                                attendeeStatus: "tentative"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 10, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 12, 0),
                                title: "Sync Bill",
                                info: "Online",
                                type: "Type03",
                                category: "Appointment",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "Virtual",
                                organizerStatus: "draft",
                                attendeeStatus: "notResponded"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 10, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 13, 0),
                                title: "Check Flights",
                                info: "no room",
                                type: "Type09",
                                pic: "sap-icon://flight",
                                category: "Appointment",
                                showAs: "Free",
                                recurrence: "Non-recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "declined"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 13, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 14, 0),
                                title: "Lunch",
                                info: "canteen",
                                type: "Type05",
                                pic: "sap-icon://private",
                                category: "Appointment",
                                showAs: "Free",
                                recurrence: "Non-recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "accepted"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 18, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 20, 0),
                                title: "Discussion of the plan",
                                info: "Online meeting",
                                type: "Type04",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "Virtual",
                                organizerStatus: "sent",
                                attendeeStatus: "followed"
                            }
                        ]
                    },
                    {
                        pic: "sap-icon://hr-approval",
                        name: "Donna Moore",
                        role: "team member",
                        appointments: [
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 8, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 9, 26),
                                title: "Team sync",
                                info: "Canteen",
                                type: "Type07",
                                pic: "sap-icon://family-care",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "accepted"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 10, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 12, 0),
                                title: "Sync John",
                                info: "Online",
                                type: "Type03",
                                category: "Appointment",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "Virtual",
                                organizerStatus: "draft",
                                attendeeStatus: "notResponded"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 11, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 12, 0),
                                title: "Prep for planning",
                                info: "room 5",
                                type: "Type01",
                                pic: "sap-icon://family-care",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "canceled"
                            }
                        ]
                    },
                    {
                        pic: "sap-icon://hr-approval",
                        name: "Alex Johnson",
                        role: "team member",
                        appointments: [
                            {
                                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 9, 0),
                                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 10, 0),
                                title: "Team sync",
                                info: "Canteen",
                                type: "Type07",
                                pic: "sap-icon://family-care",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "accepted"
                            },
                            {
                                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 10, 0),
                                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 12, 0),
                                title: "Project Planning",
                                info: "Conference Room",
                                type: "Type01",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "tentative"
                            },
                            {
                                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 14, 0),
                                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 15, 0),
                                title: "Client Call",
                                info: "Online",
                                type: "Type03",
                                category: "Appointment",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "Virtual",
                                organizerStatus: "draft",
                                attendeeStatus: "notResponded"
                            }
                        ]
                    },
                    {
                        pic: "sap-icon://hr-approval",
                        name: "Sarah Williams",
                        role: "team member",
                        appointments: [
                            {
                                start: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 9, 0),
                                end: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 10, 0),
                                title: "Team sync",
                                info: "Canteen",
                                type: "Type07",
                                pic: "sap-icon://family-care",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "accepted"
                            },
                            {
                                start: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 11, 0),
                                end: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 12, 30),
                                title: "Design Review",
                                info: "Conference Room",
                                type: "Type01",
                                category: "Meeting",
                                showAs: "Busy",
                                recurrence: "Non-recurring",
                                inPerson: "In-person",
                                organizerStatus: "sent",
                                attendeeStatus: "declined"
                            }
                        ]
                    }
                ]
            });
            
            // Set both models to the view
            this.getView().setModel(oViewModel, "view");
            this.getView().setModel(oModel);
            
            // Initialize filter arrays
            this._aFilters = [];
            
            // Update date display in filter popover
            this._updateDateDisplay();
            
            // Set initial view to Work week
            this.byId("viewSelectButton").setText("Work week");
            
            // Set initial time scale and days to show
            this._updateTimeScale(30);
            this._updateWorkWeekView(5);
        },
        
        // Update date display in filter popover
        _updateDateDisplay: function() {
            var oDateDisplay = this.byId("dateDisplay");
            if (oDateDisplay) {
                var today = UI5Date.getInstance();
                var options = { weekday: 'long', day: 'numeric' };
                var dateText = today.toLocaleDateString('en-US', options);
                oDateDisplay.setText(dateText);
            }
        },
        
        // Role-based functionality
        roles: {
            donna: "Donna Moore",
            manager: "manager",
            admin: "admin"
        },
        
        handleRoleChange: function () {
            this.getView().getModel().refresh(true);
        },
        
        getUserRole: function() {
            return this.roles[this.byId("userRole").getSelectedKey()];
        },
        
        canModifyAppointments: function(sRole) {
            var sUserRole = this.getUserRole();
            if (sUserRole === this.roles.manager || sUserRole === this.roles.admin || sUserRole === sRole) {
                return true;
            }
        },
        
        // Filter functionality
        onFilterChange: function(oEvent) {
            var sFilterType = oEvent.getSource().getId().replace("Checkbox", "");
            var bSelected = oEvent.getParameter("selected");
            
            // Update filter model
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            oFilters[sFilterType.toLowerCase()] = bSelected;
            oViewModel.setProperty("/filters", oFilters);
            
            // Apply filters
            this.applyFilters();
        },
        
        applyFilters: function() {
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            
            // Clear existing filters
            this._aFilters = [];
            
            // Apply category filters
            if (!oFilters.appointments) {
                this._aFilters.push(new Filter("category", FilterOperator.NE, "Appointment"));
            }
            
            if (!oFilters.meetings) {
                this._aFilters.push(new Filter("category", FilterOperator.NE, "Meeting"));
            }
            
            if (!oFilters.reservations) {
                this._aFilters.push(new Filter("category", FilterOperator.NE, "Reservation"));
            }
            
            // Apply additional filters based on selected options
            if (oFilters.categories && oFilters.categories.length > 0) {
                this._aFilters.push(new Filter("category", FilterOperator.Contains, oFilters.categories.join("|")));
            }
            
            if (oFilters.showAs && oFilters.showAs.length > 0) {
                this._aFilters.push(new Filter("showAs", FilterOperator.Contains, oFilters.showAs.join("|")));
            }
            
            if (oFilters.recurrence && oFilters.recurrence.length > 0) {
                this._aFilters.push(new Filter("recurrence", FilterOperator.Contains, oFilters.recurrence.join("|")));
            }
            
            if (oFilters.inPerson && oFilters.inPerson.length > 0) {
                this._aFilters.push(new Filter("inPerson", FilterOperator.Contains, oFilters.inPerson.join("|")));
            }
            
            // Apply organizer filters
            var aOrganizerFilters = [];
            if (oFilters.organizer.sent) {
                aOrganizerFilters.push(new Filter("organizerStatus", FilterOperator.EQ, "sent"));
            }
            if (oFilters.organizer.draft) {
                aOrganizerFilters.push(new Filter("organizerStatus", FilterOperator.EQ, "draft"));
            }
            if (aOrganizerFilters.length > 0) {
                this._aFilters.push(new Filter({
                    filters: aOrganizerFilters,
                    and: false
                }));
            }
            
            // Apply attendee filters
            var aAttendeeFilters = [];
            if (oFilters.attendee.accepted) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "accepted"));
            }
            if (oFilters.attendee.declined) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "declined"));
            }
            if (oFilters.attendee.followed) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "followed"));
            }
            if (oFilters.attendee.tentative) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "tentative"));
            }
            if (oFilters.attendee.canceled) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "canceled"));
            }
            if (oFilters.attendee.notResponded) {
                aAttendeeFilters.push(new Filter("attendeeStatus", FilterOperator.EQ, "notResponded"));
            }
            if (aAttendeeFilters.length > 0) {
                this._aFilters.push(new Filter({
                    filters: aAttendeeFilters,
                    and: false
                }));
            }
            
            // Apply filters to the calendar
            var oCalendar = this.byId("calendar");
            var oBinding = oCalendar.getBinding("rows");
            
            if (this._aFilters.length > 0) {
                oBinding.filter(this._aFilters);
            } else {
                oBinding.filter([]);
            }
            
            // Update filter button text
            var oFilterButton = this.byId("_IDGenButton7");
            var iFilterCount = this._aFilters.length;
            oFilterButton.setText(iFilterCount > 0 ? "Filter applied (" + iFilterCount + ")" : "Filter applied");
        },
        
        // Filter popover handlers
        onAppointmentsFilterPress: function(oEvent) {
            var oButton = oEvent.getSource();
            this.byId("appointmentsFilterPopover").openBy(oButton);
        },
        
        onMeetingsFilterPress: function(oEvent) {
            var oButton = oEvent.getSource();
            this.byId("meetingsFilterPopover").openBy(oButton);
        },
        
        onReservationsFilterPress: function(oEvent) {
            var oButton = oEvent.getSource();
            this.byId("reservationsFilterPopover").openBy(oButton);
        },
        
        onCategoriesFilterPress: function(oEvent) {
            var oButton = oEvent.getSource();
            this.byId("categoriesFilterPopover").openBy(oButton);
        },
        
        onShowAsFilterPress: function(oEvent) {
            var oButton = oEvent.getSource();
            this.byId("showAsFilterPopover").openBy(oButton);
        },
        
        onRecurrenceFilterPress: function(oEvent) {
            var oButton = oEvent.getSource();
            this.byId("recurrenceFilterPopover").openBy(oButton);
        },
        
        onInPersonFilterPress: function(oEvent) {
            var oButton = oEvent.getSource();
            this.byId("inPersonFilterPopover").openBy(oButton);
        },
        
        // Organizer and Attendee filter handlers
        onOrganizerFilterPress: function(oEvent) {
            var oOptionsBox = this.byId("organizerOptions");
            oOptionsBox.setVisible(!oOptionsBox.getVisible());
        },
        
        onAttendeeFilterPress: function(oEvent) {
            var oOptionsBox = this.byId("attendeeOptions");
            oOptionsBox.setVisible(!oOptionsBox.getVisible());
        },
        
        onOrganizerFilterChange: function(oEvent) {
            var sId = oEvent.getSource().getId();
            var bSelected = oEvent.getParameter("selected");
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            
            // Update the corresponding filter property
            if (sId === "sentCheckbox") {
                oFilters.organizer.sent = bSelected;
            } else if (sId === "draftCheckbox") {
                oFilters.organizer.draft = bSelected;
            }
            
            oViewModel.setProperty("/filters", oFilters);
            this.applyFilters();
        },
        
        onAttendeeFilterChange: function(oEvent) {
            var sId = oEvent.getSource().getId();
            var bSelected = oEvent.getParameter("selected");
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            
            // Update the corresponding filter property
            if (sId === "acceptedCheckbox") {
                oFilters.attendee.accepted = bSelected;
            } else if (sId === "declinedCheckbox") {
                oFilters.attendee.declined = bSelected;
            } else if (sId === "followedCheckbox") {
                oFilters.attendee.followed = bSelected;
            } else if (sId === "tentativeCheckbox") {
                oFilters.attendee.tentative = bSelected;
            } else if (sId === "canceledCheckbox") {
                oFilters.attendee.canceled = bSelected;
            } else if (sId === "notRespondedCheckbox") {
                oFilters.attendee.notResponded = bSelected;
            }
            
            oViewModel.setProperty("/filters", oFilters);
            this.applyFilters();
        },
        
        onUnselectAllRight: function() {
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            
            // Reset organizer filters
            oFilters.organizer.sent = false;
            oFilters.organizer.draft = false;
            
            // Reset attendee filters
            oFilters.attendee.accepted = false;
            oFilters.attendee.declined = false;
            oFilters.attendee.followed = false;
            oFilters.attendee.tentative = false;
            oFilters.attendee.canceled = false;
            oFilters.attendee.notResponded = false;
            
            oViewModel.setProperty("/filters", oFilters);
            
            // Update the checkboxes
            this.byId("sentCheckbox").setSelected(false);
            this.byId("draftCheckbox").setSelected(false);
            this.byId("acceptedCheckbox").setSelected(false);
            this.byId("declinedCheckbox").setSelected(false);
            this.byId("followedCheckbox").setSelected(false);
            this.byId("tentativeCheckbox").setSelected(false);
            this.byId("canceledCheckbox").setSelected(false);
            this.byId("notRespondedCheckbox").setSelected(false);
            
            this.applyFilters();
        },
        
        // Unselect all handlers
        onAppointmentsUnselectAll: function() {
            this._unselectAllCheckboxes("appointmentsFilterList");
        },
        
        onMeetingsUnselectAll: function() {
            this._unselectAllCheckboxes("meetingsFilterList");
        },
        
        onReservationsUnselectAll: function() {
            this._unselectAllCheckboxes("reservationsFilterList");
        },
        
        onCategoriesUnselectAll: function() {
            this._unselectAllCheckboxes("categoriesFilterList");
        },
        
        onShowAsUnselectAll: function() {
            this._unselectAllCheckboxes("showAsFilterList");
        },
        
        onRecurrenceUnselectAll: function() {
            this._unselectAllCheckboxes("recurrenceFilterList");
        },
        
        onInPersonUnselectAll: function() {
            this._unselectAllCheckboxes("inPersonFilterList");
        },
        
        _unselectAllCheckboxes: function(sListId) {
            var oList = this.byId(sListId);
            var aItems = oList.getItems();
            
            aItems.forEach(function(oItem) {
                if (oItem.isA("sap.m.CheckBox")) {
                    oItem.setSelected(false);
                }
            });
        },
        
        // Filter selection handlers
        onAppointmentsFilterSelect: function(oEvent) {
            this._updateFilterArray("appointments", oEvent);
        },
        
        onMeetingsFilterSelect: function(oEvent) {
            this._updateFilterArray("meetings", oEvent);
        },
        
        onReservationsFilterSelect: function(oEvent) {
            this._updateFilterArray("reservations", oEvent);
        },
        
        onCategoriesFilterSelect: function(oEvent) {
            this._updateFilterArray("categories", oEvent);
        },
        
        onShowAsFilterSelect: function(oEvent) {
            this._updateFilterArray("showAs", oEvent);
        },
        
        onRecurrenceFilterSelect: function(oEvent) {
            this._updateFilterArray("recurrence", oEvent);
        },
        
        onInPersonFilterSelect: function(oEvent) {
            this._updateFilterArray("inPerson", oEvent);
        },
        
        _updateFilterArray: function(sFilterType, oEvent) {
            var sValue = oEvent.getSource().getText();
            var bSelected = oEvent.getParameter("selected");
            
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            
            if (!oFilters[sFilterType]) {
                oFilters[sFilterType] = [];
            }
            
            if (bSelected) {
                if (oFilters[sFilterType].indexOf(sValue) === -1) {
                    oFilters[sFilterType].push(sValue);
                }
            } else {
                var iIndex = oFilters[sFilterType].indexOf(sValue);
                if (iIndex !== -1) {
                    oFilters[sFilterType].splice(iIndex, 1);
                }
            }
            
            oViewModel.setProperty("/filters", oFilters);
            this.applyFilters();
        },
        
        onClearFilters: function() {
            // Reset all filter checkboxes
            var aCheckBoxIds = [
                "appointmentsCheckbox", "meetingsCheckbox", "reservationsCheckbox"
            ];
            
            aCheckBoxIds.forEach(function(sId) {
                var oCheckBox = this.byId(sId);
                if (oCheckBox) {
                    oCheckBox.setSelected(sId === "appointmentsCheckbox" || sId === "meetingsCheckbox");
                }
            }.bind(this));
            
            // Reset organizer and attendee filters
            this.byId("sentCheckbox").setSelected(true);
            this.byId("draftCheckbox").setSelected(true);
            this.byId("acceptedCheckbox").setSelected(true);
            this.byId("declinedCheckbox").setSelected(true);
            this.byId("followedCheckbox").setSelected(true);
            this.byId("tentativeCheckbox").setSelected(true);
            this.byId("canceledCheckbox").setSelected(true);
            this.byId("notRespondedCheckbox").setSelected(true);
            
            // Reset filter arrays in model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/filters", {
                appointments: true,
                meetings: true,
                reservations: false,
                categories: [],
                showAs: [],
                recurrence: [],
                inPerson: [],
                organizer: {
                    sent: true,
                    draft: true
                },
                attendee: {
                    accepted: true,
                    declined: true,
                    followed: true,
                    tentative: true,
                    canceled: true,
                    notResponded: true
                }
            });
            
            // Apply empty filters
            this._aFilters = [];
            var oCalendar = this.byId("calendar");
            oCalendar.getBinding("rows").filter([]);
            
            // Update filter button text
            this.byId("_IDGenButton7").setText("Filter applied");
            
            MessageToast.show("All filters cleared");
        },
        
        // Drag and Drop functionality
        handleAppointmentDragEnter: function(oEvent) {
            if (this.isAppointmentOverlap(oEvent, oEvent.getParameter("calendarRow"))) {
                oEvent.preventDefault();
            }
        },
        
        handleAppointmentDrop: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                oCalendarRow = oEvent.getParameter("calendarRow"),
                bCopy = oEvent.getParameter("copy"),
                sTitle = oAppointment.getTitle(),
                oModel = this.getView().getModel(),
                oAppBindingContext = oAppointment.getBindingContext(),
                oRowBindingContext = oCalendarRow.getBindingContext(),
                handleAppointmentDropBetweenRows = function () {
                    var aPath = oAppBindingContext.getPath().split("/"),
                        iIndex = aPath.pop(),
                        sRowAppointmentsPath = aPath.join("/");
                    oRowBindingContext.getObject().appointments.push(
                        oModel.getProperty(oAppBindingContext.getPath())
                    );
                    oModel.getProperty(sRowAppointmentsPath).splice(iIndex, 1);
                };
            if (bCopy) { // "copy" appointment
                var oProps = Object.assign({}, oModel.getProperty(oAppointment.getBindingContext().getPath()));
                oProps.start = oStartDate;
                oProps.end = oEndDate;
                oRowBindingContext.getObject().appointments.push(oProps);
            } else { // "move" appointment
                oModel.setProperty("start", oStartDate, oAppBindingContext);
                oModel.setProperty("end", oEndDate, oAppBindingContext);
                if (oAppointment.getParent() !== oCalendarRow) {
                    handleAppointmentDropBetweenRows();
                }
            }
            oModel.refresh(true);
        },
        
        handleAppointmentResize: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate");
            if (!this.isAppointmentOverlap(oEvent, oAppointment.getParent())) {
                oAppointment
                    .setStartDate(oStartDate)
                    .setEndDate(oEndDate);
            } else {
                MessageToast.show("As a manager you can not resize events if they overlap with another events");
            }
        },
        
        handleAppointmentCreate: function (oEvent) {
            var oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                oPlanningCalendarRow = oEvent.getParameter("calendarRow"),
                oModel = this.getView().getModel(),
                sPath = oPlanningCalendarRow.getBindingContext().getPath();
            oModel.getProperty(sPath).appointments.push({
                title: "New Appointment",
                start: oStartDate,
                end: oEndDate,
                category: "Appointment",
                showAs: "Busy",
                recurrence: "Non-recurring",
                inPerson: "In-person",
                organizerStatus: "sent",
                attendeeStatus: "accepted"
            });
            MessageToast.show("New Appointment is created at \n" + oStartDate + "\n and end at \n" + oEndDate + ".");
            oModel.refresh(true);
        },
        
        isAppointmentOverlap: function (oEvent, oCalendarRow) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                bAppointmentOverlapped;
            if (this.getUserRole() === this.roles.manager) {
                bAppointmentOverlapped = oCalendarRow.getAppointments().some(function (oCurrentAppointment) {
                    if (oCurrentAppointment === oAppointment) {
                        return;
                    }
                    var oAppStartTime = oCurrentAppointment.getStartDate().getTime(),
                        oAppEndTime = oCurrentAppointment.getEndDate().getTime();
                    if (oAppStartTime <= oStartDate.getTime() && oStartDate.getTime() < oAppEndTime) {
                        return true;
                    }
                    if (oAppStartTime < oEndDate.getTime() && oEndDate.getTime() <= oAppEndTime) {
                        return true;
                    }
                    if (oStartDate.getTime() <= oAppStartTime && oAppStartTime < oEndDate.getTime()) {
                        return true;
                    }
                });
            }
            return bAppointmentOverlapped;
        },
        
        // Toolbar and UI functionality
        onTodayPress: function () {
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/startDate", UI5Date.getInstance());
            MessageToast.show("Navigated to today");
        },
        
        onViewSelectPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oViewPopover = this.byId("viewPopover");
            
            // Close other popovers
            this.byId("filterPopover").close();
            this.byId("newEventPopover").close();
            this.byId("eventDetailsPopover").close();
            
            // Toggle view popover
            if (!oViewPopover.isOpen()) {
                oViewPopover.openBy(oButton);
            } else {
                oViewPopover.close();
            }
        },
        
        onFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oFilterPopover = this.byId("filterPopover");
            
            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("newEventPopover").close();
            this.byId("eventDetailsPopover").close();
            
            // Toggle filter popover
            if (!oFilterPopover.isOpen()) {
                oFilterPopover.openBy(oButton);
            } else {
                oFilterPopover.close();
            }
        },
        
        onMeetNowPress: function () {
            MessageToast.show("Starting meeting now...");
        },
        
        onNewEventPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oNewEventPopover = this.byId("newEventPopover");
            
            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("filterPopover").close();
            this.byId("eventDetailsPopover").close();
            
            // Toggle new event popover
            if (!oNewEventPopover.isOpen()) {
                oNewEventPopover.openBy(oButton);
            } else {
                oNewEventPopover.close();
            }
        },
        
        onNotificationPress: function () {
            MessageToast.show("No new notifications");
        },
        
        // Work week menu functionality
        onWorkWeekMenuPress: function(oEvent) {
            var oViewModel = this.getView().getModel("view");
            var bMenuOpen = oViewModel.getProperty("/workWeekMenuOpen");
            
            // Toggle the menu visibility
            oViewModel.setProperty("/workWeekMenuOpen", !bMenuOpen);
            
            // Update the arrow icon direction
            var oButton = this.byId("_IDGenWorkWeekButton");
            oButton.setIcon(!bMenuOpen ? "sap-icon://slim-arrow-down" : "sap-icon://slim-arrow-right");
        },
        
        // Time scale dropdown change handler
        onTimeScaleChange: function(oEvent) {
            var oViewModel = this.getView().getModel("view");
            var oSource = oEvent.getSource();
            var sSelectedKey = oSource.getSelectedKey();
            
            // Extract the number of minutes from the selected key
            var iMinutes = parseInt(sSelectedKey);
            
            // Update the model
            oViewModel.setProperty("/timeScale", iMinutes + " minutes");
            
            // Get current days to show
            var iDays = oViewModel.getProperty("/daysToShow");
            
            // Update the button text to show both days and time scale
            var oButton = this.byId("viewSelectButton");
            oButton.setText("Work week (" + iDays + " days, " + iMinutes + " min)");
            
            // Update the calendar's time scale
            this._updateTimeScale(iMinutes);
            
            // Make sure we're in Work week view
            var oCalendar = this.byId("calendar");
            oCalendar.setViewKey("Workweek");
            oViewModel.setProperty("/currentView", "Work week");
            
            MessageToast.show("Time scale changed to: " + iMinutes + " minutes");
        },
        
        // Days to show dropdown change handler
        onDaysToShowChange: function(oEvent) {
            var oViewModel = this.getView().getModel("view");
            var oSource = oEvent.getSource();
            var iDays = parseInt(oSource.getSelectedKey());
            
            // Update the model
            oViewModel.setProperty("/daysToShow", iDays);
            
            // Get current time scale
            var sTimeScale = oViewModel.getProperty("/timeScale");
            var iMinutes = parseInt(sTimeScale.match(/\d+/)[0]);
            
            // Update the button text to show both days and time scale
            var oButton = this.byId("viewSelectButton");
            oButton.setText("Work week (" + iDays + " days, " + iMinutes + " min)");
            
            // Update the work week view
            this._updateWorkWeekView(iDays);
            
            // Make sure we're in Work week view
            var oCalendar = this.byId("calendar");
            oCalendar.setViewKey("Workweek");
            oViewModel.setProperty("/currentView", "Work week");
            
            MessageToast.show("Work week now shows " + iDays + " days");
        },
        
        // Days dropdown change handler (main view selection)
        onDaysChange: function(oEvent) {
            var oSource = oEvent.getSource();
            var iDays = parseInt(oSource.getSelectedKey());
            
            // Update the model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/daysToShow", iDays);
            
            // Set the current view to Work week
            oViewModel.setProperty("/currentView", "Work week");
            
            // Update the button text
            var oButton = this.byId("viewSelectButton");
            var sTimeScale = oViewModel.getProperty("/timeScale");
            var iMinutes = parseInt(sTimeScale.match(/\d+/)[0]);
            oButton.setText("Work week (" + iDays + " days, " + iMinutes + " min)");
            
            // Update the calendar
            var oCalendar = this.byId("calendar");
            oCalendar.setViewKey("Workweek");
            
            // Update the work week view
            this._updateWorkWeekView(iDays);
            
            // Close the popover
            this.byId("viewPopover").close();
            
            MessageToast.show("Work week now shows " + iDays + " days");
        },
        
        onViewSelected: function (oEvent) {
            var sSelectedView = oEvent.getParameter("listItem").getTitle();
            var oButton = this.byId("viewSelectButton");
            var oCalendar = this.byId("calendar");
            var oViewModel = this.getView().getModel("view");
            
            // Handle regular view selection (not Work week submenu items)
            if (sSelectedView === "Work week") {
                oButton.setText(sSelectedView);
                oViewModel.setProperty("/currentView", sSelectedView);
                this.byId("viewPopover").close();
                
                // Update calendar view
                oCalendar.setViewKey("Workweek");
                
                // Get current settings
                var iDaysToShow = oViewModel.getProperty("/daysToShow");
                var sTimeScale = oViewModel.getProperty("/timeScale");
                var iMinutes = parseInt(sTimeScale.match(/\d+/)[0]);
                
                // Update button text to show both days and time scale
                oButton.setText("Work week (" + iDaysToShow + " days, " + iMinutes + " min)");
                
                // Update the work week view and time scale
                this._updateWorkWeekView(iDaysToShow);
                this._updateTimeScale(iMinutes);
                
                MessageToast.show("View changed to: " + sSelectedView);
            } else if (sSelectedView === "Week") {
                oButton.setText(sSelectedView);
                oViewModel.setProperty("/currentView", sSelectedView);
                this.byId("viewPopover").close();
                
                // Update calendar view
                oCalendar.setViewKey("Week");
                
                MessageToast.show("View changed to: " + sSelectedView);
            } else if (sSelectedView === "Month") {
                oButton.setText(sSelectedView);
                oViewModel.setProperty("/currentView", sSelectedView);
                this.byId("viewPopover").close();
                
                // Update calendar view
                oCalendar.setViewKey("Month");
                
                MessageToast.show("View changed to: " + sSelectedView);
            }
        },
        
        _updateTimeScale: function(iMinutes) {
            var oCalendar = this.byId("calendar");
            var oViewModel = this.getView().getModel("view");
            var sCurrentView = oViewModel.getProperty("/currentView");
            
            // Only update time scale for Day and Work week views
            if (sCurrentView === "Day" || sCurrentView === "Work week") {
                var oView = oCalendar.getViews().find(function(view) {
                    return view.getKey() === sCurrentView.replace(" ", "");
                });
                
                if (oView) {
                    // Calculate the number of intervals based on the selected minutes
                    var iTotalMinutes = 24 * 60; // 24 hours in minutes
                    var iIntervals = iTotalMinutes / iMinutes;
                    
                    // Update the view settings
                    oView.setIntervalsS(iIntervals);
                    oView.setIntervalsM(iIntervals);
                    oView.setIntervalsL(iIntervals);
                    oView.setIntervalType(CalendarIntervalType.Minute); // Use the enum value
                    
                    // Refresh the calendar
                    oCalendar.rerender();
                }
            }
        },
        
        _updateWorkWeekView: function(iDays) {
            var oCalendar = this.byId("calendar");
            var oView = oCalendar.getViews().find(function(view) {
                return view.getKey() === "Workweek";
            });
            
            if (oView) {
                // Update the number of days to show
                oView.setIntervalsS(iDays);
                oView.setIntervalsM(iDays);
                oView.setIntervalsL(iDays);
                
                // Refresh the calendar
                oCalendar.rerender();
            }
        },
        
        onSavedViewsPress: function () {
            // MessageToast.show("Saved views feature coming soon");
        },
        
        onNewEventTypeSelected: function (oEvent) {
            var sEventType = oEvent.getSource().getTitle();
            this.byId("newEventPopover").close();
            
            if (sEventType === "Channel meeting") {
                this._openChannelMeetingDialog();
            } else if (sEventType === "Event") {
                this._openRemarksDialog();
            } else if (sEventType === "Virtual appointment") {
                this._openVirtualAppointmentDialog();
            } else {
                MessageToast.show("Creating new: " + sEventType);
            }
        },
        
        // Open the Channel Meeting Dialog
        _openChannelMeetingDialog: function() {
            var that = this;
            if (!this._oChannelMeetingDialog) {
                Fragment.load({
                    id: this.getView().getId(),
                    name: "com.capexrevex.capexravex.view.ChannelMeetingDialog",
                    controller: this
                }).then(function(oDialog) {
                    that._oChannelMeetingDialog = oDialog;
                    that.getView().addDependent(that._oChannelMeetingDialog);
                    
                    // Set default values for new channel meeting
                    that._setDefaultChannelMeetingValues();
                    
                    that._oChannelMeetingDialog.open();
                }).catch(function(error) {
                    console.error("Error loading channel meeting dialog:", error);
                    MessageToast.show("Error loading meeting dialog");
                });
            } else {
                // Set default values for the meeting
                this._setDefaultChannelMeetingValues();
                this._oChannelMeetingDialog.open();
            }
        },
        // Open the Virtual Appointment Dialog
        _openVirtualAppointmentDialog: function() {
            var that = this;
            if (!this._oVirtualAppointmentDialog) {
                Fragment.load({
                    id: this.getView().getId(),
                    name: "com.capexrevex.capexravex.view.VirtualAppointmentDialog",
                    controller: this
                }).then(function(oDialog) {
                    that._oVirtualAppointmentDialog = oDialog;
                    that.getView().addDependent(that._oVirtualAppointmentDialog);
                    
                    // Set default values for virtual appointment
                    that._setDefaultVirtualAppointmentValues();
                    
                    that._oVirtualAppointmentDialog.open();
                }).catch(function(error) {
                    console.error("Error loading virtual appointment dialog:", error);
                    MessageToast.show("Error loading virtual appointment dialog");
                });
            } else {
                // Set default values for the appointment
                this._setDefaultVirtualAppointmentValues();
                this._oVirtualAppointmentDialog.open();
            }
        },
        _setDefaultChannelMeetingValues: function() {
            // Set default date and time (current date, 3:00 PM to 3:30 PM)
            var oNow = UI5Date.getInstance();
            var oStart = UI5Date.getInstance(oNow);
            oStart.setHours(15, 0, 0, 0); // 3:00 PM
            
            var oEnd = UI5Date.getInstance(oStart);
            oEnd.setHours(15, 30, 0, 0); // 3:30 PM
            
            // Set values in the dialog if it exists
            if (this._oChannelMeetingDialog) {
                var oStartDate = Fragment.byId(this.getView().getId(), "startDate");
                var oStartTime = Fragment.byId(this.getView().getId(), "startTime");
                var oEndDate = Fragment.byId(this.getView().getId(), "endDate");
                var oEndTime = Fragment.byId(this.getView().getId(), "endTime");
                
                if (oStartDate) oStartDate.setDateValue(oStart);
                if (oStartTime) oStartTime.setDateValue(oStart);
                if (oEndDate) oEndDate.setDateValue(oEnd);
                if (oEndTime) oEndTime.setDateValue(oEnd);
            }
        },
        _setDefaultVirtualAppointmentValues: function() {
            // Set default date and time (current date, 4:30 PM to 5:00 PM)
            var oNow = UI5Date.getInstance();
            var oStart = UI5Date.getInstance(oNow);
            oStart.setHours(16, 30, 0, 0); // 4:30 PM
            
            var oEnd = UI5Date.getInstance(oStart);
            oEnd.setHours(17, 0, 0, 0); // 5:00 PM
            
            // Set values in the dialog if it exists
            if (this._oVirtualAppointmentDialog) {
                var oStartDate = Fragment.byId(this.getView().getId(), "virtualStartDate");
                var oStartTime = Fragment.byId(this.getView().getId(), "virtualStartTime");
                var oEndDate = Fragment.byId(this.getView().getId(), "virtualEndDate");
                var oEndTime = Fragment.byId(this.getView().getId(), "virtualEndTime");
                
                if (oStartDate) oStartDate.setDateValue(oStart);
                if (oStartTime) oStartTime.setDateValue(oStart);
                if (oEndDate) oEndDate.setDateValue(oEnd);
                if (oEndTime) oEndTime.setDateValue(oEnd);
            }
        },
        // Save Channel Meeting
        onSaveChannelMeeting: function() {
            try {
                // Get values from the dialog
                var sTitle = Fragment.byId(this.getView().getId(), "meetingTitle").getValue();
                var sRequiredAttendees = Fragment.byId(this.getView().getId(), "requiredAttendees").getValue();
                var sOptionalAttendees = Fragment.byId(this.getView().getId(), "optionalAttendees").getValue();
                
                var oStartDate = Fragment.byId(this.getView().getId(), "startDate").getDateValue();
                var oStartTime = Fragment.byId(this.getView().getId(), "startTime").getDateValue();
                var oEndDate = Fragment.byId(this.getView().getId(), "endDate").getDateValue();
                var oEndTime = Fragment.byId(this.getView().getId(), "endTime").getDateValue();
                
                var bAllDay = Fragment.byId(this.getView().getId(), "allDayCheckbox").getSelected();
                var sChannel = Fragment.byId(this.getView().getId(), "channelInput").getValue();
                var sLocation = Fragment.byId(this.getView().getId(), "locationInput").getValue();
                var bOnlineMeeting = Fragment.byId(this.getView().getId(), "onlineMeetingCheckbox").getSelected();
                var sDetails = Fragment.byId(this.getView().getId(), "meetingDetails").getValue();
                var sAgenda = Fragment.byId(this.getView().getId(), "meetingAgenda").getValue();
                
                // Validate required fields
                if (!sTitle) {
                    MessageToast.show("Please enter a title for the meeting");
                    return;
                }
                
                // Combine date and time
                var oStart = new Date(oStartDate);
                if (!bAllDay && oStartTime) {
                    oStart.setHours(oStartTime.getHours(), oStartTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oStart.setHours(0, 0, 0, 0);
                }
                
                var oEnd = new Date(oEndDate || oStartDate);
                if (!bAllDay && oEndTime) {
                    oEnd.setHours(oEndTime.getHours(), oEndTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oEnd.setHours(23, 59, 59, 999);
                }
                
                // Validate that end time is after start time
                if (oEnd <= oStart) {
                    MessageToast.show("End time must be after start time");
                    return;
                }
                
                // Create the new appointment object
                var newAppointment = {
                    start: oStart,
                    end: oEnd,
                    title: sTitle,
                    info: "Channel: " + sChannel + (sLocation ? " | Location: " + sLocation : ""),
                    type: "Type01",
                    pic: "sap-icon://group",
                    attendees: sRequiredAttendees + (sOptionalAttendees ? "; " + sOptionalAttendees : ""),
                    details: sDetails,
                    agenda: sAgenda,
                    allDay: bAllDay,
                    onlineMeeting: bOnlineMeeting,
                    category: "Meeting",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: bOnlineMeeting ? "Virtual" : "In-person",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted"
                };
                
                // Get the model and add the new appointment to the first person's calendar
                var oModel = this.getView().getModel();
                var aPeople = oModel.getProperty("/people");
                
                if (aPeople && aPeople.length > 0) {
                    // Add to the first person's appointments
                    aPeople[0].appointments.push(newAppointment);
                    
                    // Update the model
                    oModel.setProperty("/people", aPeople);
                    
                    // Show success message
                    MessageToast.show("Channel meeting '" + sTitle + "' has been created");
                    
                    // Close the dialog
                    this._oChannelMeetingDialog.close();
                    
                    // Refresh the calendar to show the new appointment
                    this.byId("calendar").getBinding("rows").refresh(true);
                } else {
                    MessageToast.show("Error: Could not find calendar to add meeting");
                }
            } catch (error) {
                console.error("Error saving channel meeting:", error);
                MessageToast.show("Error creating meeting. Please try again.");
            }
        },
        // Save Virtual Appointment
        onSaveVirtualAppointment: function() {
            try {
                // Get values from the dialog
                var sTitle = Fragment.byId(this.getView().getId(), "virtualTitle").getValue();
                var sGuestName = Fragment.byId(this.getView().getId(), "guestName").getValue();
                var sGuestEmail = Fragment.byId(this.getView().getId(), "guestEmail").getValue();
                
                var oStartDate = Fragment.byId(this.getView().getId(), "virtualStartDate").getDateValue();
                var oStartTime = Fragment.byId(this.getView().getId(), "virtualStartTime").getDateValue();
                var oEndDate = Fragment.byId(this.getView().getId(), "virtualEndDate").getDateValue();
                var oEndTime = Fragment.byId(this.getView().getId(), "virtualEndTime").getDateValue();
                
                var bAllDay = Fragment.byId(this.getView().getId(), "virtualAllDay").getSelected();
                var sInternalAttendees = Fragment.byId(this.getView().getId(), "internalAttendees").getValue();
                var sLocation = Fragment.byId(this.getView().getId(), "virtualLocation").getValue();
                var sPresenterOptions = Fragment.byId(this.getView().getId(), "presenterOptions").getSelectedKey();
                var bRecordAutomatically = Fragment.byId(this.getView().getId(), "recordAutomatically").getSelected();
                var sMeetingChat = Fragment.byId(this.getView().getId(), "meetingChat").getSelectedKey();
                var sMessage = Fragment.byId(this.getView().getId(), "virtualMessage").getValue();
                
                // Validate required fields
                if (!sTitle) {
                    MessageToast.show("Please enter a title for the appointment");
                    return;
                }
                
                if (!sGuestName || !sGuestEmail) {
                    MessageToast.show("Please enter guest name and email");
                    return;
                }
                
                // Combine date and time
                var oStart = new Date(oStartDate);
                if (!bAllDay && oStartTime) {
                    oStart.setHours(oStartTime.getHours(), oStartTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oStart.setHours(0, 0, 0, 0);
                }
                
                var oEnd = new Date(oEndDate || oStartDate);
                if (!bAllDay && oEndTime) {
                    oEnd.setHours(oEndTime.getHours(), oEndTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oEnd.setHours(23, 59, 59, 999);
                }
                
                // Validate that end time is after start time
                if (oEnd <= oStart) {
                    MessageToast.show("End time must be after start time");
                    return;
                }
                
                // Create the new appointment object
                var newAppointment = {
                    start: oStart,
                    end: oEnd,
                    title: sTitle,
                    info: "Virtual Appointment with " + sGuestName + " (" + sGuestEmail + ")",
                    type: "Type01",
                    pic: "sap-icon://video",
                    attendees: sInternalAttendees,
                    location: sLocation,
                    presenterOptions: sPresenterOptions,
                    recordAutomatically: bRecordAutomatically,
                    meetingChat: sMeetingChat,
                    message: sMessage,
                    allDay: bAllDay,
                    isVirtual: true,
                    category: "Appointment",
                    showAs: "Busy",
                    recurrence: "Non-recurring",
                    inPerson: "Virtual",
                    organizerStatus: "sent",
                    attendeeStatus: "accepted"
                };
                
                // Get the model and add the new appointment to the first person's calendar
                var oModel = this.getView().getModel();
                var aPeople = oModel.getProperty("/people");
                
                if (aPeople && aPeople.length > 0) {
                    // Add to the first person's appointments
                    aPeople[0].appointments.push(newAppointment);
                    
                    // Update the model
                    oModel.setProperty("/people", aPeople);
                    
                    // Show success message
                    MessageToast.show("Virtual appointment '" + sTitle + "' has been created");
                    
                    // Close the dialog
                    this._oVirtualAppointmentDialog.close();
                    
                    // Refresh the calendar to show the new appointment
                    this.byId("calendar").getBinding("rows").refresh(true);
                } else {
                    MessageToast.show("Error: Could not find calendar to add appointment");
                }
            } catch (error) {
                console.error("Error saving virtual appointment:", error);
                MessageToast.show("Error creating appointment. Please try again.");
            }
        },
        // Cancel Channel Meeting
        onCancelChannelMeeting: function() {
            // Close the dialog without saving
            if (this._oChannelMeetingDialog) {
                this._oChannelMeetingDialog.close();
            }
            MessageToast.show("Channel meeting creation cancelled");
        },
        // Cancel Virtual Appointment
        onCancelVirtualAppointment: function() {
            // Close the dialog without saving
            if (this._oVirtualAppointmentDialog) {
                this._oVirtualAppointmentDialog.close();
            }
            MessageToast.show("Virtual appointment creation cancelled");
        },
        // Add additional guest
        onAddGuest: function() {
            MessageToast.show("Additional guest feature coming soon");
        },
        
        onAppointmentSelect: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment");
            var oBindingContext = oAppointment.getBindingContext();
            
            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("filterPopover").close();
            this.byId("newEventPopover").close();
            
            // Get appointment data
            var oAppointmentData = oBindingContext.getObject();
            
            // Update selected event in model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", {
                title: oAppointmentData.title,
                start: oAppointmentData.start,
                end: oAppointmentData.end,
                info: oAppointmentData.info || "",
                type: oAppointmentData.type || "Type01",
                icon: oAppointmentData.icon || ""
            });
            
            // Open event details popover
            this.byId("eventDetailsPopover").openBy(oEvent.getParameter("domRef"));
        },
        
        onIntervalSelect: function (oEvent) {
            var oInterval = oEvent.getParameter("interval");
            var oStartDate = oInterval.getStartDate(); // Fixed: get start date from interval
            var oEndDate = oInterval.getEndDate();
            
            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("filterPopover").close();
            this.byId("newEventPopover").close();
            
            // Update selected event in model with new interval
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", {
                title: "New Event",
                start: oStartDate,
                end: oEndDate,
                info: "",
                type: "Type01",
                icon: ""
            });
            
            // Open event details popover
            this.byId("eventDetailsPopover").openBy(oEvent.getParameter("domRef"));
        },
        
        _openEventDetailsPopoverForNew: function () {
            // Create a new event for the current day
            var oToday = UI5Date.getInstance();
            oToday.setHours(9, 0, 0, 0); // Default to 9 AM
            
            var oEnd = UI5Date.getInstance(oToday);
            oEnd.setHours(10, 0, 0, 0); // Default to 10 AM
            
            // Update selected event in model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", {
                title: "New Event",
                start: oToday,
                end: oEnd,
                info: "",
                type: "Type01",
                icon: ""
            });
            
            // Open event details popover
            this.byId("eventDetailsPopover").openBy(this.byId("calendar"));
        },
        
        // Fragment handling functions
        _openRemarksDialog: function() {
            if (!this._oRemarksDialog) {
                this._oRemarksDialog = sap.ui.xmlfragment(
                    "com.capexrevex.capexravex.view.RemarksDialog",
                    this
                );
                this.getView().addDependent(this._oRemarksDialog);
            }
            
            // Set default values for new event (current date from 4:00 PM to 4:30 PM)
            var oEventDate = UI5Date.getInstance();
            oEventDate.setHours(16, 0, 0, 0); // 4:00 PM
            
            var oEnd = UI5Date.getInstance(oEventDate);
            oEnd.setHours(16, 30, 0, 0); // 4:30 PM
            
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", {
                title: "",
                start: oEventDate,
                end: oEnd,
                info: "",
                type: "Type01",
                icon: ""
            });
            
            this._oRemarksDialog.open();
        },
        
        onSaveEventFromDialog: function() {
            var oViewModel = this.getView().getModel("view");
            var oSelectedEvent = oViewModel.getProperty("/selectedEvent");
            
            // Get values from the dialog
            var sTitle = sap.ui.getCore().byId("eventTitle").getValue();
            var sAttendees = sap.ui.getCore().byId("eventAttendees").getValue();
            var bMakeRecurring = sap.ui.getCore().byId("makeRecurring").getSelected();
            var bAllDay = sap.ui.getCore().byId("allDay").getSelected();
            var bInPerson = sap.ui.getCore().byId("inPerson").getSelected();
            var sResponseOption = sap.ui.getCore().byId("responseOptions").getSelectedKey();
            var sShowAs = sap.ui.getCore().byId("showAs").getSelectedKey();
            var sDescription = sap.ui.getCore().byId("eventDescription").getValue();
            
            // Get the date and time values
            var oDatePicker = sap.ui.getCore().byId("eventDate");
            var oStartTimePicker = sap.ui.getCore().byId("startTime");
            var oEndTimePicker = sap.ui.getCore().byId("endTime");
            
            var oDate = oDatePicker.getDateValue();
            var oStartTime = oStartTimePicker.getDateValue();
            var oEndTime = oEndTimePicker.getDateValue();
            
            // Combine date and start time
            var oStart = new Date(oDate);
            oStart.setHours(oStartTime.getHours(), oStartTime.getMinutes(), 0, 0);
            
            var oEnd = new Date(oDate);
            oEnd.setHours(oEndTime.getHours(), oEndTime.getMinutes(), 0, 0);
            
            // Validate that end time is after start time
            if (oEnd <= oStart) {
                return;
            }
            
            // Create the new appointment object
            var newAppointment = {
                start: oStart,
                end: oEnd,
                info: bInPerson ? "In-person event" : "Online event",
                type: "Type01",
                attendees: sAttendees,
                description: sDescription,
                recurring: bMakeRecurring,
                allDay: bAllDay,
                responseOption: sResponseOption,
                showAs: sShowAs,
                category: "Appointment",
                recurrence: bMakeRecurring ? "Recurring" : "Non-recurring",
                inPerson: bInPerson ? "In-person" : "Virtual",
                organizerStatus: "sent",
                attendeeStatus: "accepted"
            };
            
            // Get the model and add the new appointment to the first person's calendar
            var oModel = this.getView().getModel();
            var aPeople = oModel.getProperty("/people");
            
            if (aPeople && aPeople.length > 0) {
                // Add to the first person's appointments
                aPeople[0].appointments.push(newAppointment);
                
                // Update the model
                oModel.setProperty("/people", aPeople);
                
                // Close the dialog
                if (this._oRemarksDialog) {
                    this._oRemarksDialog.close();
                }
                
                // Refresh the calendar to show the new appointment
                this.byId("calendar").getBinding("rows").refresh(true);
            }
        },
        
        onCancelEventFromDialog: function() {
            // Close the dialog without saving
            if (this._oRemarksDialog) {
                this._oRemarksDialog.close();
            }
        },
        
        onSaveEvent: function () {
            var oViewModel = this.getView().getModel("view");
            var oSelectedEvent = oViewModel.getProperty("/selectedEvent");
            
            // Close the popover
            this.byId("eventDetailsPopover").close();
            
            // Refresh the calendar to show the new/updated event
            this.byId("calendar").getBinding("rows").refresh();
        },
        
        onDiscardEvent: function () {
            // Close the popover without saving
            this.byId("eventDetailsPopover").close();
            MessageToast.show("Changes discarded");
        },
        
        onExit: function() {
            // Clean up all fragments when the controller is destroyed
            if (this._oRemarksDialog) {
                this._oRemarksDialog.destroy();
                this._oRemarksDialog = null;
            }
            if (this._oChannelMeetingDialog) {
                this._oChannelMeetingDialog.destroy();
                this._oChannelMeetingDialog = null;
            }
            if (this._oVirtualAppointmentDialog) {
                this._oVirtualAppointmentDialog.destroy();
                this._oVirtualAppointmentDialog = null;
            }
        }
    });
});


UPDATED CODE 2

sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/ui/core/date/UI5Date",
    "sap/ui/core/Fragment"
], function (Controller, JSONModel, MessageToast, UI5Date, Fragment) {
    "use strict";
    return Controller.extend("com.capexrevex.capexravex.controller.capexrevex", {
        onInit: function () {
            // Get today's date
            var today = UI5Date.getInstance();
            
            // Set the calendar to start from today
            var startDate = UI5Date.getInstance(
                today.getFullYear(), 
                today.getMonth(), 
                today.getDate(), 
                8, 0 // Start at 8 AM
            );
            
            // Create appointments starting from today
            var appointments = [];
            
            // Today's appointments
            appointments.push({
                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 9, 0),
                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 10, 0),
                title: "Team sync",
                info: "Canteen",
                type: "Type07",
                pic: "sap-icon://family-care"
            });
            
            appointments.push({
                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 11, 0),
                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 12, 0),
                title: "Client Meeting",
                info: "Conference Room",
                type: "Type01"
            });
            
            // Tomorrow's appointments
            var tomorrow = UI5Date.getInstance(today);
            tomorrow.setDate(tomorrow.getDate() + 1);
            
            appointments.push({
                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 10, 0),
                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 11, 30),
                title: "Project Review",
                info: "In Progress",
                type: "Type01",
                pic: "sap-icon://business-objects-experience"
            });
            
            appointments.push({
                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 14, 0),
                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 15, 0),
                title: "Training Session",
                info: "Online",
                type: "Type03",
                pic: "sap-icon://learning-assistant"
            });
            
            // Day after tomorrow
            var dayAfter = UI5Date.getInstance(tomorrow);
            dayAfter.setDate(dayAfter.getDate() + 1);
            
            appointments.push({
                start: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 9, 0),
                end: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 10, 0),
                title: "Team Standup",
                info: "Daily meeting",
                type: "Type07",
                pic: "sap-icon://group"
            });
            
            appointments.push({
                start: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 13, 0),
                end: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 14, 30),
                title: "Lunch with Client",
                info: "Restaurant",
                type: "Type02",
                pic: "sap-icon://food"
            });
            
            // Fourth day
            var fourthDay = UI5Date.getInstance(dayAfter);
            fourthDay.setDate(fourthDay.getDate() + 1);
            
            appointments.push({
                start: UI5Date.getInstance(fourthDay.getFullYear(), fourthDay.getMonth(), fourthDay.getDate(), 11, 0),
                end: UI5Date.getInstance(fourthDay.getFullYear(), fourthDay.getMonth(), fourthDay.getDate(), 12, 0),
                title: "Product Demo",
                info: "Showcase new features",
                type: "Type04",
                pic: "sap-icon://presentation"
            });
            
            // Fifth day
            var fifthDay = UI5Date.getInstance(fourthDay);
            fifthDay.setDate(fifthDay.getDate() + 1);
            
            appointments.push({
                start: UI5Date.getInstance(fifthDay.getFullYear(), fifthDay.getMonth(), fifthDay.getDate(), 10, 0),
                end: UI5Date.getInstance(fifthDay.getFullYear(), fifthDay.getMonth(), fifthDay.getDate(), 11, 30),
                title: "Planning Session",
                info: "Quarterly planning",
                type: "Type05",
                pic: "sap-icon://calendar"
            });
            
            // Initialize the view model with data
            var oViewModel = new JSONModel({
                startDate: startDate,
                people: [
                    {
                        name: "John Doe",
                        role: "Developer",
                        appointments: appointments
                    }
                ],
                selectedEvent: {
                    title: "",
                    start: UI5Date.getInstance(),
                    end: UI5Date.getInstance(),
                    info: "",
                    type: "Type01"
                }
            });
            
            // Create additional model with extended data using UI5Date
            var oModel = new JSONModel();
            oModel.setData({
                startDate: startDate,
                people: [
                    {
                        pic: "sap-icon://hr-approval/",
                        name: "John Miller",
                        role: "team member",
                        appointments: [
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 8, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 9, 0),
                                title: "Team sync",
                                info: "Canteen",
                                type: "Type07",
                                pic: "sap-icon://family-care"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 9, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 11, 0),
                                title: "Morning Sync",
                                info: "I call you",
                                type: "Type01",
                                pic: "sap-icon://call"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 10, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 12, 0),
                                title: "Sync Bill",
                                info: "Online",
                                type: "Type03"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 10, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 13, 0),
                                title: "Check Flights",
                                info: "no room",
                                type: "Type09",
                                pic: "sap-icon://flight"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 13, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 14, 0),
                                title: "Lunch",
                                info: "canteen",
                                type: "Type05",
                                pic: "sap-icon://private"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 18, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 20, 0),
                                title: "Discussion of the plan",
                                info: "Online meeting",
                                type: "Type04"
                            }
                        ]
                    },
                    {
                        pic: "sap-icon://hr-approval",
                        name: "Donna Moore",
                        role: "team member",
                        appointments: [
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 8, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 9, 26),
                                title: "Team sync",
                                info: "Canteen",
                                type: "Type07",
                                pic: "sap-icon://family-care"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 10, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 12, 0),
                                title: "Sync John",
                                info: "Online",
                                type: "Type03"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 11, 0),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 12, 0),
                                title: "Prep for planning",
                                info: "room 5",
                                type: "Type01",
                                pic: "sap-icon://family-care"
                            }
                        ]
                    },
                    {
                        pic: "sap-icon://hr-approval",
                        name: "Alex Johnson",
                        role: "team member",
                        appointments: [
                            {
                                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 9, 0),
                                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 10, 0),
                                title: "Team sync",
                                info: "Canteen",
                                type: "Type07",
                                pic: "sap-icon://family-care"
                            },
                            {
                                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 10, 0),
                                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 12, 0),
                                title: "Project Planning",
                                info: "Conference Room",
                                type: "Type01"
                            },
                            {
                                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 14, 0),
                                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 15, 0),
                                title: "Client Call",
                                info: "Online",
                                type: "Type03"
                            }
                        ]
                    },
                    {
                        pic: "sap-icon://hr-approval",
                        name: "Sarah Williams",
                        role: "team member",
                        appointments: [
                            {
                                start: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 9, 0),
                                end: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 10, 0),
                                title: "Team sync",
                                info: "Canteen",
                                type: "Type07",
                                pic: "sap-icon://family-care"
                            },
                            {
                                start: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 11, 0),
                                end: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 12, 30),
                                title: "Design Review",
                                info: "Conference Room",
                                type: "Type01"
                            }
                        ]
                    }
                ]
            });
            
            // Set both models to the view
            this.getView().setModel(oViewModel, "view");
            this.getView().setModel(oModel);
        },
        
        // Role-based functionality
        roles: {
            donna: "Donna Moore",
            manager: "manager",
            admin: "admin"
        },
        
        handleRoleChange: function () {
            this.getView().getModel().refresh(true);
        },
        
        getUserRole: function() {
            return this.roles[this.byId("userRole").getSelectedKey()];
        },
        
        canModifyAppointments: function(sRole) {
            var sUserRole = this.getUserRole();
            if (sUserRole === this.roles.manager || sUserRole === this.roles.admin || sUserRole === sRole) {
                return true;
            }
        },
        
        // Drag and Drop functionality
        handleAppointmentDragEnter: function(oEvent) {
            if (this.isAppointmentOverlap(oEvent, oEvent.getParameter("calendarRow"))) {
                oEvent.preventDefault();
            }
        },
        
        handleAppointmentDrop: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                oCalendarRow = oEvent.getParameter("calendarRow"),
                bCopy = oEvent.getParameter("copy"),
                sTitle = oAppointment.getTitle(),
                oModel = this.getView().getModel(),
                oAppBindingContext = oAppointment.getBindingContext(),
                oRowBindingContext = oCalendarRow.getBindingContext(),
                handleAppointmentDropBetweenRows = function () {
                    var aPath = oAppBindingContext.getPath().split("/"),
                        iIndex = aPath.pop(),
                        sRowAppointmentsPath = aPath.join("/");
                    oRowBindingContext.getObject().appointments.push(
                        oModel.getProperty(oAppBindingContext.getPath())
                    );
                    oModel.getProperty(sRowAppointmentsPath).splice(iIndex, 1);
                };
            if (bCopy) { // "copy" appointment
                var oProps = Object.assign({}, oModel.getProperty(oAppointment.getBindingContext().getPath()));
                oProps.start = oStartDate;
                oProps.end = oEndDate;
                oRowBindingContext.getObject().appointments.push(oProps);
            } else { // "move" appointment
                oModel.setProperty("start", oStartDate, oAppBindingContext);
                oModel.setProperty("end", oEndDate, oAppBindingContext);
                if (oAppointment.getParent() !== oCalendarRow) {
                    handleAppointmentDropBetweenRows();
                }
            }
            oModel.refresh(true);
        },
        
        handleAppointmentResize: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate");
            if (!this.isAppointmentOverlap(oEvent, oAppointment.getParent())) {
                oAppointment
                    .setStartDate(oStartDate)
                    .setEndDate(oEndDate);
            } else {
                MessageToast.show("As a manager you can not resize events if they overlap with another events");
            }
        },
        
        handleAppointmentCreate: function (oEvent) {
            var oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                oPlanningCalendarRow = oEvent.getParameter("calendarRow"),
                oModel = this.getView().getModel(),
                sPath = oPlanningCalendarRow.getBindingContext().getPath();
            oModel.getProperty(sPath).appointments.push({
                title: "New Appointment",
                start: oStartDate,
                end: oEndDate
            });
            MessageToast.show("New Appointment is created at \n" + oStartDate + "\n and end at \n" + oEndDate + ".");
            oModel.refresh(true);
        },
        
        isAppointmentOverlap: function (oEvent, oCalendarRow) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                bAppointmentOverlapped;
            if (this.getUserRole() === this.roles.manager) {
                bAppointmentOverlapped = oCalendarRow.getAppointments().some(function (oCurrentAppointment) {
                    if (oCurrentAppointment === oAppointment) {
                        return;
                    }
                    var oAppStartTime = oCurrentAppointment.getStartDate().getTime(),
                        oAppEndTime = oCurrentAppointment.getEndDate().getTime();
                    if (oAppStartTime <= oStartDate.getTime() && oStartDate.getTime() < oAppEndTime) {
                        return true;
                    }
                    if (oAppStartTime < oEndDate.getTime() && oEndDate.getTime() <= oAppEndTime) {
                        return true;
                    }
                    if (oStartDate.getTime() <= oAppStartTime && oAppStartTime < oEndDate.getTime()) {
                        return true;
                    }
                });
            }
            return bAppointmentOverlapped;
        },
        
        // Toolbar and UI functionality
        onTodayPress: function () {
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/startDate", UI5Date.getInstance());
            MessageToast.show("Navigated to today");
        },
        
        onViewSelectPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oViewPopover = this.byId("viewPopover");
            
            // Close other popovers
            this.byId("filterPopover").close();
            this.byId("newEventPopover").close();
            this.byId("eventDetailsPopover").close();
            
            // Toggle view popover
            if (!oViewPopover.isOpen()) {
                oViewPopover.openBy(oButton);
            } else {
                oViewPopover.close();
            }
        },
        
        onFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oFilterPopover = this.byId("filterPopover");
            
            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("newEventPopover").close();
            this.byId("eventDetailsPopover").close();
            
            // Toggle filter popover
            if (!oFilterPopover.isOpen()) {
                oFilterPopover.openBy(oButton);
            } else {
                oFilterPopover.close();
            }
        },
        
        onMeetNowPress: function () {
            MessageToast.show("Starting meeting now...");
        },
        
        onNewEventPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oNewEventPopover = this.byId("newEventPopover");
            
            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("filterPopover").close();
            this.byId("eventDetailsPopover").close();
            
            // Toggle new event popover
            if (!oNewEventPopover.isOpen()) {
                oNewEventPopover.openBy(oButton);
            } else {
                oNewEventPopover.close();
            }
        },
        
        onNotificationPress: function () {
            MessageToast.show("No new notifications");
        },
        
        onViewSelected: function (oEvent) {
            var sSelectedView = oEvent.getParameter("listItem").getTitle();
            var oButton = this.byId("viewSelectButton");
            var oCalendar = this.byId("calendar");
            
            oButton.setText(sSelectedView);
            this.byId("viewPopover").close();
            
            // Update calendar view
            oCalendar.setViewKey(sSelectedView.replace(" ", ""));
            MessageToast.show("View changed to: " + sSelectedView);
        },
        
        onSavedViewsPress: function () {
            // MessageToast.show("Saved views feature coming soon");
        },
        
        onClearFilters: function () {
            // Clear all filter checkboxes
            var aCheckBoxes = this.byId("filterPopover").getItemsByType("Active");
            aCheckBoxes.forEach(function(oCheckBox) {
                if (oCheckBox.isA("sap.m.CheckBox")) {
                    oCheckBox.setSelected(false);
                }
            });
            // MessageToast.show("All filters cleared");
        },
        
        onNewEventTypeSelected: function (oEvent) {
            var sEventType = oEvent.getSource().getTitle();
            this.byId("newEventPopover").close();
            
            if (sEventType === "Channel meeting") {
                this._openChannelMeetingDialog();
            } else if (sEventType === "Event") {
                this._openRemarksDialog();
            } else if (sEventType === "Virtual appointment") {
                this._openVirtualAppointmentDialog();
            } else {
                MessageToast.show("Creating new: " + sEventType);
            }
        },
        
        // Open the Channel Meeting Dialog
        _openChannelMeetingDialog: function() {
            var that = this;
            if (!this._oChannelMeetingDialog) {
                Fragment.load({
                    id: this.getView().getId(),
                    name: "com.capexrevex.capexravex.view.ChannelMeetingDialog",
                    controller: this
                }).then(function(oDialog) {
                    that._oChannelMeetingDialog = oDialog;
                    that.getView().addDependent(that._oChannelMeetingDialog);
                    
                    // Set default values for new channel meeting
                    that._setDefaultChannelMeetingValues();
                    
                    that._oChannelMeetingDialog.open();
                }).catch(function(error) {
                    console.error("Error loading channel meeting dialog:", error);
                    MessageToast.show("Error loading meeting dialog");
                });
            } else {
                // Set default values for the meeting
                this._setDefaultChannelMeetingValues();
                this._oChannelMeetingDialog.open();
            }
        },

        // Open the Virtual Appointment Dialog
        _openVirtualAppointmentDialog: function() {
            var that = this;
            if (!this._oVirtualAppointmentDialog) {
                Fragment.load({
                    id: this.getView().getId(),
                    name: "com.capexrevex.capexravex.view.VirtualAppointmentDialog",
                    controller: this
                }).then(function(oDialog) {
                    that._oVirtualAppointmentDialog = oDialog;
                    that.getView().addDependent(that._oVirtualAppointmentDialog);
                    
                    // Set default values for virtual appointment
                    that._setDefaultVirtualAppointmentValues();
                    
                    that._oVirtualAppointmentDialog.open();
                }).catch(function(error) {
                    console.error("Error loading virtual appointment dialog:", error);
                    MessageToast.show("Error loading virtual appointment dialog");
                });
            } else {
                // Set default values for the appointment
                this._setDefaultVirtualAppointmentValues();
                this._oVirtualAppointmentDialog.open();
            }
        },

        _setDefaultChannelMeetingValues: function() {
            // Set default date and time (current date, 3:00 PM to 3:30 PM)
            var oNow = UI5Date.getInstance();
            var oStart = UI5Date.getInstance(oNow);
            oStart.setHours(15, 0, 0, 0); // 3:00 PM
            
            var oEnd = UI5Date.getInstance(oStart);
            oEnd.setHours(15, 30, 0, 0); // 3:30 PM
            
            // Set values in the dialog if it exists
            if (this._oChannelMeetingDialog) {
                var oStartDate = Fragment.byId(this.getView().getId(), "startDate");
                var oStartTime = Fragment.byId(this.getView().getId(), "startTime");
                var oEndDate = Fragment.byId(this.getView().getId(), "endDate");
                var oEndTime = Fragment.byId(this.getView().getId(), "endTime");
                
                if (oStartDate) oStartDate.setDateValue(oStart);
                if (oStartTime) oStartTime.setDateValue(oStart);
                if (oEndDate) oEndDate.setDateValue(oEnd);
                if (oEndTime) oEndTime.setDateValue(oEnd);
            }
        },

        _setDefaultVirtualAppointmentValues: function() {
            // Set default date and time (current date, 4:30 PM to 5:00 PM, adjusted from current time 04:23 PM IST)
            var oNow = UI5Date.getInstance();
            var oStart = UI5Date.getInstance(oNow);
            oStart.setHours(16, 30, 0, 0); // 4:30 PM (next half-hour slot)
            
            var oEnd = UI5Date.getInstance(oStart);
            oEnd.setHours(17, 0, 0, 0); // 5:00 PM
            
            // Set values in the dialog if it exists
            if (this._oVirtualAppointmentDialog) {
                var oStartDate = Fragment.byId(this.getView().getId(), "virtualStartDate");
                var oStartTime = Fragment.byId(this.getView().getId(), "virtualStartTime");
                var oEndDate = Fragment.byId(this.getView().getId(), "virtualEndDate");
                var oEndTime = Fragment.byId(this.getView().getId(), "virtualEndTime");
                
                if (oStartDate) oStartDate.setDateValue(oStart);
                if (oStartTime) oStartTime.setDateValue(oStart);
                if (oEndDate) oEndDate.setDateValue(oEnd);
                if (oEndTime) oEndTime.setDateValue(oEnd);
            }
        },

        // Save Channel Meeting
        onSaveChannelMeeting: function() {
            try {
                // Get values from the dialog
                var sTitle = Fragment.byId(this.getView().getId(), "meetingTitle").getValue();
                var sRequiredAttendees = Fragment.byId(this.getView().getId(), "requiredAttendees").getValue();
                var sOptionalAttendees = Fragment.byId(this.getView().getId(), "optionalAttendees").getValue();
                
                var oStartDate = Fragment.byId(this.getView().getId(), "startDate").getDateValue();
                var oStartTime = Fragment.byId(this.getView().getId(), "startTime").getDateValue();
                var oEndDate = Fragment.byId(this.getView().getId(), "endDate").getDateValue();
                var oEndTime = Fragment.byId(this.getView().getId(), "endTime").getDateValue();
                
                var bAllDay = Fragment.byId(this.getView().getId(), "allDayCheckbox").getSelected();
                var sChannel = Fragment.byId(this.getView().getId(), "channelInput").getValue();
                var sLocation = Fragment.byId(this.getView().getId(), "locationInput").getValue();
                var bOnlineMeeting = Fragment.byId(this.getView().getId(), "onlineMeetingCheckbox").getSelected();
                var sDetails = Fragment.byId(this.getView().getId(), "meetingDetails").getValue();
                var sAgenda = Fragment.byId(this.getView().getId(), "meetingAgenda").getValue();
                
                // Validate required fields
                if (!sTitle) {
                    MessageToast.show("Please enter a title for the meeting");
                    return;
                }
                
                // Combine date and time
                var oStart = new Date(oStartDate);
                if (!bAllDay && oStartTime) {
                    oStart.setHours(oStartTime.getHours(), oStartTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oStart.setHours(0, 0, 0, 0);
                }
                
                var oEnd = new Date(oEndDate || oStartDate);
                if (!bAllDay && oEndTime) {
                    oEnd.setHours(oEndTime.getHours(), oEndTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oEnd.setHours(23, 59, 59, 999);
                }
                
                // Validate that end time is after start time
                if (oEnd <= oStart) {
                    MessageToast.show("End time must be after start time");
                    return;
                }
                
                // Create the new appointment object
                var newAppointment = {
                    start: oStart,
                    end: oEnd,
                    title: sTitle,
                    info: "Channel: " + sChannel + (sLocation ? " | Location: " + sLocation : ""),
                    type: "Type01",
                    pic: "sap-icon://group",
                    attendees: sRequiredAttendees + (sOptionalAttendees ? "; " + sOptionalAttendees : ""),
                    details: sDetails,
                    agenda: sAgenda,
                    allDay: bAllDay,
                    onlineMeeting: bOnlineMeeting
                };
                
                // Get the model and add the new appointment to the first person's calendar
                var oModel = this.getView().getModel();
                var aPeople = oModel.getProperty("/people");
                
                if (aPeople && aPeople.length > 0) {
                    // Add to the first person's appointments
                    aPeople[0].appointments.push(newAppointment);
                    
                    // Update the model
                    oModel.setProperty("/people", aPeople);
                    
                    // Show success message
                    MessageToast.show("Channel meeting '" + sTitle + "' has been created");
                    
                    // Close the dialog
                    this._oChannelMeetingDialog.close();
                    
                    // Refresh the calendar to show the new appointment
                    this.byId("calendar").getBinding("rows").refresh(true);
                } else {
                    MessageToast.show("Error: Could not find calendar to add meeting");
                }
            } catch (error) {
                console.error("Error saving channel meeting:", error);
                MessageToast.show("Error creating meeting. Please try again.");
            }
        },

        // Save Virtual Appointment
        onSaveVirtualAppointment: function() {
            try {
                // Get values from the dialog
                var sTitle = Fragment.byId(this.getView().getId(), "virtualTitle").getValue();
                var sGuestName = Fragment.byId(this.getView().getId(), "guestName").getValue();
                var sGuestEmail = Fragment.byId(this.getView().getId(), "guestEmail").getValue();
                
                var oStartDate = Fragment.byId(this.getView().getId(), "virtualStartDate").getDateValue();
                var oStartTime = Fragment.byId(this.getView().getId(), "virtualStartTime").getDateValue();
                var oEndDate = Fragment.byId(this.getView().getId(), "virtualEndDate").getDateValue();
                var oEndTime = Fragment.byId(this.getView().getId(), "virtualEndTime").getDateValue();
                
                var bAllDay = Fragment.byId(this.getView().getId(), "virtualAllDay").getSelected();
                var sInternalAttendees = Fragment.byId(this.getView().getId(), "internalAttendees").getValue();
                var sLocation = Fragment.byId(this.getView().getId(), "virtualLocation").getValue();
                var sPresenterOptions = Fragment.byId(this.getView().getId(), "presenterOptions").getSelectedKey();
                var bRecordAutomatically = Fragment.byId(this.getView().getId(), "recordAutomatically").getSelected();
                var sMeetingChat = Fragment.byId(this.getView().getId(), "meetingChat").getSelectedKey();
                var sMessage = Fragment.byId(this.getView().getId(), "virtualMessage").getValue();
                
                // Validate required fields
                if (!sTitle) {
                    MessageToast.show("Please enter a title for the appointment");
                    return;
                }
                
                if (!sGuestName || !sGuestEmail) {
                    MessageToast.show("Please enter guest name and email");
                    return;
                }
                
                // Combine date and time
                var oStart = new Date(oStartDate);
                if (!bAllDay && oStartTime) {
                    oStart.setHours(oStartTime.getHours(), oStartTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oStart.setHours(0, 0, 0, 0);
                }
                
                var oEnd = new Date(oEndDate || oStartDate);
                if (!bAllDay && oEndTime) {
                    oEnd.setHours(oEndTime.getHours(), oEndTime.getMinutes(), 0, 0);
                } else if (bAllDay) {
                    oEnd.setHours(23, 59, 59, 999);
                }
                
                // Validate that end time is after start time
                if (oEnd <= oStart) {
                    MessageToast.show("End time must be after start time");
                    return;
                }
                
                // Create the new appointment object
                var newAppointment = {
                    start: oStart,
                    end: oEnd,
                    title: sTitle,
                    info: "Virtual Appointment with " + sGuestName + " (" + sGuestEmail + ")",
                    type: "Type01",
                    pic: "sap-icon://video",
                    attendees: sInternalAttendees,
                    location: sLocation,
                    presenterOptions: sPresenterOptions,
                    recordAutomatically: bRecordAutomatically,
                    meetingChat: sMeetingChat,
                    message: sMessage,
                    allDay: bAllDay,
                    isVirtual: true
                };
                
                // Get the model and add the new appointment to the first person's calendar
                var oModel = this.getView().getModel();
                var aPeople = oModel.getProperty("/people");
                
                if (aPeople && aPeople.length > 0) {
                    // Add to the first person's appointments
                    aPeople[0].appointments.push(newAppointment);
                    
                    // Update the model
                    oModel.setProperty("/people", aPeople);
                    
                    // Show success message
                    MessageToast.show("Virtual appointment '" + sTitle + "' has been created");
                    
                    // Close the dialog
                    this._oVirtualAppointmentDialog.close();
                    
                    // Refresh the calendar to show the new appointment
                    this.byId("calendar").getBinding("rows").refresh(true);
                } else {
                    MessageToast.show("Error: Could not find calendar to add appointment");
                }
            } catch (error) {
                console.error("Error saving virtual appointment:", error);
                MessageToast.show("Error creating appointment. Please try again.");
            }
        },

        // Cancel Channel Meeting
        onCancelChannelMeeting: function() {
            // Close the dialog without saving
            if (this._oChannelMeetingDialog) {
                this._oChannelMeetingDialog.close();
            }
            MessageToast.show("Channel meeting creation cancelled");
        },

        // Cancel Virtual Appointment
        onCancelVirtualAppointment: function() {
            // Close the dialog without saving
            if (this._oVirtualAppointmentDialog) {
                this._oVirtualAppointmentDialog.close();
            }
            MessageToast.show("Virtual appointment creation cancelled");
        },

        // Add additional guest
        onAddGuest: function() {
            MessageToast.show("Additional guest feature coming soon");
        },
        
        onAppointmentSelect: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment");
            var oBindingContext = oAppointment.getBindingContext();
            
            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("filterPopover").close();
            this.byId("newEventPopover").close();
            
            // Get appointment data
            var oAppointmentData = oBindingContext.getObject();
            
            // Update selected event in model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", {
                title: oAppointmentData.title,
                start: oAppointmentData.start,
                end: oAppointmentData.end,
                info: oAppointmentData.info || "",
                type: oAppointmentData.type || "Type01",
                icon: oAppointmentData.icon || ""
            });
            
            // Open event details popover
            this.byId("eventDetailsPopover").openBy(oEvent.getParameter("domRef"));
        },
        
        onIntervalSelect: function (oEvent) {
            var oInterval = oEvent.getParameter("interval");
            var oStartDate = oInterval.getStartDate();
            var oEndDate = oInterval.getEndDate();
            
            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("filterPopover").close();
            this.byId("newEventPopover").close();
            
            // Update selected event in model with new interval
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", {
                title: "New Event",
                start: oStartDate,
                end: oEndDate,
                info: "",
                type: "Type01",
                icon: ""
            });
            
            // Open event details popover
            this.byId("eventDetailsPopover").openBy(oEvent.getParameter("domRef"));
        },
        
        _openEventDetailsPopoverForNew: function () {
            // Create a new event for the current day
            var oToday = UI5Date.getInstance();
            oToday.setHours(9, 0, 0, 0); // Default to 9 AM
            
            var oEnd = UI5Date.getInstance(oToday);
            oEnd.setHours(10, 0, 0, 0); // Default to 10 AM
            
            // Update selected event in model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", {
                title: "New Event",
                start: oToday,
                end: oEnd,
                info: "",
                type: "Type01",
                icon: ""
            });
            
            // Open event details popover
            this.byId("eventDetailsPopover").openBy(this.byId("calendar"));
        },
        
        // Fragment handling functions
        _openRemarksDialog: function() {
            if (!this._oRemarksDialog) {
                this._oRemarksDialog = sap.ui.xmlfragment(
                    "com.capexrevex.capexravex.view.RemarksDialog",
                    this
                );
                this.getView().addDependent(this._oRemarksDialog);
            }
            
            // Set default values for new event (current date from 4:00 PM to 4:30 PM)
            var oEventDate = UI5Date.getInstance();
            oEventDate.setHours(16, 0, 0, 0); // 4:00 PM (aligned with current time 04:23 PM IST)
            
            var oEnd = UI5Date.getInstance(oEventDate);
            oEnd.setHours(16, 30, 0, 0); // 4:30 PM
            
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", {
                title: "",
                start: oEventDate,
                end: oEnd,
                info: "",
                type: "Type01",
                icon: ""
            });
            
            this._oRemarksDialog.open();
        },
        
        onSaveEventFromDialog: function() {
            var oViewModel = this.getView().getModel("view");
            var oSelectedEvent = oViewModel.getProperty("/selectedEvent");
            
            // Get values from the dialog
            var sTitle = sap.ui.getCore().byId("eventTitle")
            var sAttendees = sap.ui.getCore().byId("eventAttendees")
            var bMakeRecurring = sap.ui.getCore().byId("makeRecurring")
            var bAllDay = sap.ui.getCore().byId("allDay")
            var bInPerson = sap.ui.getCore().byId("inPerson")
            var sResponseOption = sap.ui.getCore().byId("responseOptions")
            var sShowAs = sap.ui.getCore().byId("showAs")
            var sDescription = sap.ui.getCore().byId("eventDescription")
            
            // Get the date and time values
            var oDatePicker = sap.ui.getCore().byId("eventDate");
            var oStartTimePicker = sap.ui.getCore().byId("startTime");
            var oEndTimePicker = sap.ui.getCore().byId("endTime");
            
            var oDate = oDatePicker.getDateValue();
            var oStartTime = oStartTimePicker.getDateValue();
            var oEndTime = oEndTimePicker.getDateValue();
            
            // Combine date and start time
            var oStart = new Date(oDate);
            oStart.setHours(oStartTime.getHours(), oStartTime.getMinutes(), 0, 0);
            
            var oEnd = new Date(oDate);
            oEnd.setHours(oEndTime.getHours(), oEndTime.getMinutes(), 0, 0);
            
            // Validate that end time is after start time
            if (oEnd <= oStart) {
                return;
            }
            
            // Create the new appointment object
            var newAppointment = {
                start: oStart,
                end: oEnd,
                info: bInPerson ? "In-person event" : "Online event",
                type: "Type01", // Default type
                attendees: sAttendees,
                description: sDescription,
                recurring: bMakeRecurring,
                allDay: bAllDay,
                responseOption: sResponseOption,
                showAs: sShowAs
            };
            
            // Get the model and add the new appointment to the first person's calendar
            var oModel = this.getView().getModel();
            var aPeople = oModel.getProperty("/people");
            
            if (aPeople && aPeople.length > 0) {
                // Add to the first person's appointments
                aPeople[0].appointments.push(newAppointment);
                
                // Update the model
                oModel.setProperty("/people", aPeople);
                
                // Close the dialog
                if (this._oRemarksDialog) {
                    this._oRemarksDialog.close();
                }
                
                // Refresh the calendar to show the new appointment
                this.byId("calendar").getBinding("rows").refresh(true);
            }
        },
        
        onCancelEventFromDialog: function() {
            // Close the dialog without saving
            if (this._oRemarksDialog) {
                this._oRemarksDialog.close();
            }
        },
        
        onSaveEvent: function () {
            var oViewModel = this.getView().getModel("view");
            var oSelectedEvent = oViewModel.getProperty("/selectedEvent");
            
            // Close the popover
            this.byId("eventDetailsPopover").close();
            
            // Refresh the calendar to show the new/updated event
            this.byId("calendar").getBinding("rows").refresh();
        },
        
        onDiscardEvent: function () {
            // Close the popover without saving
            this.byId("eventDetailsPopover").close();
            MessageToast.show("Changes discarded");
        },
        
        onExit: function() {
            // Clean up all fragments when the controller is destroyed
            if (this._oRemarksDialog) {
                this._oRemarksDialog.destroy();
                this._oRemarksDialog = null;
            }

            if (this._oChannelMeetingDialog) {
                this._oChannelMeetingDialog.destroy();
                this._oChannelMeetingDialog = null;
            }

            if (this._oVirtualAppointmentDialog) {
                this._oVirtualAppointmentDialog.destroy();
                this._oVirtualAppointmentDialog = null;
            }
        }
    });
});


UPDATED CODE 1

sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/ui/core/date/UI5Date"
], function (Controller, JSONModel, MessageToast, UI5Date) {
    "use strict";
    return Controller.extend("com.capexrevex.capexravex.controller.capexrevex", {
        onInit: function () {
            // Get today's date
            var today = UI5Date.getInstance();
            
            // Set the calendar to start from today
            var startDate = UI5Date.getInstance(
                today.getFullYear(), 
                today.getMonth(), 
                today.getDate(), 
                8, 0 // Start at 8 AM
            );
            
            // Create appointments starting from today
            var appointments = [];
            
            // Today's appointments
            appointments.push({
                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 9, 0),
                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 10, 0),
                title: "Team sync",
                info: "Canteen",
                type: "Type07",
                pic: "sap-icon://family-care"
            });
            
            appointments.push({
                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 11, 0),
                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 12, 0),
                title: "Client Meeting",
                info: "Conference Room",
                type: "Type01"
            });
            
            // Tomorrow's appointments
            var tomorrow = UI5Date.getInstance(today);
            tomorrow.setDate(tomorrow.getDate() + 1);
            
            appointments.push({
                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 10, 0),
                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 11, 30),
                title: "Project Review",
                info: "In Progress",
                type: "Type01",
                pic: "sap-icon://business-objects-experience"
            });
            
            appointments.push({
                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 14, 0),
                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 15, 0),
                title: "Training Session",
                info: "Online",
                type: "Type03",
                pic: "sap-icon://learning-assistant"
            });
            
            // Day after tomorrow
            var dayAfter = UI5Date.getInstance(tomorrow);
            dayAfter.setDate(dayAfter.getDate() + 1);
            
            appointments.push({
                start: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 9, 0),
                end: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 10, 0),
                title: "Team Standup",
                info: "Daily meeting",
                type: "Type07",
                pic: "sap-icon://group"
            });
            
            appointments.push({
                start: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 13, 0),
                end: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 14, 30),
                title: "Lunch with Client",
                info: "Restaurant",
                type: "Type02",
                pic: "sap-icon://food"
            });
            
            // Fourth day
            var fourthDay = UI5Date.getInstance(dayAfter);
            fourthDay.setDate(fourthDay.getDate() + 1);
            
            appointments.push({
                start: UI5Date.getInstance(fourthDay.getFullYear(), fourthDay.getMonth(), fourthDay.getDate(), 11, 0),
                end: UI5Date.getInstance(fourthDay.getFullYear(), fourthDay.getMonth(), fourthDay.getDate(), 12, 0),
                title: "Product Demo",
                info: "Showcase new features",
                type: "Type04",
                pic: "sap-icon://presentation"
            });
            
            // Fifth day
            var fifthDay = UI5Date.getInstance(fourthDay);
            fifthDay.setDate(fifthDay.getDate() + 1);
            
            appointments.push({
                start: UI5Date.getInstance(fifthDay.getFullYear(), fifthDay.getMonth(), fifthDay.getDate(), 10, 0),
                end: UI5Date.getInstance(fifthDay.getFullYear(), fifthDay.getMonth(), fifthDay.getDate(), 11, 30),
                title: "Planning Session",
                info: "Quarterly planning",
                type: "Type05",
                pic: "sap-icon://calendar"
            });
            
            // Initialize the view model with data
            var oViewModel = new JSONModel({
                startDate: startDate,
                people: [
                    {
                        name: "John Doe",
                        role: "Developer",
                        appointments: appointments
                    }
                ],
                selectedEvent: {
                    title: "",
                    start: UI5Date.getInstance(),
                    end: UI5Date.getInstance(),
                    info: "",
                    type: "Type01"
                },
                // Filter state
                filters: {
                    appointments: true,
                    meetings: true,
                    reservations: false,
                    categories: [],
                    showAs: [],
                    recurrence: ["single"],
                    inPerson: []
                }
            });
            
            // Create additional model with extended data using UI5Date
            var oModel = new JSONModel();
            oModel.setData({
                startDate: startDate,
                people: [
                    {
                        pic: "test-resources/sap/ui/documentation/sdk/images/John_Miller.png",
                        name: "John Miller",
                        role: "team member",
                        appointments: [
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), "08", "00"),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), "09", "00"),
                                title: "Team sync",
                                info: "Canteen",
                                type: "Type07",
                                pic: "sap-icon://family-care"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), "09", "0"),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), "11", "0"),
                                title: "Morning Sync",
                                info: "I call you",
                                type: "Type01",
                                pic: "sap-icon://call"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), "10", "00"),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), "12", "00"),
                                title: "Sync Bill",
                                info: "Online",
                                type: "Type03"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), "10", "00"),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), "13", "00"),
                                title: "Check Flights",
                                info: "no room",
                                type: "Type09",
                                pic: "sap-icon://flight"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), "13", "00"),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), "14", "00"),
                                title: "Lunch",
                                info: "canteen",
                                type: "Type05",
                                pic: "sap-icon://private"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), "18", "00"),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), "20", "00"),
                                title: "Discussion of the plan",
                                info: "Online meeting",
                                type: "Type04"
                            }
                        ]
                    },
                    {
                        pic: "test-resources/sap/ui/documentation/sdk/images/Donna_Moore.jpg",
                        name: "Donna Moore",
                        role: "team member",
                        appointments: [
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), "08", "00"),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), "09", "26"),
                                title: "Team sync",
                                info: "Canteen",
                                type: "Type07",
                                pic: "sap-icon://family-care"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), "10", "00"),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), "12", "00"),
                                title: "Sync John",
                                info: "Online",
                                type: "Type03"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), "11", "00"),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), "12", "00"),
                                title: "Prep for planning",
                                info: "room 5",
                                type: "Type01",
                                pic: "sap-icon://family-care"
                            }
                        ]
                    },
                    {
                        pic: "test-resources/sap/ui/documentation/sdk/images/John_Miller.png",
                        name: "Alex Johnson",
                        role: "team member",
                        appointments: [
                            {
                                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), "09", "00"),
                                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), "10", "00"),
                                title: "Team sync",
                                info: "Canteen",
                                type: "Type07",
                                pic: "sap-icon://family-care"
                            },
                            {
                                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), "10", "00"),
                                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), "12", "00"),
                                title: "Project Planning",
                                info: "Conference Room",
                                type: "Type01"
                            },
                            {
                                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), "14", "00"),
                                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), "15", "00"),
                                title: "Client Call",
                                info: "Online",
                                type: "Type03"
                            }
                        ]
                    },
                    {
                        pic: "test-resources/sap/ui/documentation/sdk/images/Donna_Moore.jpg",
                        name: "Sarah Williams",
                        role: "team member",
                        appointments: [
                            {
                                start: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), "09", "00"),
                                end: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), "10", "00"),
                                title: "Team sync",
                                info: "Canteen",
                                type: "Type07",
                                pic: "sap-icon://family-care"
                            },
                            {
                                start: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), "11", "00"),
                                end: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), "12", "30"),
                                title: "Design Review",
                                info: "Conference Room",
                                type: "Type01"
                            }
                        ]
                    }
                ]
            });
            
            // Set both models to the view
            this.getView().setModel(oViewModel, "view");
            this.getView().setModel(oModel);
        },
        
        // Role-based functionality
        roles: {
            donna: "Donna Moore",
            manager: "manager",
            admin: "admin"
        },
        
        handleRoleChange: function () {
            this.getView().getModel().refresh(true);
        },
        
        getUserRole: function() {
            return this.roles[this.byId("userRole").getSelectedKey()];
        },
        
        canModifyAppointments: function(sRole) {
            var sUserRole = this.getUserRole();
            if (sUserRole === this.roles.manager || sUserRole === this.roles.admin || sUserRole === sRole) {
                return true;
            }
        },
        
        // Drag and Drop functionality
        handleAppointmentDragEnter: function(oEvent) {
            if (this.isAppointmentOverlap(oEvent, oEvent.getParameter("calendarRow"))) {
                oEvent.preventDefault();
            }
        },
        
        handleAppointmentDrop: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                oCalendarRow = oEvent.getParameter("calendarRow"),
                bCopy = oEvent.getParameter("copy"),
                sTitle = oAppointment.getTitle(),
                oModel = this.getView().getModel(),
                oAppBindingContext = oAppointment.getBindingContext(),
                oRowBindingContext = oCalendarRow.getBindingContext(),
                handleAppointmentDropBetweenRows = function () {
                    var aPath = oAppBindingContext.getPath().split("/"),
                        iIndex = aPath.pop(),
                        sRowAppointmentsPath = aPath.join("/");
                    oRowBindingContext.getObject().appointments.push(
                        oModel.getProperty(oAppBindingContext.getPath())
                    );
                    oModel.getProperty(sRowAppointmentsPath).splice(iIndex, 1);
                };
            if (bCopy) { // "copy" appointment
                var oProps = Object.assign({}, oModel.getProperty(oAppointment.getBindingContext().getPath()));
                oProps.start = oStartDate;
                oProps.end = oEndDate;
                oRowBindingContext.getObject().appointments.push(oProps);
            } else { // "move" appointment
                oModel.setProperty("start", oStartDate, oAppBindingContext);
                oModel.setProperty("end", oEndDate, oAppBindingContext);
                if (oAppointment.getParent() !== oCalendarRow) {
                    handleAppointmentDropBetweenRows();
                }
            }
            oModel.refresh(true);
            MessageToast.show(oCalendarRow.getTitle() + "'s '" + "Appointment '" + sTitle + "' now starts at \n" + oStartDate + "\n and end at \n" + oEndDate + ".");
        },
        
        handleAppointmentResize: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate");
            if (!this.isAppointmentOverlap(oEvent, oAppointment.getParent())) {
                MessageToast.show("Appointment '" + oAppointment.getTitle() + "' now starts at \n" + oStartDate + "\n and end at \n" + oEndDate + ".");
                oAppointment
                    .setStartDate(oStartDate)
                    .setEndDate(oEndDate);
            } else {
                MessageToast.show("As a manager you can not resize events if they overlap with another events");
            }
        },
        
        handleAppointmentCreate: function (oEvent) {
            var oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                oPlanningCalendarRow = oEvent.getParameter("calendarRow"),
                oModel = this.getView().getModel(),
                sPath = oPlanningCalendarRow.getBindingContext().getPath();
            oModel.getProperty(sPath).appointments.push({
                title: "New Appointment",
                start: oStartDate,
                end: oEndDate
            });
            MessageToast.show("New Appointment is created at \n" + oStartDate + "\n and end at \n" + oEndDate + ".");
            oModel.refresh(true);
        },
        
        isAppointmentOverlap: function (oEvent, oCalendarRow) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                bAppointmentOverlapped;
            if (this.getUserRole() === this.roles.manager) {
                bAppointmentOverlapped = oCalendarRow.getAppointments().some(function (oCurrentAppointment) {
                    if (oCurrentAppointment === oAppointment) {
                        return;
                    }
                    var oAppStartTime = oCurrentAppointment.getStartDate().getTime(),
                        oAppEndTime = oCurrentAppointment.getEndDate().getTime();
                    if (oAppStartTime <= oStartDate.getTime() && oStartDate.getTime() < oAppEndTime) {
                        return true;
                    }
                    if (oAppStartTime < oEndDate.getTime() && oEndDate.getTime() <= oAppEndTime) {
                        return true;
                    }
                    if (oStartDate.getTime() <= oAppStartTime && oAppStartTime < oEndDate.getTime()) {
                        return true;
                    }
                });
            }
            return bAppointmentOverlapped;
        },
        
        // Toolbar and UI functionality
        onTodayPress: function () {
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/startDate", UI5Date.getInstance());
            MessageToast.show("Navigated to today");
        },
        
        onViewSelectPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oViewPopover = this.byId("viewPopover");
            
            // Close other popovers
            this.byId("filterPopover").close();
            this.byId("newEventPopover").close();
            this.byId("eventDetailsPopover").close();
            
            // Toggle view popover
            if (!oViewPopover.isOpen()) {
                oViewPopover.openBy(oButton);
            } else {
                oViewPopover.close();
            }
        },
        
        onFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oFilterPopover = this.byId("filterPopover");
            
            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("newEventPopover").close();
            this.byId("eventDetailsPopover").close();
            
            // Toggle filter popover
            if (!oFilterPopover.isOpen()) {
                oFilterPopover.openBy(oButton);
            } else {
                oFilterPopover.close();
            }
        },
        
        onMeetNowPress: function () {
            MessageToast.show("Starting meeting now...");
        },
        
        onNewEventPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oNewEventPopover = this.byId("newEventPopover");
            
            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("filterPopover").close();
            this.byId("eventDetailsPopover").close();
            
            // Toggle new event popover
            if (!oNewEventPopover.isOpen()) {
                oNewEventPopover.openBy(oButton);
            } else {
                oNewEventPopover.close();
            }
        },
        
        onNotificationPress: function () {
            MessageToast.show("No new notifications");
        },
        
        onViewSelected: function (oEvent) {
            var sSelectedView = oEvent.getParameter("listItem").getTitle();
            var oButton = this.byId("viewSelectButton");
            var oCalendar = this.byId("calendar");
            
            oButton.setText(sSelectedView);
            this.byId("viewPopover").close();
            
            // Update calendar view
            oCalendar.setViewKey(sSelectedView.replace(" ", ""));
            MessageToast.show("View changed to: " + sSelectedView);
        },
        
        onSavedViewsPress: function () {
            MessageToast.show("Saved views feature coming soon");
        },
        
        // Filter functionality
        onClearFilters: function () {
            // Reset all filter checkboxes
            this.byId("_IDGenCheckBox").setSelected(true);
            this.byId("_IDGenCheckBox1").setSelected(true);
            this.byId("_IDGenCheckBox2").setSelected(false);
            
            // Reset filter model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/filters", {
                appointments: true,
                meetings: true,
                reservations: false,
                categories: [],
                showAs: [],
                recurrence: ["single"],
                inPerson: []
            });
            
            // Apply filters
            this._applyFilters();
            MessageToast.show("All filters cleared");
        },
        
        onFilterSelect: function (oEvent) {
            var oSource = oEvent.getSource();
            var sId = oSource.getId();
            var bSelected = oEvent.getParameter("selected");
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            
            // Update filter model based on selection
            if (sId.includes("_IDGenCheckBox")) { // Appointments checkbox
                oFilters.appointments = bSelected;
            } else if (sId.includes("_IDGenCheckBox1")) { // Meetings checkbox
                oFilters.meetings = bSelected;
            } else if (sId.includes("_IDGenCheckBox2")) { // Reservations checkbox
                oFilters.reservations = bSelected;
            }
            
            // Update filter model
            oViewModel.setProperty("/filters", oFilters);
            
            // Apply filters
            this._applyFilters();
        },
        
        onCategoriesPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oCategoriesPopover = this.byId("categoriesPopover");
            
            // Close other popovers
            this.byId("showAsPopover").close();
            this.byId("recurrencePopover").close();
            this.byId("inPersonPopover").close();
            
            // Toggle categories popover
            if (!oCategoriesPopover.isOpen()) {
                oCategoriesPopover.openBy(oButton);
            } else {
                oCategoriesPopover.close();
            }
        },
        
        onCategorySelect: function (oEvent) {
            var sCategory = oEvent.getParameter("listItem").getTitle();
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            
            // Toggle category selection
            var iIndex = oFilters.categories.indexOf(sCategory);
            if (iIndex === -1) {
                oFilters.categories.push(sCategory);
            } else {
                oFilters.categories.splice(iIndex, 1);
            }
            
            // Update filter model
            oViewModel.setProperty("/filters/categories", oFilters.categories);
            
            // Apply filters
            this._applyFilters();
        },
        
        onUnselectAllCategories: function () {
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/filters/categories", []);
            
            // Apply filters
            this._applyFilters();
            MessageToast.show("All categories unselected");
        },
        
        onShowAsPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oShowAsPopover = this.byId("showAsPopover");
            
            // Close other popovers
            this.byId("categoriesPopover").close();
            this.byId("recurrencePopover").close();
            this.byId("inPersonPopover").close();
            
            // Toggle show as popover
            if (!oShowAsPopover.isOpen()) {
                oShowAsPopover.openBy(oButton);
            } else {
                oShowAsPopover.close();
            }
        },
        
        onShowAsSelect: function (oEvent) {
            var oSource = oEvent.getSource();
            var sId = oSource.getId();
            var bSelected = oEvent.getParameter("selected");
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            
            // Update show as filter based on selection
            var sShowAsType = "";
            if (sId.includes("showAsFree")) {
                sShowAsType = "Free";
            } else if (sId.includes("showAsWorkingElsewhere")) {
                sShowAsType = "Working elsewhere";
            } else if (sId.includes("showAsTentative")) {
                sShowAsType = "Tentative";
            } else if (sId.includes("showAsBusy")) {
                sShowAsType = "Busy";
            } else if (sId.includes("showAsOutOfOffice")) {
                sShowAsType = "Out of office";
            }
            
            // Toggle show as selection
            var iIndex = oFilters.showAs.indexOf(sShowAsType);
            if (iIndex === -1 && bSelected) {
                oFilters.showAs.push(sShowAsType);
            } else if (iIndex !== -1 && !bSelected) {
                oFilters.showAs.splice(iIndex, 1);
            }
            
            // Update filter model
            oViewModel.setProperty("/filters/showAs", oFilters.showAs);
            
            // Apply filters
            this._applyFilters();
        },
        
        onRecurrencePress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oRecurrencePopover = this.byId("recurrencePopover");
            
            // Close other popovers
            this.byId("categoriesPopover").close();
            this.byId("showAsPopover").close();
            this.byId("inPersonPopover").close();
            
            // Toggle recurrence popover
            if (!oRecurrencePopover.isOpen()) {
                oRecurrencePopover.openBy(oButton);
            } else {
                oRecurrencePopover.close();
            }
        },
        
        onRecurrenceSelect: function (oEvent) {
            var oSource = oEvent.getSource();
            var sId = oSource.getId();
            var bSelected = oEvent.getParameter("selected");
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            
            // Update recurrence filter based on selection
            if (sId.includes("recurrenceSingle")) {
                if (bSelected) {
                    oFilters.recurrence = ["single"];
                } else {
                    oFilters.recurrence = [];
                }
            } else if (sId.includes("recurrenceSeries")) {
                if (bSelected) {
                    oFilters.recurrence = ["series"];
                } else {
                    oFilters.recurrence = [];
                }
            }
            
            // Update filter model
            oViewModel.setProperty("/filters/recurrence", oFilters.recurrence);
            
            // Apply filters
            this._applyFilters();
        },
        
        onInPersonPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oInPersonPopover = this.byId("inPersonPopover");
            
            // Close other popovers
            this.byId("categoriesPopover").close();
            this.byId("showAsPopover").close();
            this.byId("recurrencePopover").close();
            
            // Toggle in-person popover
            if (!oInPersonPopover.isOpen()) {
                oInPersonPopover.openBy(oButton);
            } else {
                oInPersonPopover.close();
            }
        },
        
        onInPersonSelect: function (oEvent) {
            var oSource = oEvent.getSource();
            var sId = oSource.getId();
            var bSelected = oEvent.getParameter("selected");
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            
            // Update in-person filter based on selection
            var sInPersonType = "";
            if (sId.includes("inPersonRequested")) {
                sInPersonType = "Requested";
            } else if (sId.includes("inPersonNotRequested")) {
                sInPersonType = "Not requested";
            }
            
            // Toggle in-person selection
            var iIndex = oFilters.inPerson.indexOf(sInPersonType);
            if (iIndex === -1 && bSelected) {
                oFilters.inPerson.push(sInPersonType);
            } else if (iIndex !== -1 && !bSelected) {
                oFilters.inPerson.splice(iIndex, 1);
            }
            
            // Update filter model
            oViewModel.setProperty("/filters/inPerson", oFilters.inPerson);
            
            // Apply filters
            this._applyFilters();
        },
        
        _applyFilters: function () {
            var oViewModel = this.getView().getModel("view");
            var oFilters = oViewModel.getProperty("/filters");
            var oModel = this.getView().getModel();
            var aPeople = oModel.getProperty("/people");
            
            // Create a copy of the original data
            var aFilteredPeople = JSON.parse(JSON.stringify(aPeople));
            
            // Apply filters to each person's appointments
            aFilteredPeople.forEach(function(oPerson) {
                oPerson.appointments = oPerson.appointments.filter(function(oAppointment) {
                    // Check appointment type filters
                    if (oFilters.appointments && oAppointment.type === "Type07") {
                        return true;
                    }
                    if (oFilters.meetings && oAppointment.type === "Type01") {
                        return true;
                    }
                    if (oFilters.reservations && oAppointment.type === "Type09") {
                        return true;
                    }
                    
                    // If no type filters are selected, show all appointments
                    if (!oFilters.appointments && !oFilters.meetings && !oFilters.reservations) {
                        return true;
                    }
                    
                    return false;
                });
            });
            
            // Update the model with filtered data
            oModel.setProperty("/people", aFilteredPeople);
            
            // Update filter button text based on active filters
            var sFilterText = "Filter applied";
            var aActiveFilters = [];
            
            if (oFilters.appointments) aActiveFilters.push("Appointments");
            if (oFilters.meetings) aActiveFilters.push("Meetings");
            if (oFilters.reservations) aActiveFilters.push("Reservations");
            if (oFilters.categories.length > 0) aActiveFilters.push("Categories");
            if (oFilters.showAs.length > 0) aActiveFilters.push("Show as");
            if (oFilters.recurrence.length > 0) aActiveFilters.push("Recurrence");
            if (oFilters.inPerson.length > 0) aActiveFilters.push("In-person");
            
            if (aActiveFilters.length > 0) {
                sFilterText = "Filter applied (" + aActiveFilters.length + ")";
            }
            
            this.byId("_IDGenButton7").setText(sFilterText);
        },
        
        onNewEventTypeSelected: function (oEvent) {
            var sEventType = oEvent.getParameter("listItem").getTitle();
            this.byId("newEventPopover").close();
            MessageToast.show("Creating new: " + sEventType);
            
            // Open the NewEventDialog fragment
            this._openNewEventDialog();
        },
        
        onAppointmentSelect: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment");
            var oBindingContext = oAppointment.getBindingContext();
            
            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("filterPopover").close();
            this.byId("newEventPopover").close();
            
            // Get appointment data
            var oAppointmentData = oBindingContext.getObject();
            
            // Update selected event in model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", {
                title: oAppointmentData.title,
                start: oAppointmentData.start,
                end: oAppointmentData.end,
                info: oAppointmentData.info || "",
                type: oAppointmentData.type || "Type01",
                icon: oAppointmentData.icon || ""
            });
            
            // Open event details popover
            this.byId("eventDetailsPopover").openBy(oEvent.getParameter("domRef"));
        },
        
        onIntervalSelect: function (oEvent) {
            var oInterval = oEvent.getParameter("interval");
            var oStartDate = oInterval.getStartDate();
            var oEndDate = oInterval.getEndDate();
            
            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("filterPopover").close();
            this.byId("newEventPopover").close();
            
            // Update selected event in model with new interval
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", {
                title: "New Event",
                start: oStartDate,
                end: oEndDate,
                info: "",
                type: "Type01",
                icon: ""
            });
            
            // Open event details popover
            this.byId("eventDetailsPopover").openBy(oEvent.getParameter("domRef"));
        },
        
        _openEventDetailsPopoverForNew: function () {
            // Create a new event for the current day
            var oToday = UI5Date.getInstance();
            oToday.setHours(9, 0, 0, 0); // Default to 9 AM
            
            var oEnd = UI5Date.getInstance(oToday);
            oEnd.setHours(10, 0, 0, 0); // Default to 10 AM
            
            // Update selected event in model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", {
                title: "New Event",
                start: oToday,
                end: oEnd,
                info: "",
                type: "Type01",
                icon: ""
            });
            
            // Open event details popover
            this.byId("eventDetailsPopover").openBy(this.byId("calendar"));
        },
        
        // Fragment handling functions
        _openNewEventDialog: function() {
            if (!this._oNewEventDialog) {
                this._oNewEventDialog = sap.ui.xmlfragment(
                    "com.capexrevex.capexravex.view.NewEventDialog",
                    this
                );
                this.getView().addDependent(this._oNewEventDialog);
            }
            
            // Set default values for new event (current date from 9:00 AM to 10:00 AM)
            var oEventDate = UI5Date.getInstance();
            oEventDate.setHours(9, 0, 0, 0); // 9:00 AM
            
            var oEnd = UI5Date.getInstance(oEventDate);
            oEnd.setHours(10, 0, 0, 0); // 10:00 AM
            
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", {
                title: "",
                start: oEventDate,
                end: oEnd,
                info: "",
                type: "Type01",
                icon: ""
            });
            
            this._oNewEventDialog.open();
        },
        
        onSaveEventFromDialog: function() {
            // Get values from the dialog using the view model
            var oViewModel = this.getView().getModel("view");
            var oSelectedEvent = oViewModel.getProperty("/selectedEvent");
            
            var sTitle = oSelectedEvent.title;
            var oStart = oSelectedEvent.start;
            var oEnd = oSelectedEvent.end;
            var sDescription = oSelectedEvent.info;
            var sType = oSelectedEvent.type;
            
            // Get additional values from the dialog controls
            var sLocation = sap.ui.getCore().byId("eventLocation").getValue();
            var bAllDay = sap.ui.getCore().byId("allDay").getSelected();
            var bInPerson = sap.ui.getCore().byId("inPerson").getSelected();
            
            // Validate required fields
            if (!sTitle) {
                MessageToast.show("Please enter a title for the event");
                return;
            }
            
            // If all day event, set start to beginning of day and end to end of day
            if (bAllDay) {
                oStart.setHours(0, 0, 0, 0);
                oEnd.setHours(23, 59, 59, 999);
            }
            
            // Validate that end time is after start time
            if (oEnd <= oStart) {
                MessageToast.show("End time must be after start time");
                return;
            }
            
            // Create the new appointment object
            var newAppointment = {
                title: sTitle,
                start: oStart,
                end: oEnd,
                info: sLocation || (bInPerson ? "In-person event" : "Online event"),
                type: sType,
                pic: this._getIconForType(sType),
                tentative: false
            };
            
            // Get the model and add the new appointment to the first person's calendar
            var oModel = this.getView().getModel();
            var aPeople = oModel.getProperty("/people");
            
            if (aPeople && aPeople.length > 0) {
                // Add to the first person's appointments
                aPeople[0].appointments.push(newAppointment);
                
                // Update the model
                oModel.setProperty("/people", aPeople);
                
                // Show success message
                MessageToast.show("Event '" + sTitle + "' has been created and added to your calendar");
                
                // Close the dialog
                if (this._oNewEventDialog) {
                    this._oNewEventDialog.close();
                }
                
                // Refresh the calendar to show the new appointment
                this.byId("calendar").getBinding("rows").refresh(true);
            } else {
                MessageToast.show("Error: Could not find calendar to add event");
            }
        },
        
        _getIconForType: function(sType) {
            switch(sType) {
                case "Type01": return "sap-icon://meeting";
                case "Type02": return "sap-icon://private";
                case "Type03": return "sap-icon://business-objects-experience";
                case "Type04": return "sap-icon://priority";
                case "Type05": return "sap-icon://flight";
                case "Type06": return "sap-icon://globe";
                case "Type07": return "sap-icon://family-care";
                case "Type08": return "sap-icon://cancel";
                case "Type09": return "sap-icon://calendar";
                default: return "sap-icon://calendar";
            }
        },
        
        onCancelEventFromDialog: function() {
            // Close the dialog without saving
            if (this._oNewEventDialog) {
                this._oNewEventDialog.close();
            }
            MessageToast.show("Event creation cancelled");
        },
        
        onSaveEvent: function () {
            var oViewModel = this.getView().getModel("view");
            var oSelectedEvent = oViewModel.getProperty("/selectedEvent");
            
            // Here you would typically save the event to your backend or model
            // For this example, we'll just show a message
            
            MessageToast.show("Event '" + oSelectedEvent.title + "' saved successfully");
            
            // Close the popover
            this.byId("eventDetailsPopover").close();
            
            // Refresh the calendar to show the new/updated event
            this.byId("calendar").getBinding("rows").refresh();
        },
        
        onDiscardEvent: function () {
            // Close the popover without saving
            this.byId("eventDetailsPopover").close();
            MessageToast.show("Changes discarded");
        },
        
        onExit: function() {
            // Clean up the fragment when the controller is destroyed
            if (this._oNewEventDialog) {
                this._oNewEventDialog.destroy();
                this._oNewEventDialog = null;
            }
        }
    });
});


sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/ui/core/date/UI5Date"
], function (Controller, JSONModel, MessageToast, UI5Date) {
    "use strict";
    return Controller.extend("com.capexrevex.capexravex.controller.capexrevex", {
        onInit: function () {
            // Get today's date
            var today = UI5Date.getInstance();
            
            // Set the calendar to start from today
            var startDate = UI5Date.getInstance(
                today.getFullYear(), 
                today.getMonth(), 
                today.getDate(), 
                8, 0 // Start at 8 AM
            );
            
            // Create appointments starting from today
            var appointments = [];
            
            // Today's appointments
            appointments.push({
                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 9, 0),
                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 10, 0),
                title: "Team sync",
                info: "Canteen",
                type: "Type07",
                pic: "sap-icon://family-care"
            });
            
            appointments.push({
                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 11, 0),
                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), 12, 0),
                title: "Client Meeting",
                info: "Conference Room",
                type: "Type01"
            });
            
            // Tomorrow's appointments
            var tomorrow = UI5Date.getInstance(today);
            tomorrow.setDate(tomorrow.getDate() + 1);
            
            appointments.push({
                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 10, 0),
                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 11, 30),
                title: "Project Review",
                info: "In Progress",
                type: "Type01",
                pic: "sap-icon://business-objects-experience"
            });
            
            appointments.push({
                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 14, 0),
                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 15, 0),
                title: "Training Session",
                info: "Online",
                type: "Type03",
                pic: "sap-icon://learning-assistant"
            });
            
            // Day after tomorrow
            var dayAfter = UI5Date.getInstance(tomorrow);
            dayAfter.setDate(dayAfter.getDate() + 1);
            
            appointments.push({
                start: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 9, 0),
                end: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 10, 0),
                title: "Team Standup",
                info: "Daily meeting",
                type: "Type07",
                pic: "sap-icon://group"
            });
            
            appointments.push({
                start: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 13, 0),
                end: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), 14, 30),
                title: "Lunch with Client",
                info: "Restaurant",
                type: "Type02",
                pic: "sap-icon://food"
            });
            
            // Fourth day
            var fourthDay = UI5Date.getInstance(dayAfter);
            fourthDay.setDate(fourthDay.getDate() + 1);
            
            appointments.push({
                start: UI5Date.getInstance(fourthDay.getFullYear(), fourthDay.getMonth(), fourthDay.getDate(), 11, 0),
                end: UI5Date.getInstance(fourthDay.getFullYear(), fourthDay.getMonth(), fourthDay.getDate(), 12, 0),
                title: "Product Demo",
                info: "Showcase new features",
                type: "Type04",
                pic: "sap-icon://presentation"
            });
            
            // Fifth day
            var fifthDay = UI5Date.getInstance(fourthDay);
            fifthDay.setDate(fifthDay.getDate() + 1);
            
            appointments.push({
                start: UI5Date.getInstance(fifthDay.getFullYear(), fifthDay.getMonth(), fifthDay.getDate(), 10, 0),
                end: UI5Date.getInstance(fifthDay.getFullYear(), fifthDay.getMonth(), fifthDay.getDate(), 11, 30),
                title: "Planning Session",
                info: "Quarterly planning",
                type: "Type05",
                pic: "sap-icon://calendar"
            });
            
            // Initialize the view model with data
            var oViewModel = new JSONModel({
                startDate: startDate,
                people: [
                    {
                        name: "John Doe",
                        role: "Developer",
                        appointments: appointments
                    }
                ],
                selectedEvent: {
                    title: "",
                    start: UI5Date.getInstance(),
                    end: UI5Date.getInstance(),
                    info: "",
                    type: "Type01"
                }
            });
            
            // Create additional model with extended data using UI5Date
            var oModel = new JSONModel();
            oModel.setData({
                startDate: startDate,
                people: [
                    {
                        pic: "test-resources/sap/ui/documentation/sdk/images/John_Miller.png",
                        name: "John Miller",
                        role: "team member",
                        appointments: [
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), "08", "00"),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), "09", "00"),
                                title: "Team sync",
                                info: "Canteen",
                                type: "Type07",
                                pic: "sap-icon://family-care"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), "09", "0"),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), "11", "0"),
                                title: "Morning Sync",
                                info: "I call you",
                                type: "Type01",
                                pic: "sap-icon://call"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), "10", "00"),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), "12", "00"),
                                title: "Sync Bill",
                                info: "Online",
                                type: "Type03"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), "10", "00"),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), "13", "00"),
                                title: "Check Flights",
                                info: "no room",
                                type: "Type09",
                                pic: "sap-icon://flight"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), "13", "00"),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), "14", "00"),
                                title: "Lunch",
                                info: "canteen",
                                type: "Type05",
                                pic: "sap-icon://private"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), "18", "00"),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), "20", "00"),
                                title: "Discussion of the plan",
                                info: "Online meeting",
                                type: "Type04"
                            }
                        ]
                    },
                    {
                        pic: "test-resources/sap/ui/documentation/sdk/images/Donna_Moore.jpg",
                        name: "Donna Moore",
                        role: "team member",
                        appointments: [
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), "08", "00"),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), "09", "26"),
                                title: "Team sync",
                                info: "Canteen",
                                type: "Type07",
                                pic: "sap-icon://family-care"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), "10", "00"),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), "12", "00"),
                                title: "Sync John",
                                info: "Online",
                                type: "Type03"
                            },
                            {
                                start: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), "11", "00"),
                                end: UI5Date.getInstance(today.getFullYear(), today.getMonth(), today.getDate(), "12", "00"),
                                title: "Prep for planning",
                                info: "room 5",
                                type: "Type01",
                                pic: "sap-icon://family-care"
                            }
                        ]
                    },
                    {
                        pic: "test-resources/sap/ui/documentation/sdk/images/John_Miller.png",
                        name: "Alex Johnson",
                        role: "team member",
                        appointments: [
                            {
                                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), "09", "00"),
                                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), "10", "00"),
                                title: "Team sync",
                                info: "Canteen",
                                type: "Type07",
                                pic: "sap-icon://family-care"
                            },
                            {
                                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), "10", "00"),
                                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), "12", "00"),
                                title: "Project Planning",
                                info: "Conference Room",
                                type: "Type01"
                            },
                            {
                                start: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), "14", "00"),
                                end: UI5Date.getInstance(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), "15", "00"),
                                title: "Client Call",
                                info: "Online",
                                type: "Type03"
                            }
                        ]
                    },
                    {
                        pic: "test-resources/sap/ui/documentation/sdk/images/Donna_Moore.jpg",
                        name: "Sarah Williams",
                        role: "team member",
                        appointments: [
                            {
                                start: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), "09", "00"),
                                end: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), "10", "00"),
                                title: "Team sync",
                                info: "Canteen",
                                type: "Type07",
                                pic: "sap-icon://family-care"
                            },
                            {
                                start: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), "11", "00"),
                                end: UI5Date.getInstance(dayAfter.getFullYear(), dayAfter.getMonth(), dayAfter.getDate(), "12", "30"),
                                title: "Design Review",
                                info: "Conference Room",
                                type: "Type01"
                            }
                        ]
                    }
                ]
            });
            
            // Set both models to the view
            this.getView().setModel(oViewModel, "view");
            this.getView().setModel(oModel);
        },
        
        // Role-based functionality
        roles: {
            donna: "Donna Moore",
            manager: "manager",
            admin: "admin"
        },
        
        handleRoleChange: function () {
            this.getView().getModel().refresh(true);
        },
        
        getUserRole: function() {
            return this.roles[this.byId("userRole").getSelectedKey()];
        },
        
        canModifyAppointments: function(sRole) {
            var sUserRole = this.getUserRole();
            if (sUserRole === this.roles.manager || sUserRole === this.roles.admin || sUserRole === sRole) {
                return true;
            }
        },
        
        // Drag and Drop functionality
        handleAppointmentDragEnter: function(oEvent) {
            if (this.isAppointmentOverlap(oEvent, oEvent.getParameter("calendarRow"))) {
                oEvent.preventDefault();
            }
        },
        
        handleAppointmentDrop: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                oCalendarRow = oEvent.getParameter("calendarRow"),
                bCopy = oEvent.getParameter("copy"),
                sTitle = oAppointment.getTitle(),
                oModel = this.getView().getModel(),
                oAppBindingContext = oAppointment.getBindingContext(),
                oRowBindingContext = oCalendarRow.getBindingContext(),
                handleAppointmentDropBetweenRows = function () {
                    var aPath = oAppBindingContext.getPath().split("/"),
                        iIndex = aPath.pop(),
                        sRowAppointmentsPath = aPath.join("/");
                    oRowBindingContext.getObject().appointments.push(
                        oModel.getProperty(oAppBindingContext.getPath())
                    );
                    oModel.getProperty(sRowAppointmentsPath).splice(iIndex, 1);
                };
            if (bCopy) { // "copy" appointment
                var oProps = Object.assign({}, oModel.getProperty(oAppointment.getBindingContext().getPath()));
                oProps.start = oStartDate;
                oProps.end = oEndDate;
                oRowBindingContext.getObject().appointments.push(oProps);
            } else { // "move" appointment
                oModel.setProperty("start", oStartDate, oAppBindingContext);
                oModel.setProperty("end", oEndDate, oAppBindingContext);
                if (oAppointment.getParent() !== oCalendarRow) {
                    handleAppointmentDropBetweenRows();
                }
            }
            oModel.refresh(true);
            MessageToast.show(oCalendarRow.getTitle() + "'s '" + "Appointment '" + sTitle + "' now starts at \n" + oStartDate + "\n and end at \n" + oEndDate + ".");
        },
        
        handleAppointmentResize: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate");
            if (!this.isAppointmentOverlap(oEvent, oAppointment.getParent())) {
                MessageToast.show("Appointment '" + oAppointment.getTitle() + "' now starts at \n" + oStartDate + "\n and end at \n" + oEndDate + ".");
                oAppointment
                    .setStartDate(oStartDate)
                    .setEndDate(oEndDate);
            } else {
                MessageToast.show("As a manager you can not resize events if they overlap with another events");
            }
        },
        
        handleAppointmentCreate: function (oEvent) {
            var oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                oPlanningCalendarRow = oEvent.getParameter("calendarRow"),
                oModel = this.getView().getModel(),
                sPath = oPlanningCalendarRow.getBindingContext().getPath();
            oModel.getProperty(sPath).appointments.push({
                title: "New Appointment",
                start: oStartDate,
                end: oEndDate
            });
            MessageToast.show("New Appointment is created at \n" + oStartDate + "\n and end at \n" + oEndDate + ".");
            oModel.refresh(true);
        },
        
        isAppointmentOverlap: function (oEvent, oCalendarRow) {
            var oAppointment = oEvent.getParameter("appointment"),
                oStartDate = oEvent.getParameter("startDate"),
                oEndDate = oEvent.getParameter("endDate"),
                bAppointmentOverlapped;
            if (this.getUserRole() === this.roles.manager) {
                bAppointmentOverlapped = oCalendarRow.getAppointments().some(function (oCurrentAppointment) {
                    if (oCurrentAppointment === oAppointment) {
                        return;
                    }
                    var oAppStartTime = oCurrentAppointment.getStartDate().getTime(),
                        oAppEndTime = oCurrentAppointment.getEndDate().getTime();
                    if (oAppStartTime <= oStartDate.getTime() && oStartDate.getTime() < oAppEndTime) {
                        return true;
                    }
                    if (oAppStartTime < oEndDate.getTime() && oEndDate.getTime() <= oAppEndTime) {
                        return true;
                    }
                    if (oStartDate.getTime() <= oAppStartTime && oAppStartTime < oEndDate.getTime()) {
                        return true;
                    }
                });
            }
            return bAppointmentOverlapped;
        },
        
        // Toolbar and UI functionality
        onTodayPress: function () {
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/startDate", UI5Date.getInstance());
            MessageToast.show("Navigated to today");
        },
        
        onViewSelectPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oViewPopover = this.byId("viewPopover");
            
            // Close other popovers
            this.byId("filterPopover").close();
            this.byId("newEventPopover").close();
            this.byId("eventDetailsPopover").close();
            
            // Toggle view popover
            if (!oViewPopover.isOpen()) {
                oViewPopover.openBy(oButton);
            } else {
                oViewPopover.close();
            }
        },
        
        onFilterPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oFilterPopover = this.byId("filterPopover");
            
            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("newEventPopover").close();
            this.byId("eventDetailsPopover").close();
            
            // Toggle filter popover
            if (!oFilterPopover.isOpen()) {
                oFilterPopover.openBy(oButton);
            } else {
                oFilterPopover.close();
            }
        },
        
        onMeetNowPress: function () {
            MessageToast.show("Starting meeting now...");
        },
        
        onNewEventPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oNewEventPopover = this.byId("newEventPopover");
            
            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("filterPopover").close();
            this.byId("eventDetailsPopover").close();
            
            // Toggle new event popover
            if (!oNewEventPopover.isOpen()) {
                oNewEventPopover.openBy(oButton);
            } else {
                oNewEventPopover.close();
            }
        },
        
        onNotificationPress: function () {
            MessageToast.show("No new notifications");
        },
        
        onViewSelected: function (oEvent) {
            var sSelectedView = oEvent.getParameter("listItem").getTitle();
            var oButton = this.byId("viewSelectButton");
            var oCalendar = this.byId("calendar");
            
            oButton.setText(sSelectedView);
            this.byId("viewPopover").close();
            
            // Update calendar view
            oCalendar.setViewKey(sSelectedView.replace(" ", ""));
            MessageToast.show("View changed to: " + sSelectedView);
        },
        
        onSavedViewsPress: function () {
            MessageToast.show("Saved views feature coming soon");
        },
        
        onClearFilters: function () {
            // Clear all filter checkboxes
            var aCheckBoxes = this.byId("filterPopover").getItemsByType("Active");
            aCheckBoxes.forEach(function(oCheckBox) {
                if (oCheckBox.isA("sap.m.CheckBox")) {
                    oCheckBox.setSelected(false);
                }
            });
            MessageToast.show("All filters cleared");
        },
        
        onNewEventTypeSelected: function (oEvent) {
            var sEventType = oEvent.getParameter("listItem")
            this.byId("newEventPopover").close();
            MessageToast.show("Creating new: " + sEventType);
            
            // Open the RemarksDialog fragment
            this._openRemarksDialog();
        },
        
        onAppointmentSelect: function (oEvent) {
            var oAppointment = oEvent.getParameter("appointment");
            var oBindingContext = oAppointment.getBindingContext();
            
            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("filterPopover").close();
            this.byId("newEventPopover").close();
            
            // Get appointment data
            var oAppointmentData = oBindingContext.getObject();
            
            // Update selected event in model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", {
                title: oAppointmentData.title,
                start: oAppointmentData.start,
                end: oAppointmentData.end,
                info: oAppointmentData.info || "",
                type: oAppointmentData.type || "Type01",
                icon: oAppointmentData.icon || ""
            });
            
            // Open event details popover
            this.byId("eventDetailsPopover").openBy(oEvent.getParameter("domRef"));
        },
        
        onIntervalSelect: function (oEvent) {
            var oInterval = oEvent.getParameter("interval");
            var oStartDate = oInterval.getStartDate();
            var oEndDate = oInterval.getEndDate();
            
            // Close other popovers
            this.byId("viewPopover").close();
            this.byId("filterPopover").close();
            this.byId("newEventPopover").close();
            
            // Update selected event in model with new interval
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", {
                title: "New Event",
                start: oStartDate,
                end: oEndDate,
                info: "",
                type: "Type01",
                icon: ""
            });
            
            // Open event details popover
            this.byId("eventDetailsPopover").openBy(oEvent.getParameter("domRef"));
        },
        
        _openEventDetailsPopoverForNew: function () {
            // Create a new event for the current day
            var oToday = UI5Date.getInstance();
            oToday.setHours(9, 0, 0, 0); // Default to 9 AM
            
            var oEnd = UI5Date.getInstance(oToday);
            oEnd.setHours(10, 0, 0, 0); // Default to 10 AM
            
            // Update selected event in model
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", {
                title: "New Event",
                start: oToday,
                end: oEnd,
                info: "",
                type: "Type01",
                icon: ""
            });
            
            // Open event details popover
            this.byId("eventDetailsPopover").openBy(this.byId("calendar"));
        },
        
        // Fragment handling functions
        _openRemarksDialog: function() {
            if (!this._oRemarksDialog) {
                this._oRemarksDialog = sap.ui.xmlfragment(
                    "com.capexrevex.capexravex.view.RemarksDialog",
                    this
                );
                this.getView().addDependent(this._oRemarksDialog);
            }
            
            // Set default values for new event (current date from 4:00 PM to 4:30 PM)
            var oEventDate = UI5Date.getInstance();
            oEventDate.setHours(16, 0, 0, 0); // 4:00 PM
            
            var oEnd = UI5Date.getInstance(oEventDate);
            oEnd.setHours(16, 30, 0, 0); // 4:30 PM
            
            var oViewModel = this.getView().getModel("view");
            oViewModel.setProperty("/selectedEvent", {
                title: "",
                start: oEventDate,
                end: oEnd,
                info: "",
                type: "Type01",
                icon: ""
            });
            
            this._oRemarksDialog.open();
        },
        
        onSaveEventFromDialog: function() {
            var oViewModel = this.getView().getModel("view");
            var oSelectedEvent = oViewModel.getProperty("/selectedEvent");
            
            // Get values from the dialog
            var sTitle = sap.ui.getCore().byId("eventTitle");
            var sAttendees = sap.ui.getCore().byId("eventAttendees")
            var bMakeRecurring = sap.ui.getCore().byId("makeRecurring")
            var bAllDay = sap.ui.getCore().byId("allDay")
            var bInPerson = sap.ui.getCore().byId("inPerson")
            var sResponseOption = sap.ui.getCore().byId("responseOptions")
            var sShowAs = sap.ui.getCore().byId("showAs")
            var sDescription = sap.ui.getCore().byId("eventDescription")
            
            // Validate required fields
            // if (!sTitle) {
            //     MessageToast.show("Please enter a title for the event");
            //     return;
            // }
            
            // Get the date and time values
            var oDatePicker = sap.ui.getCore().byId("eventDate");
            var oStartTimePicker = sap.ui.getCore().byId("startTime");
            var oEndTimePicker = sap.ui.getCore().byId("endTime");
            
            var oDate = oDatePicker.getDateValue();
            var oStartTime = oStartTimePicker.getDateValue();
            var oEndTime = oEndTimePicker.getDateValue();
            
            // Combine date and start time
            var oStart = new Date(oDate);
            oStart.setHours(oStartTime.getHours(), oStartTime.getMinutes(), 0, 0);
            
            var oEnd = new Date(oDate);
            oEnd.setHours(oEndTime.getHours(), oEndTime.getMinutes(), 0, 0);
            
            // Validate that end time is after start time
            if (oEnd <= oStart) {
                MessageToast.show("End time must be after start time");
                return;
            }
            
            // Create the new appointment object
            var newAppointment = {
                start: oStart,
                end: oEnd,
                // title: sTitle,
                info: bInPerson ? "In-person event" : "Online event",
                type: "Type01", // Default type
                attendees: sAttendees,
                description: sDescription,
                recurring: bMakeRecurring,
                allDay: bAllDay,
                responseOption: sResponseOption,
                showAs: sShowAs
            };
            
            // Get the model and add the new appointment to the first person's calendar
            var oModel = this.getView().getModel();
            var aPeople = oModel.getProperty("/people");
            
            if (aPeople && aPeople.length > 0) {
                // Add to the first person's appointments
                aPeople[0].appointments.push(newAppointment);
                
                // Update the model
                oModel.setProperty("/people", aPeople);
                
                // Show success message
                MessageToast.show("Event '" + sTitle + "' has been created and added to your calendar");
                
                // Close the dialog
                if (this._oRemarksDialog) {
                    this._oRemarksDialog.close();
                }
                
                // Refresh the calendar to show the new appointment
                this.byId("calendar").getBinding("rows").refresh(true);
            } else {
                MessageToast.show("Error: Could not find calendar to add event");
            }
        },
        
        onCancelEventFromDialog: function() {
            // Close the dialog without saving
            if (this._oRemarksDialog) {
                this._oRemarksDialog.close();
            }
            MessageToast.show("Event creation cancelled");
        },
        
        onSaveEvent: function () {
            var oViewModel = this.getView().getModel("view");
            var oSelectedEvent = oViewModel.getProperty("/selectedEvent");
            
            // Here you would typically save the event to your backend or model
            // For this example, we'll just show a message
            
            MessageToast.show("Event '" + oSelectedEvent.title + "' saved successfully");
            
            // Close the popover
            this.byId("eventDetailsPopover").close();
            
            // Refresh the calendar to show the new/updated event
            this.byId("calendar").getBinding("rows").refresh();
        },
        
        onDiscardEvent: function () {
            // Close the popover without saving
            this.byId("eventDetailsPopover").close();
            MessageToast.show("Changes discarded");
        },
        
        onExit: function() {
            // Clean up the fragment when the controller is destroyed
            if (this._oRemarksDialog) {
                this._oRemarksDialog.destroy();
                this._oRemarksDialog = null;
            }
        }
    });
});
